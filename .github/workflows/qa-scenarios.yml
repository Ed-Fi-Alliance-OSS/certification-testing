name: QA Scenarios

on:
  pull_request:
    paths:
      - 'scripts/run-scenarios.cjs'
      - 'bruno/Tests/**'
      - 'bruno/SIS/**'
      - '.github/workflows/qa-scenarios.yml'
  push:
    branches: [ main ]
    paths:
      - 'scripts/run-scenarios.cjs'
      - 'bruno/Tests/**'
      - 'bruno/SIS/**'
  workflow_dispatch:
    inputs:
      env:
        description: 'Bruno environment name (default ci.ed-fi.org)'
        required: false
        default: 'ci.ed-fi.org'
      includeSteps:
        description: 'Include detailed steps in aggregate summary'
        required: false
        default: 'false'

permissions:
  contents: read
  pull-requests: write
  actions: read

concurrency:
  group: qa-scenarios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: bruno/package-lock.json

      - name: Mask client secret (if present)
        run: |
          if [ -f bruno/Tests/environments/ci.ed-fi.org.bru ]; then
            SECRET_LINE=$(grep -E 'edFiClientSecret:' bruno/Tests/environments/ci.ed-fi.org.bru || true)
            if [ -n "$SECRET_LINE" ]; then
              SECRET_VAL=$(echo "$SECRET_LINE" | sed -E 's/.*edFiClientSecret:\s*([^ ]+)/\1/')
              echo "::add-mask::$SECRET_VAL"
            fi
          fi

      - name: Run QA Scenarios
        id: runqa
        env:
          BRUNO_ENV: ${{ github.event.inputs.env || 'ci.ed-fi.org' }}
          INCLUDE_STEPS: ${{ github.event.inputs.includeSteps || 'false' }}
        run: |
          set -e
          INCLUDE_FLAG=""
          if [ "$INCLUDE_STEPS" = "true" ]; then INCLUDE_FLAG="--include-steps"; fi
          node scripts/run-scenarios.cjs --env "$BRUNO_ENV" $INCLUDE_FLAG || EXIT=$?
          # Preserve non-zero exit for later; script already writes summary.json
          if [ -n "$EXIT" ]; then echo "exit_code=$EXIT" >> $GITHUB_OUTPUT; else echo "exit_code=0" >> $GITHUB_OUTPUT; fi

      - name: Show aggregate summary
        if: always()
        run: |
          if [ -f automation-testing/results/summary.json ]; then
            cat automation-testing/results/summary.json | jq '.' || cat automation-testing/results/summary.json
          else
            echo "summary.json not found"
          fi

      - name: Upload QA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-scenarios-results
          path: |
            automation-testing/results/summary.json
            automation-testing/results/*.json
            automation-testing/results/last-output.txt
          if-no-files-found: warn

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summaryPath = 'automation-testing/results/summary.json';
            if (!fs.existsSync(summaryPath)) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: ':warning: QA Scenarios did not produce a summary.json file.'
              });
            } else {
              const data = JSON.parse(fs.readFileSync(summaryPath,'utf8'));
              const lines = [];
              lines.push('### QA Scenarios Summary');
              lines.push(`Status: **${data.exitStatus}**`);
              lines.push(`Entities Processed: **${data.totals.entitiesProcessed}**`);
              lines.push(`Assertions: Passed **${data.totals.assertionsPassed}**, Failed **${data.totals.assertionsFailed}**, Total **${data.totals.assertionsTotal}**`);
              if (data.entities) {
                lines.push('');
                lines.push('| Entity | Passed | Failed | Total |');
                lines.push('|--------|--------|--------|-------|');
                for (const e of data.entities) {
                  const a = e.assertions; lines.push(`| ${e.entity} | ${a.passed} | ${a.failed} | ${a.total} |`);
                }
              }
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: lines.join('\n')
              });
            }

      - name: Fail if scenarios failed
        if: steps.runqa.outputs.exit_code != '0'
        run: |
          echo "Scenario script exited with code ${EXIT_CODE}"; exit 1
