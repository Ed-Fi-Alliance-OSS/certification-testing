{
	"info": {
		"_postman_id": "ed67a38f-3afa-4935-ac37-08a792768b34",
		"name": "Certification Testing v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27778522",
		"_collection_link": "https://gap-ed-fi-qa.postman.co/workspace/EdFi---Team-B~293ad61d-bbcc-4e76-ae72-b7f19e7986a0/collection/27778522-ed67a38f-3afa-4935-ac37-08a792768b34?action=share&source=collection_link&creator=27778522"
	},
	"item": [
		{
			"name": "SIS",
			"item": [
				{
					"name": "01-EducationOrganization Copy",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "GET Schools",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"eoSchoolId = _.find(jsonData, (x) => x.nameOfInstitution == 'Grand Oaks High School');\r",
													"\r",
													"pm.environment.set(\"s1SchoolId\", eoSchoolId.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901333",
													"disabled": true
												},
												{
													"key": "schoolId",
													"value": "255901444",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"Scenario 1 POST: addressTypeDescriptor value for the school is 'Physical'\", () =>{\r",
													"    let addressTypeDescriptorValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.addressTypeDescriptor.includes(\"Physical\")) {\r",
													"            addressTypeDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(addressTypeDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: city value for the school is 'Grand Oaks'\", () =>{\r",
													"    let cityValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.city.includes(\"Grand Oaks\")) {\r",
													"            cityValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(cityValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: postalCode value for the school is '73334'\", () =>{\r",
													"    let postalCodeValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.postalCode.includes(\"73334\")) {\r",
													"            postalCodeValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(postalCodeValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () =>{\r",
													"    let stateAbbreviationDescriptorValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.stateAbbreviationDescriptor.includes(\"TX\")) {\r",
													"            stateAbbreviationDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(stateAbbreviationDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: streetNumberName value for the school is '456 Oaks Street'\", () =>{\r",
													"    // pm.expect(response.addresses[0].streetNumberName).to.eql(\"456 Oaks Street\");\r",
													"    let streetNumberNameValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.streetNumberName.includes(\"456 Oaks Street\")) {\r",
													"            streetNumberNameValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(streetNumberNameValue).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    {\"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"}\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"Scenario 1 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () =>{\r",
													"    pm.expect(certEducationOrganizationCategories.length).to.eql(educationOrganizationCategoryDescriptorArray.length);\r",
													"    certEducationOrganizationCategories.forEach(expected => {\r",
													"        pm.expect(educationOrganizationCategoryDescriptorArray).to.deep.include(expected);\r",
													"    });\r",
													"});\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"Scenario 1 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
													"    pm.expect(certGradeLevels.length).to.eql(gradeLevelDescriptorArray.length);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        pm.expect(gradeLevelDescriptorArray).to.deep.include(expected);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response.localEducationAgencyReference.localEducationAgencyId).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution).to.eql(\"Grand Oaks High School\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: schoolId value for the school is '255901333'\", () =>{\r",
													"    pm.expect(response.schoolId).to.eql(255901333);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution).to.eql(\"GOHS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s1SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s1SchoolId}}"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901333",
													"disabled": true
												},
												{
													"key": "schoolId",
													"value": "255901444",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"courseSystemValue = pm.environment.get(\"courseSystemValue\");\r",
													"console.log(courseSystemValue);\r",
													"\r",
													"let eoCourses = _.find(jsonData, (x) => x.courseCode == courseSystemValue || x.courseCode == 'ALG 01');\r",
													"\r",
													"pm.expect(eoCourses).to.not.be.undefined;\r",
													"\r",
													"let courseCode = eoCourses ? eoCourses.courseCode : null;\r",
													"\r",
													"pm.expect(courseCode).to.satisfy((code) => \r",
													"    code === courseSystemValue || code === 'ALG 01'\r",
													");\r",
													"\r",
													"if (eoCourses) {\r",
													"    pm.environment.set(\"s1CourseID\", eoCourses.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses"
											],
											"query": [
												{
													"key": "courseCode",
													"value": "ALG-01",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 1 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor).to.contain(\"Mathematics\");\r",
													"});\r",
													"\r",
													"pm.environment.set('evCourseCode',response.courseCode);\r",
													"\r",
													"pm.test(\"Scenario 1 POST: courseCode value for the course is \" + pm.environment.get('evCourseCode'), () =>{\r",
													"    pm.expect(response.courseCode).to.eql(pm.environment.get('evCourseCode'));\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"Scenario 1 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = false;\r",
													"    identificationCodesArray.forEach(item => {\r",
													"        if (item.courseIdentificationSystemDescriptor.includes(\"State course code\")) {\r",
													"            courseIdentificationSystemDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: identificationCode value for the course is '03100500'\", () => {\r",
													"    let identificationCodeValue = false;\r",
													"    identificationCodesArray.forEach(item => {\r",
													"        if (item.identificationCode === \"03100500\") {\r",
													"            identificationCodeValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(identificationCodeValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"Scenario 1 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = false;\r",
													"    levelCharacteristicsArray.forEach(item => {\r",
													"        if (item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\")) {\r",
													"            courseLevelCharacteristicDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: courseTitle value for the course is 'Algebra I'\", () =>{\r",
													"    pm.expect(response.courseTitle).to.eql(\"Algebra I\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
													"    pm.expect(response.maxCompletionsForCredit).to.eql(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s1CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s1CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"console.log(jsonData);\r",
													"\r",
													"programSystemValue = pm.environment.get(\"programSystemValue\");\r",
													"console.log(programSystemValue);\r",
													"\r",
													"let eoPrograms = _.find(jsonData, (x) => x.programId == programSystemValue || x.programId == '101');\r",
													"console.log(eoPrograms)\r",
													"\r",
													"pm.expect(eoPrograms).to.not.be.undefined;\r",
													"\r",
													"let programID = eoPrograms ? eoPrograms.programId : null;\r",
													"\r",
													"pm.expect(programID).to.satisfy((code) =>\r",
													"    code === '101' || code === programSystemValue\r",
													");\r",
													"\r",
													"if (eoPrograms) {\r",
													"    pm.environment.set(\"s1ProgramID\", eoPrograms.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/programs",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 1 POST: Test that Program request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: programId value for the course is '101'\", () =>{\r",
													"    pm.expect(response.programId).to.eql(\"101\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: programName value for the course is 'Grand Bend Bilingual 101'\", () =>{\r",
													"    pm.expect(response.programName).to.eql(\"Grand Bend Bilingual 101\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: programTypeDescriptor value for the course is 'Bilingual'\", () =>{\r",
													"    pm.expect(response.programTypeDescriptor).to.contain(\"Bilingual\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/programs/{{s1ProgramID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"programs",
												"{{s1ProgramID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Class Periods",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"console.log(jsonData);\r",
													"\r",
													"classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
													"console.log(classPeriodSystemValue);\r",
													"\r",
													"let eoClassPeriods = _.find(jsonData, (x) => x.classPeriodName == classPeriodSystemValue || x.classPeriodName == 'Class Period 1');\r",
													"console.log(eoClassPeriods)\r",
													"\r",
													"pm.expect(eoClassPeriods).to.not.be.undefined;\r",
													"\r",
													"let classPeriodName = eoClassPeriods ? eoClassPeriods.classPeriodName : null;\r",
													"\r",
													"pm.expect(classPeriodName).to.satisfy((code) =>\r",
													"    code === 'Class Period 1' || code === programSystemValue\r",
													");\r",
													"\r",
													"if (eoClassPeriods) {\r",
													"    pm.environment.set(\"s1ClassPeriodName\", eoClassPeriods.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 1 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 1 POST: classPeriodName value for the course is 'Class Period 1'\", () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(\"Class Period 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: schoolId value for the course is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(255901107);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s1ClassPeriodName}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s1ClassPeriodName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"console.log(jsonData);\r",
													"\r",
													"locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"console.log(locationSystemValue);\r",
													"\r",
													"let eoLocation = _.find(jsonData, (x) => x.classroomIdentificationCode == locationSystemValue || x.classroomIdentificationCode == '501');\r",
													"console.log(eoLocation)\r",
													"\r",
													"pm.expect(eoLocation).to.not.be.undefined;\r",
													"\r",
													"let classroomIdentificationCode = eoLocation ? eoLocation.classroomIdentificationCode : null;\r",
													"\r",
													"pm.expect(classroomIdentificationCode).to.satisfy((code) =>\r",
													"    code === '501' || code === locationSystemValue\r",
													");\r",
													"\r",
													"if (eoLocation) {\r",
													"    pm.environment.set(\"s1Location\", eoLocation.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 1 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 1 POST: classroomIdentificationCode value for the course is '501'\", () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(\"501\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: schoolId value for the course is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 1 POST: maximumNumberOfSeats value for the course is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats).to.eql(22);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{certLocationID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{certLocationID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "GET Schools",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"eoSchoolId = _.find(jsonData, (x) => x.nameOfInstitution == 'Grand Oaks Middle School');\r",
													"\r",
													"pm.environment.set(\"s2SchoolId\", eoSchoolId.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901333",
													"disabled": true
												},
												{
													"key": "schoolId",
													"value": "255901444",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"Scenario 2 POST: addressTypeDescriptor value for the school is 'Physical'\", () =>{\r",
													"    let addressTypeDescriptorValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.addressTypeDescriptor.includes(\"Physical\")) {\r",
													"            addressTypeDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(addressTypeDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: city value for the school is 'Grand Oaks'\", () =>{\r",
													"    let cityValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.city.includes(\"Grand Oaks\")) {\r",
													"            cityValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(cityValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: postalCode value for the school is '73334'\", () =>{\r",
													"    let postalCodeValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.postalCode.includes(\"73334\")) {\r",
													"            postalCodeValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(postalCodeValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () =>{\r",
													"    let stateAbbreviationDescriptorValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.stateAbbreviationDescriptor.includes(\"TX\")) {\r",
													"            stateAbbreviationDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(stateAbbreviationDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: streetNumberName value for the school is '9993 West Blvd.'\", () =>{\r",
													"    let streetNumberNameValue = false;\r",
													"    addressesArray.forEach(item => {\r",
													"        if (item.streetNumberName.includes(\"9993 West Blvd.\")) {\r",
													"            streetNumberNameValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(streetNumberNameValue).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    {\"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\"}\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"Scenario 2 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () =>{\r",
													"    pm.expect(certEducationOrganizationCategories.length).to.eql(educationOrganizationCategoryDescriptorArray.length);\r",
													"    certEducationOrganizationCategories.forEach(expected => {\r",
													"        pm.expect(educationOrganizationCategoryDescriptorArray).to.deep.include(expected);\r",
													"    });\r",
													"});\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"Scenario 2 POST: gradeLevelDescriptor value for the school are 'Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
													"    pm.expect(certGradeLevels.length).to.eql(gradeLevelDescriptorArray.length);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        pm.expect(gradeLevelDescriptorArray).to.deep.include(expected);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response.localEducationAgencyReference.localEducationAgencyId).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution).to.eql(\"Grand Oaks Middle School\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: schoolId value for the school is '255901444'\", () =>{\r",
													"    pm.expect(response.schoolId).to.eql(255901444);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution).to.eql(\"GOMS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s2SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s2SchoolId}}"
											],
											"query": [
												{
													"key": "schoolId",
													"value": "255901001",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"eoCourseCode = _.find(jsonData, (x) => x.courseCode == 'ART 01');\r",
													"\r",
													"pm.environment.set(\"s2CourseCode\", eoCourseCode.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses"
											],
											"query": [
												{
													"key": "courseCode",
													"value": "ALG-01",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 2 POST: Test that Courses request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 2 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor).to.contain(\"Fine and Performing Arts\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: courseCode value for the course is 'ART 01\", () =>{\r",
													"    pm.expect(response.courseCode).to.eql(\"ART 01\");\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"Scenario 2 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = false;\r",
													"    identificationCodesArray.forEach(item => {\r",
													"        if (item.courseIdentificationSystemDescriptor.includes(\"LEA course code\")) {\r",
													"            courseIdentificationSystemDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
													"    let identificationCodeValue = false;\r",
													"    identificationCodesArray.forEach(item => {\r",
													"        if (item.identificationCode === \"ART 01\") {\r",
													"            identificationCodeValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(identificationCodeValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"Scenario 2 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = false;\r",
													"    levelCharacteristicsArray.forEach(item => {\r",
													"        if (item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\")) {\r",
													"            courseLevelCharacteristicDescriptorValue = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
													"    pm.expect(response.courseTitle).to.eql(\"Art, Grade 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s2CourseCode}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s2CourseCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Class Periods",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"console.log(jsonData);\r",
													"\r",
													"classPeriodSystemValueS2 = pm.environment.get(\"classPeriodSystemValueS2\");\r",
													"console.log(classPeriodSystemValueS2);\r",
													"\r",
													"let eoClassPeriods = _.find(jsonData, (x) => x.classPeriodName == classPeriodSystemValueS2 || x.classPeriodName == 'Class Period 1');\r",
													"console.log(eoClassPeriods)\r",
													"\r",
													"pm.expect(eoClassPeriods).to.not.be.undefined;\r",
													"\r",
													"let classPeriodName = eoClassPeriods ? eoClassPeriods.classPeriodName : null;\r",
													"\r",
													"pm.expect(classPeriodName).to.satisfy((code) =>\r",
													"    code === 'Class Period 1' || code === programSystemValue\r",
													");\r",
													"\r",
													"if (eoClassPeriods) {\r",
													"    pm.environment.set(\"s2ClassPeriodName\", eoClassPeriods.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 2 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 2 POST: classPeriodName value for the course is 'Class Period 1'\", () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(\"Class Period 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: schoolId value for the course is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: startTime value for the course is '08:15:00'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(\"08:15:00\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: startTime value for the course is '09:25:00'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(\"09:25:00\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s2ClassPeriodName}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s2ClassPeriodName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const _ = require('lodash');\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"console.log(jsonData);\r",
													"\r",
													"locationSystemValue = pm.environment.get(\"locationSystemValueS2\");\r",
													"console.log(locationSystemValue);\r",
													"\r",
													"let eoLocation = _.find(jsonData, (x) => x.classroomIdentificationCode == locationSystemValue || x.classroomIdentificationCode == '501');\r",
													"console.log(eoLocation)\r",
													"\r",
													"pm.expect(eoLocation).to.not.be.undefined;\r",
													"\r",
													"let classroomIdentificationCode = eoLocation ? eoLocation.classroomIdentificationCode : null;\r",
													"\r",
													"pm.expect(classroomIdentificationCode).to.satisfy((code) =>\r",
													"    code === '501' || code === locationSystemValue\r",
													");\r",
													"\r",
													"if (eoLocation) {\r",
													"    pm.environment.set(\"s2Location\", eoLocation.id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
													"    if (!err && res) {\r",
													"        eval(res.text());\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Scenario 2 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"Scenario 2 POST: classroomIdentificationCode value for the course is '901'\", () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(\"901\");\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: schoolId value for the course is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"Scenario 2 POST: maximumNumberOfSeats value for the course is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats).to.eql(22);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s2Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s2Location}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Assessment",
			"item": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientSecret",
				"value": "{{edFiClientSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{edFiClientId}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{baseUrl}}/oauth/token",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "client_credentials",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "CertToken",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
					"    if (!err && res) {\r",
					"        eval(res.text());\r",
					"    }\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}