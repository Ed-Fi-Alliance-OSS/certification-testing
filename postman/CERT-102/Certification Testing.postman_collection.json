{
	"info": {
		"_postman_id": "ed67a38f-3afa-4935-ac37-08a792768b34",
		"name": "Certification Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27778522",
		"_collection_link": "https://gap-ed-fi-qa.postman.co/workspace/EdFi---Team-B~293ad61d-bbcc-4e76-ae72-b7f19e7986a0/collection/27778522-ed67a38f-3afa-4935-ac37-08a792768b34?action=share&source=collection_link&creator=27778522"
	},
	"item": [
		{
			"name": "SIS",
			"item": [
				{
					"name": "01-EducationOrganization Copy",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "Scenario 1 POST - Get School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s1SchoolId\", latestSchool.id);\r",
													"        console.log('s1SchoolId', pm.environment.get(\"s1SchoolId\"));\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: streetNumberName value for the school is '456 Oaks Street'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"456 Oaks Street\"));\r",
													"    pm.expect(streetNumberNameValue, `'456 Oaks Street' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks High School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks High School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 1 POST: schoolId value for the school is '255901333'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901333' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901333);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 1 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOHS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOHS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s1SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s1SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
													"});\r",
													"\r",
													"let courseSystemValue = pm.environment.get(\"courseSystemValue\");\r",
													"let statementCourseCode = \"\";\r",
													"\r",
													"if (courseSystemValue === \"\" || courseSystemValue === null) {\r",
													"    statementCourseCode = \"ALG 01\";\r",
													"} else {\r",
													"    statementCourseCode = courseSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
													"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: identificationCode value for the course is '03100500'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
													"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra I'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Algebra I' was not found in any courseTitle. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra I\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
													"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s1CourseID\", latestCourse.id);\r",
													"        console.log('s1CourseID', pm.environment.get(\"s1CourseID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s1CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s1CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Program request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value for the program is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"let programSystemValue = pm.environment.get(\"programSystemValue\");\r",
													"let statementProgramID = \"\";\r",
													"\r",
													"if (programSystemValue === \"\" || programSystemValue === null) {\r",
													"    statementProgramID = \"101\";\r",
													"} else {\r",
													"    statementProgramID = programSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: programId value for the program is \" + statementProgramID , () =>{\r",
													"    pm.expect(response.programId).to.eql(statementProgramID, `'${statementProgramID}' was not found in the programId property. Retrieved value is '${response.programId}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: programName value for the program is 'Grand Bend Bilingual 101'\", () =>{\r",
													"    pm.expect(response.programName, `'Grand Bend Bilingual 101' was not found in any programName property. Retrieved value is '${response.programName}'`).to.eql(\"Grand Bend Bilingual 101\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value for the program is 'Bilingual'\", () =>{\r",
													"    pm.expect(response.programTypeDescriptor, `'Bilingual' was not found in any programTypeDescriptor property. Retrieved value is '${response.programTypeDescriptor}'`).to.contain(\"Bilingual\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Programs and getting the ID of the program\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/programs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestProgram = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestProgramDate = latestProgram ? latestProgram._lastModifiedDate : null;\r",
													"        console.log('latestProgramDate', latestProgramDate);\r",
													"\r",
													"        pm.environment.set(\"s1ProgramID\", latestProgram.id);\r",
													"        console.log('s1ProgramID', pm.environment.get(\"s1ProgramID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/programs/{{s1ProgramID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"programs",
												"{{s1ProgramID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the class period is '255901107'\", () =>{\r",
													"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s1ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s1ClassPeriodId', pm.environment.get(\"s1ClassPeriodId\"));\r",
													"    }\r",
													"});\r",
													"\r",
													"// // Making the GET request to Class Periods and getting the ID of the Class Period\r",
													"// pm.sendRequest({\r",
													"//     url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"//     method: 'GET',\r",
													"//     header: {\r",
													"//         'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"//         'Accept': '*/*'\r",
													"//     }\r",
													"// }, function (err, res) {\r",
													"//     if (err) {\r",
													"//         console.log('Error in the Authentication Process:', err);\r",
													"//     } else {\r",
													"//         const _ = require('lodash');\r",
													"\r",
													"//         var jsonData = res.json();\r",
													"\r",
													"//         classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
													"\r",
													"//         let filteredClassPeriods = _.filter(jsonData, (x) => x.classPeriodName === 'Class Period 1' || x.classPeriodName === classPeriodSystemValue);\r",
													"\r",
													"//         let latestClassPeriod = _.maxBy(filteredClassPeriods, (x) => new Date(x._lastModifiedDate));\r",
													"//         console.log('latestClassPeriod', latestClassPeriod);\r",
													"\r",
													"//         pm.expect(latestClassPeriod).to.not.be.undefined;\r",
													"\r",
													"//         let classPeriodName = latestClassPeriod ? latestClassPeriod.classPeriodName : null;\r",
													"\r",
													"//         pm.expect(classPeriodName).to.satisfy((code) =>\r",
													"//             code === 'Class Period 1' || code === classPeriodSystemValue\r",
													"//         );\r",
													"\r",
													"//         if (latestClassPeriod) {\r",
													"//             pm.environment.set(\"s1ClassPeriodName\", latestClassPeriod.id);\r",
													"//             pm.environment.set(\"evClassPeriodName\", latestClassPeriod.classPeriodName);\r",
													"//         }\r",
													"//     }\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s1ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s1ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Location",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s1Location\", latestLocation.id);\r",
													"        console.log('s1Location', pm.environment.get(\"s1Location\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
													"    statementclassroomIdentificationCode = \"501\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the location is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s1Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s1Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "Scenario 2 POST - Get School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s2SchoolId\", latestSchool.id);\r",
													"        console.log('s2SchoolId', pm.environment.get(\"s2SchoolId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
													"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 2 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 2 POST: schoolId value for the school is '255901444'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 2 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s2SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s2SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
													"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
													"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s2CourseCode\", latestCourse.id);\r",
													"        console.log('s2CourseCode', pm.environment.get(\"s2CourseCode\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s2CourseCode}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s2CourseCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValueS2\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the class period is '255901001'\", () =>{\r",
													"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});\r",
													"\r",
													"let meetingTimesArray = response.meetingTimes;\r",
													"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: startTime value for the class period is '08:15:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.startTime).to.eql(\"08:15:00\", `'08:15:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s2ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s2ClassPeriodId', pm.environment.get(\"s2ClassPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s2ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s2ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"\r",
													"let locationSystemValueS2 = pm.environment.get(\"locationSystemValueS2\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS2 === \"\" || locationSystemValueS2 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the location is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s2Location\", latestLocation.id);\r",
													"        console.log('s2Location', pm.environment.get(\"s2Location\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s2Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s2Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 3",
							"item": [
								{
									"name": "Scenario 3 PUT - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 POST: streetNumberName value for the school is '456 Cedar Street'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"456 Cedar Street\"));\r",
													"    pm.expect(streetNumberNameValue, `'456 Cedar Street' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 3 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 3 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 3 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 3 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks High School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks High School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 3 POST: schoolId value for the school is '255901333'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901333' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901333);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 3 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOHS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOHS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s3SchoolId\", latestSchool.id);\r",
													"        console.log('s3SchoolId', pm.environment.get(\"s3SchoolId\"));\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s3SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s3SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
													"});\r",
													"\r",
													"let courseSystemValueS3 = pm.environment.get(\"courseSystemValueS3\");\r",
													"let statementCourseCode = \"\";\r",
													"\r",
													"if (courseSystemValueS3 === \"\" || courseSystemValueS3 === null) {\r",
													"    statementCourseCode = \"ALG 01\";\r",
													"} else {\r",
													"    statementCourseCode = courseSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
													"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 POST: identificationCode value for the course is '03100500'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
													"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 3 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra II'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Algebra II' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra II\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
													"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s3CourseID\", latestCourse.id);\r",
													"        console.log('s3CourseID', pm.environment.get(\"s3CourseID\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s3CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s3CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS3 = pm.environment.get(\"classPeriodSystemValueS3\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS3 === \"\" || classPeriodSystemValueS3 === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: schoolId value for the class period is '255901107'\", () =>{\r",
													"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s3ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s3ClassPeriodId', pm.environment.get(\"s3ClassPeriodId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s3ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s3ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
													"    statementclassroomIdentificationCode = \"Class Period 1\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: schoolId value for the location is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: maximumNumberOfSeats value for the course is '20'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'20' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(20);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s3Location\", latestLocation.id);\r",
													"        console.log('s3Location', pm.environment.get(\"s3Location\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s3Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s3Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 4",
							"item": [
								{
									"name": "Scenario 4 PUT - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: postalCode value for the school is '73335'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73335\"));\r",
													"    pm.expect(postalCodeValue, `'73335' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
													"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 4 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 4 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 4 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 4 POST: schoolId value for the school is '255901444'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 4 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s4SchoolId\", latestSchool.id);\r",
													"        console.log('s4SchoolId', pm.environment.get(\"s4SchoolId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s4SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s4SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
													"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
													"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 4 POST: courseLevelCharacteristicDescriptor value for the course is 'Basic'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Basic\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Basic' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 4 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s4CourseID\", latestCourse.id);\r",
													"        console.log('s4CourseID', pm.environment.get(\"s4CourseID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s4CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s4CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT- Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS4 = pm.environment.get(\"classPeriodSystemValueS4\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS4 === \"\" || classPeriodSystemValueS4 === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: schoolId value for the class period is '255901001'\", () =>{\r",
													"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});\r",
													"\r",
													"let meetingTimesArray = response.meetingTimes;\r",
													"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: startTime value for the class period is '08:35:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.startTime).to.eql(\"08:35:00\", `'08:35:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s4ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s4ClassPeriodId', pm.environment.get(\"s4ClassPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s4ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s4ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValueS4 = pm.environment.get(\"locationSystemValueS4\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS4 === \"\" || locationSystemValueS4 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: schoolId value for the location is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: maximumNumberOfSeats value for the location is '18'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'18' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(18);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s4Location\", latestLocation.id);\r",
													"        console.log('s4Location', pm.environment.get(\"s4Location\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s4Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s4Location}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Assessment",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
					"    if (!err && res) {\r",
					"        eval(res.text());\r",
					"    }\r",
					"});\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${pm.environment.get('baseUrl')}/oauth/token`,\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/x-www-form-urlencoded' \r",
					"    },\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            { key: 'grant_type', value: 'client_credentials' },\r",
					"            { key: 'client_id', value: pm.environment.get('edFiClientId') },\r",
					"            { key: 'client_secret', value: pm.environment.get('edFiClientSecret')}\r",
					"        ]\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log('Error when generating the token:', err); \r",
					"    } else {\r",
					"        accessToken = res.json().access_token;\r",
					"        pm.environment.set('certToken',accessToken);\r",
					"        console.log(\"Access token is: \", accessToken);\r",
					"    }\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}