{
	"info": {
		"_postman_id": "ed67a38f-3afa-4935-ac37-08a792768b34",
		"name": "Certification Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27778522",
		"_collection_link": "https://gap-ed-fi-qa.postman.co/workspace/EdFi---Team-B~293ad61d-bbcc-4e76-ae72-b7f19e7986a0/collection/27778522-ed67a38f-3afa-4935-ac37-08a792768b34?action=share&source=collection_link&creator=27778522"
	},
	"item": [
		{
			"name": "SIS",
			"item": [
				{
					"name": "01-EducationOrganization",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "Scenario 1 POST - Get School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Schools and getting the latest school ID\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s1SchoolId\", latestSchool.id);\r",
													"        console.log('s1SchoolId', pm.environment.get(\"s1SchoolId\"));\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: streetNumberName value for the school is '456 Oaks Street'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"456 Oaks Street\"));\r",
													"    pm.expect(streetNumberNameValue, `'456 Oaks Street' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks High School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks High School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 1 POST: schoolId value for the school is '255901333'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901333' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901333);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 1 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOHS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOHS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s1SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s1SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Course request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
													"});\r",
													"\r",
													"let courseSystemValue = pm.environment.get(\"courseSystemValue\");\r",
													"let statementCourseCode = \"\";\r",
													"\r",
													"if (courseSystemValue === \"\" || courseSystemValue === null) {\r",
													"    statementCourseCode = \"ALG 01\";\r",
													"} else {\r",
													"    statementCourseCode = courseSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
													"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: identificationCode value for the course is '03100500'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
													"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra I'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Algebra I' was not found in any courseTitle. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra I\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
													"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Courses and getting the latest course ID\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s1CourseID\", latestCourse.id);\r",
													"        console.log('s1CourseID', pm.environment.get(\"s1CourseID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s1CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s1CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Program",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Program request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value for the program is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"let programSystemValue = pm.environment.get(\"programSystemValue\");\r",
													"let statementProgramID = \"\";\r",
													"\r",
													"if (programSystemValue === \"\" || programSystemValue === null) {\r",
													"    statementProgramID = \"101\";\r",
													"} else {\r",
													"    statementProgramID = programSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: programId value for the program is \" + statementProgramID , () =>{\r",
													"    pm.expect(response.programId).to.eql(statementProgramID, `'${statementProgramID}' was not found in the programId property. Retrieved value is '${response.programId}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: programName value for the program is 'Grand Bend Bilingual 101'\", () =>{\r",
													"    pm.expect(response.programName, `'Grand Bend Bilingual 101' was not found in any programName property. Retrieved value is '${response.programName}'`).to.eql(\"Grand Bend Bilingual 101\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value for the program is 'Bilingual'\", () =>{\r",
													"    pm.expect(response.programTypeDescriptor, `'Bilingual' was not found in any programTypeDescriptor property. Retrieved value is '${response.programTypeDescriptor}'`).to.contain(\"Bilingual\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Programs and getting the latest program ID\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/programs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestProgram = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestProgramDate = latestProgram ? latestProgram._lastModifiedDate : null;\r",
													"        console.log('latestProgramDate', latestProgramDate);\r",
													"\r",
													"        pm.environment.set(\"s1ProgramID\", latestProgram.id);\r",
													"        console.log('s1ProgramID', pm.environment.get(\"s1ProgramID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/programs/{{s1ProgramID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"programs",
												"{{s1ProgramID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Class Period",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Class Periods and getting the latest class period ID\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s1ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s1ClassPeriodId', pm.environment.get(\"s1ClassPeriodId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the class period is '255901107'\", () =>{\r",
													"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s1ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s1ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Location",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s1Location\", latestLocation.id);\r",
													"        console.log('s1Location', pm.environment.get(\"s1Location\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
													"    statementclassroomIdentificationCode = \"501\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the location is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s1Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s1Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "Scenario 2 POST - Get School",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s2SchoolId\", latestSchool.id);\r",
													"        console.log('s2SchoolId', pm.environment.get(\"s2SchoolId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
													"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 2 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 2 POST: schoolId value for the school is '255901444'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 2 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s2SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s2SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
													"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
													"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s2CourseCode\", latestCourse.id);\r",
													"        console.log('s2CourseCode', pm.environment.get(\"s2CourseCode\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s2CourseCode}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s2CourseCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValueS2\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the class period is '255901001'\", () =>{\r",
													"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});\r",
													"\r",
													"let meetingTimesArray = response.meetingTimes;\r",
													"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: startTime value for the class period is '08:15:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.startTime).to.eql(\"08:15:00\", `'08:15:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s2ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s2ClassPeriodId', pm.environment.get(\"s2ClassPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s2ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s2ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"\r",
													"let locationSystemValueS2 = pm.environment.get(\"locationSystemValueS2\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS2 === \"\" || locationSystemValueS2 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the location is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s2Location\", latestLocation.id);\r",
													"        console.log('s2Location', pm.environment.get(\"s2Location\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s2Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s2Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 3",
							"item": [
								{
									"name": "Scenario 3 PUT - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: postalCode value for the school is '73334'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
													"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 POST: streetNumberName value for the school is '456 Cedar Street'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"456 Cedar Street\"));\r",
													"    pm.expect(streetNumberNameValue, `'456 Cedar Street' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 3 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 3 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 3 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 3 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks High School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks High School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 3 POST: schoolId value for the school is '255901333'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901333' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901333);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 3 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOHS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOHS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s3SchoolId\", latestSchool.id);\r",
													"        console.log('s3SchoolId', pm.environment.get(\"s3SchoolId\"));\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s3SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s3SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
													"});\r",
													"\r",
													"let courseSystemValueS3 = pm.environment.get(\"courseSystemValueS3\");\r",
													"let statementCourseCode = \"\";\r",
													"\r",
													"if (courseSystemValueS3 === \"\" || courseSystemValueS3 === null) {\r",
													"    statementCourseCode = \"ALG 01\";\r",
													"} else {\r",
													"    statementCourseCode = courseSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
													"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 POST: identificationCode value for the course is '03100500'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
													"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 3 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra II'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Algebra II' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra II\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
													"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s3CourseID\", latestCourse.id);\r",
													"        console.log('s3CourseID', pm.environment.get(\"s3CourseID\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s3CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s3CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS3 = pm.environment.get(\"classPeriodSystemValueS3\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS3 === \"\" || classPeriodSystemValueS3 === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: schoolId value for the class period is '255901107'\", () =>{\r",
													"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s3ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s3ClassPeriodId', pm.environment.get(\"s3ClassPeriodId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s3ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s3ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
													"    statementclassroomIdentificationCode = \"Class Period 1\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: schoolId value for the location is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: maximumNumberOfSeats value for the course is '20'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'20' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(20);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s3Location\", latestLocation.id);\r",
													"        console.log('s3Location', pm.environment.get(\"s3Location\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s3Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s3Location}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 4",
							"item": [
								{
									"name": "Scenario 4 PUT - Get School",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.expect(response.addresses).to.be.an('array');\r",
													"let addressesArray = response.addresses;\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
													"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
													"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: city value for the school is 'Grand Oaks'\", () => {\r",
													"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
													"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: postalCode value for the school is '73335'\", () => {\r",
													"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73335\"));\r",
													"    pm.expect(postalCodeValue, `'73335' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
													"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
													"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
													"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
													"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
													"});\r",
													"\r",
													"let certEducationOrganizationCategories = [\r",
													"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
													"];\r",
													"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
													"\r",
													"pm.test(\"07 - Scenario 4 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
													"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
													"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
													"    });\r",
													"\r",
													"let certGradeLevels = [\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
													"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"08 - Scenario 4 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
													"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 4 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
													"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 4 POST: schoolId value for the school is '255901444'\", () =>{\r",
													"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 4 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
													"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Schools and getting the ID of the School\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
													"        console.log('latestSchoolDate', latestSchoolDate);\r",
													"\r",
													"        pm.environment.set(\"s4SchoolId\", latestSchool.id);\r",
													"        console.log('s4SchoolId', pm.environment.get(\"s4SchoolId\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s4SchoolId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"schools",
												"{{s4SchoolId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
													"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
													"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
													"});\r",
													"\r",
													"pm.expect(response.identificationCodes).to.be.an('array');\r",
													"let identificationCodesArray = response.identificationCodes;\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
													"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
													"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
													"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
													"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
													"let levelCharacteristicsArray = response.levelCharacteristics;\r",
													"\r",
													"pm.test(\"06 - Scenario 4 POST: courseLevelCharacteristicDescriptor value for the course is 'Basic'\", () =>{\r",
													"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Basic\"));\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Basic' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
													"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 4 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
													"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 POST: numberOfParts value for the course is '1'\", () =>{\r",
													"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Courses and getting the ID of the Course\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
													"        console.log('latestCourseDate', latestCourseDate);\r",
													"\r",
													"        pm.environment.set(\"s4CourseID\", latestCourse.id);\r",
													"        console.log('s4CourseID', pm.environment.get(\"s4CourseID\"));\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s4CourseID}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courses",
												"{{s4CourseID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT- Get Class Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that Class Period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS4 = pm.environment.get(\"classPeriodSystemValueS4\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS4 === \"\" || classPeriodSystemValueS4 === null) {\r",
													"    statementClassPeriodName = \"Class Period 1\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
													"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: schoolId value for the class period is '255901001'\", () =>{\r",
													"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
													"});\r",
													"\r",
													"let meetingTimesArray = response.meetingTimes;\r",
													"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: startTime value for the class period is '08:35:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.startTime).to.eql(\"08:35:00\", `'08:35:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
													"    meetingTimesArray.forEach((meeting) => {\r",
													"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Class Periods and getting the ID of the class period\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
													"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s4ClassPeriodId\", latestClassPeriod.id);\r",
													"        console.log('s4ClassPeriodId', pm.environment.get(\"s4ClassPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s4ClassPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"classPeriods",
												"{{s4ClassPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 POST - Get Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that Location request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let locationSystemValueS4 = pm.environment.get(\"locationSystemValueS4\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS4 === \"\" || locationSystemValueS4 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: schoolId value for the location is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: maximumNumberOfSeats value for the location is '18'\", () =>{\r",
													"    pm.expect(response.maximumNumberOfSeats, `'18' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(18);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Locations and getting the ID of the location\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
													"        console.log('latestLocationDate', latestLocationDate);\r",
													"\r",
													"        pm.environment.set(\"s4Location\", latestLocation.id);\r",
													"        console.log('s4Location', pm.environment.get(\"s4Location\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s4Location}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"locations",
												"{{s4Location}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "02-EducationOrganizationCalendar.sql",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "Scenario 1 POST - Get Calendar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Calendars and getting the ID of the calendar\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDate', latestCalendarDate);\r",
													"\r",
													"        pm.environment.set(\"s1CalendarId\", latestCalendar.id);\r",
													"        console.log('s1CalendarId', pm.environment.get(\"s1CalendarId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Calendar request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: calendarCode value for the calendar is '107SS111111'\", () => {\r",
													"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the calendar is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: schoolYear value for the calendar is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
													"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s1CalendarId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendars",
												"{{s1CalendarId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Calendar Date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Calendar Dated and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
													"\r",
													"        pm.environment.set(\"s1CalendarDateId\", latestCalendarDate.id);\r",
													"        console.log('s1CalendarDateId', pm.environment.get(\"s1CalendarDateId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Calendar dates request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let dateString = response.date;\r",
													"console.log(\"dateString\", dateString);\r",
													"\r",
													"let date = new Date(dateString);\r",
													"console.log(\"date\", date);\r",
													"\r",
													"let yearFromDate = date.getFullYear();\r",
													"let monthFromDate = date.getMonth() + 1;\r",
													"let dayFromDate = date.getDate();\r",
													"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"let currentDateTest = `${currentYear}-09-16`;\r",
													"\r",
													"let formattedDate = date.toISOString().split('T')[0];\r",
													"console.log(\"formattedDate\", formattedDate);\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: year of date value for the calendar dates is 9/16/\" + currentYear, () => {\r",
													"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: calendarCode value for the calendar dates is '107SS111111'\", () => {\r",
													"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: schoolId value for the calendar dates is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: schoolYear value for the calendar dates is \" + currentYear, () => {\r",
													"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let certCalendarEvents = [\r",
													"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
													"];\r",
													"let calendarEventDescriptorArray = response.calendarEvents;\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: calendarEventDescriptor value for the calendar dates is 'Holiday'\", () => {\r",
													"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
													"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s1CalendarDateId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendarDates",
												"{{s1CalendarDateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-10-04`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: endDate value for the grading period is \" + currentYear + \"-10-04\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-10-04' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-04`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValue\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 29;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: periodSequence value for the grading period is '1'\", () => {\r",
													"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s1GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s1GradingPeriodId', pm.environment.get(\"s1GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s1GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s1GradingPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Session request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: schoolId value for the session is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolYear value for the session is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
													"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-15`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: endDate value for the session is \" + currentYear + \"-12-15\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValue\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 88;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.gradingPeriods).to.be.an('array');\r",
													"\r",
													"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
													"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: 'First Six Weeks' as a grading period exists\", () => {\r",
													"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
													"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: 'Second Six Weeks' as a grading period exists\", () => {\r",
													"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
													"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Sessions and getting the ID of the latest session\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
													"        console.log('latestSessionDate', latestSessionDate);\r",
													"\r",
													"        pm.environment.set(\"s1SessionId\", latestSession.id);\r",
													"        console.log('s1SessionId', pm.environment.get(\"s1SessionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s1SessionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sessions",
												"{{s1SessionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "Scenario 2 POST - Get Calendar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Calendar request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: calendarCode value for the calendar is 'IEP001'\", () => {\r",
													"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the calendar is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: schoolYear value for the calendar is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
													"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
													"});\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: gradeLevelDescriptor value for the school contains 'Ninth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' was not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Calendars and getting the ID of the calendar\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDate', latestCalendarDate);\r",
													"\r",
													"        pm.environment.set(\"s2CalendarId\", latestCalendar.id);\r",
													"        console.log('s2CalendarId', pm.environment.get(\"s2CalendarId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s2CalendarId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendars",
												"{{s2CalendarId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Calendar Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Calendar dates request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let dateString = response.date;\r",
													"console.log(\"dateString\", dateString);\r",
													"\r",
													"let date = new Date(dateString);\r",
													"console.log(\"date\", date);\r",
													"\r",
													"let yearFromDate = date.getFullYear();\r",
													"let monthFromDate = date.getMonth() + 1;\r",
													"let dayFromDate = date.getDate();\r",
													"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"let currentDateTest = `${currentYear}-09-16`;\r",
													"\r",
													"let formattedDate = date.toISOString().split('T')[0];\r",
													"console.log(\"formattedDate\", formattedDate);\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: year of date value for the calendar dates is \" + currentYear + \"-09-16\", () => {\r",
													"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: calendarCode value for the calendar dates is 'IEP001'\", () => {\r",
													"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: schoolId value for the calendar dates is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: schoolYear value for the calendar dates is \" + currentYear, () => {\r",
													"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let certCalendarEvents = [\r",
													"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
													"];\r",
													"let calendarEventDescriptorArray = response.calendarEvents;\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: calendarEventDescriptor value for the calendar date is 'Holiday'\", () => {\r",
													"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
													"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
													"\r",
													"        pm.environment.set(\"s2CalendarDateId\", latestCalendarDate.id);\r",
													"        console.log('s2CalendarDateId', pm.environment.get(\"s2CalendarDateId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s2CalendarDateId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendarDates",
												"{{s2CalendarDateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-10-06`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: beginDate value for the grading period is \" + currentYear + \"-10-06\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-10-06' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-10-06`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: gradingPeriodDescriptor value for the grading period is 'Second Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'Second Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"Second Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-15`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: endDate value for the grading period is \" + currentYear + \"-12-15\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS2\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 30;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: periodSequence value for the grading period is '2'\", () => {\r",
													"    pm.expect(response.periodSequence, `'2' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s2GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s2GradingPeriodId', pm.environment.get(\"s2GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s2GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s2GradingPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Session request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: schoolId value for the session is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolYear value for the session is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
													"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-15`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: endDate value for the session is \" + currentYear + \"-12-15\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValueS2\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 88;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.gradingPeriods).to.be.an('array');\r",
													"\r",
													"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
													"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: 'First Six Weeks' as a grading period exists\", () => {\r",
													"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
													"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 2 POST: 'Second Six Weeks' as a grading period exists\", () => {\r",
													"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
													"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Sessions and getting the ID of the latest session\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
													"        console.log('latestSessionDate', latestSessionDate);\r",
													"\r",
													"        pm.environment.set(\"s2SessionId\", latestSession.id);\r",
													"        console.log('s2SessionId', pm.environment.get(\"s2SessionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s2SessionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sessions",
												"{{s2SessionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 3",
							"item": [
								{
									"name": "Scenario 3 POST - Get Calendar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Calendars and getting the ID of the calendar\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDate', latestCalendarDate);\r",
													"\r",
													"        pm.environment.set(\"s3CalendarId\", latestCalendar.id);\r",
													"        console.log('s3CalendarId', pm.environment.get(\"s3CalendarId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Calendar request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: calendarCode value for the calendar is '107SS111111'\", () => {\r",
													"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolId value for the calendar is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: schoolYear value for the calendar is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: calendarTypeDescriptor value for the calendar is 'Student Specific'\", () => {\r",
													"    pm.expect(response.calendarTypeDescriptor, `'Student Specific' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"Student Specific\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s3CalendarId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendars",
												"{{s3CalendarId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Calendar Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Calendar dates request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let dateString = response.date;\r",
													"console.log(\"dateString\", dateString);\r",
													"\r",
													"let date = new Date(dateString);\r",
													"console.log(\"date\", date);\r",
													"\r",
													"let yearFromDate = date.getFullYear();\r",
													"let monthFromDate = date.getMonth() + 1;\r",
													"let dayFromDate = date.getDate();\r",
													"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"let currentDateTest = `${currentYear}-09-16`;\r",
													"\r",
													"let formattedDate = date.toISOString().split('T')[0];\r",
													"console.log(\"formattedDate\", formattedDate);\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: year of date value for the calendar dates is 9/16/\" + currentYear, () => {\r",
													"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 PUT: calendarCode value for the calendar is '107SS111111'\", () => {\r",
													"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: schoolId value for the calendar is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: schoolYear value for the calendar date is \" + currentYear, () => {\r",
													"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let certCalendarEvents = [\r",
													"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Instructional day\" },\r",
													"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Student late arrival/early dismissal\" }\r",
													"];\r",
													"let calendarEventDescriptorArray = response.calendarEvents;\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: calendarEventDescriptor values for the calendar date are 'Instructional day', and 'Student late arrival/early dismissal'\", () => {\r",
													"    let calendarEventDescriptors = calendarEventDescriptorArray.map(item => item.calendarEventDescriptor);\r",
													"    certCalendarEvents.forEach(expected => {\r",
													"        let calendarEventFound = calendarEventDescriptors.includes(expected.calendarEventDescriptor);\r",
													"        pm.expect(calendarEventFound, `'${expected.calendarEventDescriptor}' were not completely found. These are the values found: ${JSON.stringify(calendarEventDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
													"\r",
													"        pm.environment.set(\"s3CalendarDateId\", latestCalendarDate.id);\r",
													"        console.log('s3CalendarDateId', pm.environment.get(\"s3CalendarDateId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s1CalendarDateId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendarDates",
												"{{s1CalendarDateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 POST - Get Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 POST: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 3 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 3 POST: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 POST: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-10-04`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 3 POST: endDate value for the grading period is \" + currentYear + \"-10-04\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-10-04' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-04`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS3\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 29;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 3 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 3 POST: periodSequence value for the grading period is '1'\", () => {\r",
													"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s3GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s3GradingPeriodId', pm.environment.get(\"s3GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s3GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s3GradingPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 POST - Get Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Session request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: schoolId value for the session is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolYear value for the session is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
													"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-16`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"07 - Scenario 3 PUT: endDate value for the session is \" + currentYear + \"-12-16\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-16' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValue\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 89;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"08 - Scenario 3 PUT: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.gradingPeriods).to.be.an('array');\r",
													"\r",
													"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
													"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
													"\r",
													"pm.test(\"09 - Scenario 3 PUT: 'First Six Weeks' as a grading period exists\", () => {\r",
													"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
													"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 3 PUT: 'Second Six Weeks' as a grading period exists\", () => {\r",
													"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
													"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Sessions and getting the ID of the latest session\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
													"        console.log('latestSessionDate', latestSessionDate);\r",
													"\r",
													"        pm.environment.set(\"s3SessionId\", latestSession.id);\r",
													"        console.log('s3SessionId', pm.environment.get(\"s3SessionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s3SessionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sessions",
												"{{s3SessionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 4",
							"item": [
								{
									"name": "Scenario 4 POST - Get Calendar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Calendar request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: calendarCode value for the calendar is 'IEP001'\", () => {\r",
													"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolId value for the calendar is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: schoolYear value for the calendar is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
													"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
													"});\r",
													"\r",
													"let certGradeLevels = [\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
													"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" }\r",
													"];\r",
													"let gradeLevelDescriptorArray = response.gradeLevels;\r",
													"\r",
													"pm.test(\"06 - Scenario 4 puT: gradeLevelDescriptor value for the school contains 'Ninth grade'\", () =>{\r",
													"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
													"    certGradeLevels.forEach(expected => {\r",
													"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
													"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Calendars and getting the ID of the calendar\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDate', latestCalendarDate);\r",
													"\r",
													"        pm.environment.set(\"s4CalendarId\", latestCalendar.id);\r",
													"        console.log('s4CalendarId', pm.environment.get(\"s4CalendarId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s4CalendarId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendars",
												"{{s4CalendarId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Calendar Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Calendar datesrequest has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let dateString = response.date;\r",
													"console.log(\"dateString\", dateString);\r",
													"\r",
													"let date = new Date(dateString);\r",
													"console.log(\"date\", date);\r",
													"\r",
													"let yearFromDate = date.getFullYear();\r",
													"let monthFromDate = date.getMonth() + 1;\r",
													"let dayFromDate = date.getDate();\r",
													"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"let currentDateTest = `${currentYear}-09-16`;\r",
													"\r",
													"let formattedDate = date.toISOString().split('T')[0];\r",
													"console.log(\"formattedDate\", formattedDate);\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: year of date value for the calendar dates is \" + currentYear + \"-09-16\", () => {\r",
													"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: calendarCode value for the calendar is 'IEP001'\", () => {\r",
													"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: schoolId value for the calendar is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: schoolYear value for the calendar date is \" + currentYear, () => {\r",
													"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let certCalendarEventDescriptor= [\r",
													"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
													"];\r",
													"let calendarEventDescriptorArray = response.calendarEvents;\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: calendarEventDescriptor value for the calendar date is 'Instructional Day'\", () => {\r",
													"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
													"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
													"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
													"\r",
													"        pm.environment.set(\"s4CalendarDateId\", latestCalendarDate.id);\r",
													"        console.log('s4CalendarDateId', pm.environment.get(\"s4CalendarDateId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s4CalendarDateId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"calendarDates",
												"{{s4CalendarDateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 POST - Get Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 POST: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 POST: schoolId value for the grading period dates is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 4 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-10-06`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 4 POST: beginDate value for the grading period is \" + currentYear + \"-10-06\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-10-06' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-10-06`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 POST: gradingPeriodDescriptor value for the grading period is 'Second Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'Second Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"Second Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-15`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 4 POST: endDate value for the grading period is \" + currentYear + \"-12-15\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS4\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 30;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 4 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 POST: periodSequence value for the grading period is '2'\", () => {\r",
													"    pm.expect(response.periodSequence, `'2' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s4GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s4GradingPeriodId', pm.environment.get(\"s4GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s4GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s4GradingPeriodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 POST - Get Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Session request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: schoolId value for the session is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolYear value for the session is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
													"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-12-16`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"07 - Scenario 4 PUT: endDate value for the session is \" + currentYear + \"-12-16\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-12-16' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValueS2\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 89;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"08 - Scenario 4 PUT: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.expect(response.gradingPeriods).to.be.an('array');\r",
													"\r",
													"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
													"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
													"\r",
													"pm.test(\"09 - Scenario 4 PUT: 'First Six Weeks' as a grading period exists\", () => {\r",
													"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
													"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 4 PUT: 'Second Six Weeks' as a grading period exists\", () => {\r",
													"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
													"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
													"\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
													"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Sessions and getting the ID of the latest session\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
													"        console.log('latestSessionDate', latestSessionDate);\r",
													"\r",
													"        pm.environment.set(\"s4SessionId\", latestSession.id);\r",
													"        console.log('s4SessionId', pm.environment.get(\"s4SessionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s4SessionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sessions",
												"{{s4SessionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 5",
							"item": [
								{
									"name": "Scenario 5 PUT - Get Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 5 PUT: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 5 PUT: schoolId value for the grading period dates is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 5 PUT: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 5 PUT: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 5 PUT: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-10-05`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 5 PUT: endDate value for the grading period is \" + currentYear + \"-10-05\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-10-05' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-05`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS1\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 30;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 5 PUT: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 5 PUT: periodSequence value for the grading period is '1'\", () => {\r",
													"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s5GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s5GradingPeriodId', pm.environment.get(\"s5GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s5GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s5GradingPeriodId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 6",
							"item": [
								{
									"name": "Scenario 6 PUT - Get Grading Period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 6 PUT: Test that Grading period request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 6 PUT: schoolId value for the grading period dates is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
													"});\r",
													"\r",
													"let currentYear = new Date().getFullYear();\r",
													"console.log(\"currentYear\", currentYear);\r",
													"\r",
													"pm.test(\"03 - Scenario 6 PUT: schoolYear value for the grading period is \" + currentYear, () => {\r",
													"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
													"});\r",
													"\r",
													"let beginDateString = response.beginDate;\r",
													"console.log(\"beginDateString\", beginDateString);\r",
													"\r",
													"let testBeginDate = new Date(beginDateString);\r",
													"console.log(\"testBeginDate\", testBeginDate);\r",
													"\r",
													"let yearFromBeginDate = testBeginDate.getFullYear();\r",
													"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
													"let dayFromBeginDate = testBeginDate.getDate();\r",
													"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
													"\r",
													"let currentTestBeginDate = `${currentYear}-08-23`;\r",
													"\r",
													"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
													"\r",
													"pm.test(\"04 - Scenario 6 PUT: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
													"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 6 PUT: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
													"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
													"});\r",
													"\r",
													"let endDateString = response.endDate;\r",
													"console.log(\"endDateString\", endDateString);\r",
													"\r",
													"let testEndDate = new Date(endDateString);\r",
													"console.log(\"testEndDate\", testEndDate);\r",
													"\r",
													"let yearFromEndDate = testEndDate.getFullYear();\r",
													"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
													"let dayFromEndDate = testEndDate.getDate();\r",
													"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
													"\r",
													"let currentTestEndDate = `${currentYear}-10-05`;\r",
													"\r",
													"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
													"console.log(\"formattedEndDate\", formattedEndDate);\r",
													"\r",
													"pm.test(\"06 - Scenario 6 PUT: endDate value for the grading period is \" + currentYear + \"-10-05\", () => {\r",
													"    pm.expect(formattedEndDate, `'${currentYear}-10-05' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-05`);\r",
													"});\r",
													"\r",
													"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS3\");\r",
													"let statementTotalInstructionalDays = 0;\r",
													"\r",
													"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
													"    statementTotalInstructionalDays = 30;\r",
													"} else {\r",
													"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
													"}\r",
													"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
													"\r",
													"pm.test(\"07 - Scenario 6 PUT: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
													"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 6 PUT: periodSequence value for the grading period is '1'\", () => {\r",
													"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
													"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
													"\r",
													"        pm.environment.set(\"s6GradingPeriodId\", latestGradingPeriod.id);\r",
													"        console.log('s6GradingPeriodId', pm.environment.get(\"s6GradingPeriodId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s6GradingPeriodId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"gradingPeriods",
												"{{s6GradingPeriodId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "03-MasterSchedule.sql",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "Scenario 1 POST - Get Bell Schedule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s1BellScheduleId\", latestBellSchedule.id);\r",
													"        console.log('s1BellScheduleId', pm.environment.get(\"s1BellScheduleId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Bell Schedule request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: bellScheduleName value for the bell schedule is 'Normal Schedule A'\", () => {\r",
													"    pm.expect(response.bellScheduleName, `'Normal Schedule A' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule A\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for the bell schedule is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 1'\", () => {\r",
													"    let classPeriod1 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 1\"));\r",
													"\r",
													"    console.log(\"classPeriod1\", classPeriod1);\r",
													"\r",
													"    pm.expect(classPeriod1, `'Class Period 1' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console. Retrieved value is '${classPeriod1}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 2'\", () => {\r",
													"    let classPeriod2 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 2\"));\r",
													"\r",
													"    console.log(\"classPeriod2\", classPeriod2);\r",
													"\r",
													"    pm.expect(classPeriod2, `'Class Period 2' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console. '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 3'\", () => {\r",
													"    let classPeriod3 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 3\"));\r",
													"\r",
													"    console.log(\"classPeriod3\", classPeriod3);\r",
													"\r",
													"    pm.expect(classPeriod3, `'Class Period 3' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: alternateDayName value for the bell schedule is 'A'\", () => {\r",
													"    pm.expect(response.alternateDayName, `'A' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"A\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s1BellScheduleId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"bellSchedules",
												"{{s1BellScheduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Course Offering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Course Offering request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: courseCode value for the course offering is 'ELA-01'\", () => {\r",
													"    pm.expect(response.courseReference.courseCode, `'ELA-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ELA-01\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value from course reference for the course offering  is '255901107'\", () =>{\r",
													"    pm.expect(response.courseReference.educationOrganizationId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: schoolId value from school reference for the course offering is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
													"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: schoolId value from session reference for the course offering is '255901107'\", () =>{\r",
													"    pm.expect(response.sessionReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
													"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: localCourseTitle value from session reference for the course offering is 'English Language Arts GB Elementary'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'English Language Arts GB Elementary' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"English Language Arts GB Elementary\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: localCourseCode value from session reference for the course offering is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.localCourseTitle, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(statementLocalCourseCode);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s1CourseOfferingId\", latestCourseOffering.id);\r",
													"        console.log('s1CourseOfferingId', pm.environment.get(\"s1CourseOfferingId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s1CourseOfferingId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courseOfferings",
												"{{s1CourseOfferingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Section request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValue;\r",
													"}\r",
													"\r",
													"let expectedClassPeriodName = statementClassPeriodName;\r",
													"let expectedSchoolID = 255901107;\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
													"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
													"    console.log(\"classPeriod\", classPeriod);\r",
													"\r",
													"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
													"    let foundValidPeriod = false\r",
													"\r",
													"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
													"        let classPeriodItem = classPeriodsArray[i];\r",
													"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
													"        console.log(\"schoolId\", schoolId);\r",
													"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
													"        console.log(\"classPeriodName\", classPeriodName);\r",
													"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
													"            foundValidPeriod = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
													"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: schoolId value from course offering reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
													"    statementclassroomIdentificationCode = \"501\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"08 - classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: schoolId value from location reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.locationReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: schoolId value from location school reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.locationSchoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 1 POST: sequenceOfCourse value for the section is '1'\", () =>{\r",
													"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
													"let statementSectionIdentifier = \"\";\r",
													"\r",
													"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
													"    statementSectionIdentifier = \"ELA012017RM555\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"12 - Scenario 1 POST: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
													"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"pm.test(\"13 - Scenario 1 POST: availableCredits value for the section is '1'\", () =>{\r",
													"    pm.expect(response.availableCredits, `'1' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"14 - Scenario 1 POST: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
													"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Sections and getting the ID of the section\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s1SectionId\", latestCourseOffering.id);\r",
													"        console.log('s1SectionId', pm.environment.get(\"s1SectionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s1SectionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sections",
												"{{s1SectionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "Scenario 2 POST - Get Bell Schedule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s2BellScheduleId\", latestBellSchedule.id);\r",
													"        console.log('s2BellScheduleId', pm.environment.get(\"s2BellScheduleId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Bell Schedule request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: bellScheduleName value for the bell schedule is 'Normal Schedule B'\", () => {\r",
													"    pm.expect(response.bellScheduleName, `'Normal Schedule B' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule B\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for the bell schedule is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 4'\", () => {\r",
													"    let classPeriod4 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 4\"));\r",
													"\r",
													"    console.log(\"classPeriod4\", classPeriod4);\r",
													"\r",
													"    pm.expect(classPeriod4, `'Class Period 4' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 5'\", () => {\r",
													"    let classPeriod5 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 5\"));\r",
													"\r",
													"    console.log(\"classPeriod5\", classPeriod5);\r",
													"\r",
													"    pm.expect(classPeriod5, `'Class Period 5' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 6'\", () => {\r",
													"    let classPeriod6 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 6\"));\r",
													"\r",
													"    console.log(\"classPeriod6\", classPeriod6);\r",
													"\r",
													"    pm.expect(classPeriod6, `'Class Period 6' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: alternateDayName value for the bell schedule is 'B'\", () => {\r",
													"    pm.expect(response.alternateDayName, `'B' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"B\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s2BellScheduleId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"bellSchedules",
												"{{s2BellScheduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Course Offering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Course Offering request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: courseCode value for the course offering is 'ALG-01'\", () => {\r",
													"    pm.expect(response.courseReference.courseCode, `'ALG-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ALG-01\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value from course reference for the course offering  is '255901001'\", () =>{\r",
													"    pm.expect(response.courseReference.educationOrganizationId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: schoolId value from school reference for the course offering is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
													"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: schoolId value from session reference for the course offering is '255901001'\", () =>{\r",
													"    pm.expect(response.sessionReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
													"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: localCourseTitle value from session reference for the course offering is 'Algebra 02 GBHS'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'Algebra 02 GBHS' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"Algebra 02 GBHS\");\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: localCourseCode value from session reference for the course offering is 'ALG-2'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'ALG-2' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"ALG-2\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s2CourseOfferingId\", latestCourseOffering.id);\r",
													"        console.log('s2CourseOfferingId', pm.environment.get(\"s2CourseOfferingId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s2CourseOfferingId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courseOfferings",
												"{{s2CourseOfferingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Section request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS2 = pm.environment.get(\"classPeriodSystemValueS2\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS2 === \"\" || classPeriodSystemValueS2 === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS2;\r",
													"}\r",
													"\r",
													"let expectedClassPeriodName = statementClassPeriodName;\r",
													"let expectedSchoolID = 255901001;\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
													"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
													"    console.log(\"classPeriod\", classPeriod);\r",
													"\r",
													"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
													"    let foundValidPeriod = false\r",
													"\r",
													"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
													"        let classPeriodItem = classPeriodsArray[i];\r",
													"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
													"        console.log(\"schoolId\", schoolId);\r",
													"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
													"        console.log(\"classPeriodName\", classPeriodName);\r",
													"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
													"            foundValidPeriod = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
													"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
													"    statementLocalCourseCode = \"ALG-21\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS2;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: schoolId value from course offering reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"let locationSystemValueS2 = pm.environment.get(\"locationSystemValueS2\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS2 === \"\" || locationSystemValueS2 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: schoolId value from location reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.locationReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 2 POST: schoolId value from location school reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.locationSchoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 2 POST: sequenceOfCourse value for the section is '1'\", () =>{\r",
													"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS2 = pm.environment.get(\"sectionIdentifierSystemValueS2\");\r",
													"let statementSectionIdentifier = \"\";\r",
													"\r",
													"if (sectionIdentifierSystemValueS2 === \"\" || sectionIdentifierSystemValueS2 === null) {\r",
													"    statementSectionIdentifier = \"ALG12017RM901\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"12 - Scenario 2 POST: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
													"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"pm.test(\"13 - Scenario 2 POST: availableCredits value for the section is '1'\", () =>{\r",
													"    pm.expect(response.availableCredits, `'1' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"14 - Scenario 2 POST: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
													"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Sections and getting the ID of the section\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s2SectionId\", latestCourseOffering.id);\r",
													"        console.log('s2SectionId', pm.environment.get(\"s2SectionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s2SectionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sections",
												"{{s2SectionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 3",
							"item": [
								{
									"name": "Scenario 3 POST - Get Bell Schedule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s3BellScheduleId\", latestBellSchedule.id);\r",
													"        console.log('s3BellScheduleId', pm.environment.get(\"s3BellScheduleId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Bell Schedule request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: bellScheduleName value for the bell schedule is 'Early Release A'\", () => {\r",
													"    pm.expect(response.bellScheduleName, `'Early Release A' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Early Release A\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolId value for the bell schedule is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: classPeriodName value for the bell schedule is 'Class Period 1'\", () => {\r",
													"    let classPeriod1 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 1\"));\r",
													"\r",
													"    console.log(\"classPeriod1\", classPeriod1);\r",
													"\r",
													"    pm.expect(classPeriod1, `'Class Period 1' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: classPeriodName value for the bell schedule is 'Class Period 2'\", () => {\r",
													"    let classPeriod2 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 2\"));\r",
													"\r",
													"    console.log(\"classPeriod2\", classPeriod2);\r",
													"\r",
													"    pm.expect(classPeriod2, `'Class Period 2' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: alternateDayName value for the bell schedule is 'A'\", () => {\r",
													"    pm.expect(response.alternateDayName, `'A' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"A\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s3BellScheduleId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"bellSchedules",
												"{{s3BellScheduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT- Get Course Offering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Course Offering request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: courseCode value for the course offering is 'ELA-01'\", () => {\r",
													"    pm.expect(response.courseReference.courseCode, `'ELA-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ELA-01\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolId value from course reference for the course offering  is '255901107'\", () =>{\r",
													"    pm.expect(response.courseReference.educationOrganizationId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: schoolId value from school reference for the course offering is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
													"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: schoolId value from session reference for the course offering is '255901107'\", () =>{\r",
													"    pm.expect(response.sessionReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"pm.test(\"07 - Scenario 3 PUT: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
													"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 3 PUT: localCourseTitle value from session reference for the course offering is 'English Language Arts, Grade 1'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'English Language Arts, Grade 1' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"English Language Arts, Grade 1\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"09 - Scenario 3 PUT: localCourseCode value from session reference for the course offering is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.localCourseTitle, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(statementLocalCourseCode);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s3CourseOfferingId\", latestCourseOffering.id);\r",
													"        console.log('s3CourseOfferingId', pm.environment.get(\"s3CourseOfferingId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s3CourseOfferingId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courseOfferings",
												"{{s3CourseOfferingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Section request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS3 = pm.environment.get(\"classPeriodSystemValueS3\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS3 === \"\" || classPeriodSystemValueS3 === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS2;\r",
													"}\r",
													"\r",
													"let expectedClassPeriodName = statementClassPeriodName;\r",
													"let expectedSchoolID = 255901107;\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
													"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
													"    console.log(\"classPeriod\", classPeriod);\r",
													"\r",
													"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
													"    let foundValidPeriod = false\r",
													"\r",
													"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
													"        let classPeriodItem = classPeriodsArray[i];\r",
													"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
													"        console.log(\"schoolId\", schoolId);\r",
													"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
													"        console.log(\"classPeriodName\", classPeriodName);\r",
													"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
													"            foundValidPeriod = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
													"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS3;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: schoolId value from course offering reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 3 PUT: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"let locationSystemValueS3 = pm.environment.get(\"locationSystemValueS3\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS3 === \"\" || locationSystemValueS3 === null) {\r",
													"    statementclassroomIdentificationCode = \"501\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"08 - Scenario 3 PUT:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 3 PUT: schoolId value from location reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.locationReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 3 PUT: schoolId value from location school reference for the section is '255901107'\", () =>{\r",
													"    pm.expect(response.locationSchoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 3 PUT: sequenceOfCourse value for the section is '1'\", () =>{\r",
													"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
													"let statementSectionIdentifier = \"\";\r",
													"\r",
													"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
													"    statementSectionIdentifier = \"ELA012017RM555\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"12 - Scenario 2 PUT: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
													"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"pm.test(\"13 - Scenario 3 PUT: availableCredits value for the section is '2'\", () =>{\r",
													"    pm.expect(response.availableCredits, `'2' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"14 - Scenario 3 PUT: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
													"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Sections and getting the ID of the section\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s3SectionId\", latestCourseOffering.id);\r",
													"        console.log('s3SectionId', pm.environment.get(\"s3SectionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s3SectionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sections",
												"{{s3SectionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 4",
							"item": [
								{
									"name": "Scenario 4 POST - Get Bell Schedule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s4BellScheduleId\", latestBellSchedule.id);\r",
													"        console.log('s4BellScheduleId', pm.environment.get(\"s4BellScheduleId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Bell Schedule request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: bellScheduleName value for the bell schedule is 'Normal Schedule B'\", () => {\r",
													"    pm.expect(response.bellScheduleName, `'Normal Schedule B' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule B\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolId value for the bell schedule is '255901107'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: classPeriodName value for the bell schedule is 'Class Period 4'\", () => {\r",
													"    let classPeriod4 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 4\"));\r",
													"\r",
													"    console.log(\"classPeriod4\", classPeriod4);\r",
													"\r",
													"    pm.expect(classPeriod4, `'Class Period 4' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: classPeriodName value for the bell schedule is 'Class Period 5'\", () => {\r",
													"    let classPeriod5 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 5\"));\r",
													"\r",
													"    console.log(\"classPeriod5\", classPeriod5);\r",
													"\r",
													"    pm.expect(classPeriod5, `'Class Period 5' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: alternateDayName value for the bell schedule is 'B'\", () => {\r",
													"    pm.expect(response.alternateDayName, `'B' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"B\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s4BellScheduleId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"bellSchedules",
												"{{s4BellScheduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Course Offering",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Course Offering request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: courseCode value for the course offering is 'ALG-01'\", () => {\r",
													"    pm.expect(response.courseReference.courseCode, `'ALG-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ALG-01\");\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolId value from course reference for the course offering  is '255901001'\", () =>{\r",
													"    pm.expect(response.courseReference.educationOrganizationId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: schoolId value from school reference for the course offering is '255901001'\", () =>{\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
													"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: schoolId value from session reference for the course offering is '255901001'\", () =>{\r",
													"    pm.expect(response.sessionReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"pm.test(\"07 - Scenario 4 PUT: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
													"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 PUT: localCourseTitle value from session reference for the course offering is 'Algebra II'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'Algebra II' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"Algebra II\");\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 PUT: localCourseCode value from session reference for the course offering is 'ALG-2'\", () =>{\r",
													"    pm.expect(response.localCourseTitle, `'ALG-2' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"ALG-2\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s4CourseOfferingId\", latestCourseOffering.id);\r",
													"        console.log('s4CourseOfferingId', pm.environment.get(\"s4CourseOfferingId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s4CourseOfferingId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"courseOfferings",
												"{{s4CourseOfferingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Section",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Section request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let classPeriodSystemValueS4 = pm.environment.get(\"classPeriodSystemValueS4\");\r",
													"let statementClassPeriodName = \"\";\r",
													"\r",
													"if (classPeriodSystemValueS4 === \"\" || classPeriodSystemValueS4 === null) {\r",
													"    statementClassPeriodName = \"Class Period 01\";\r",
													"} else {\r",
													"    statementClassPeriodName = classPeriodSystemValueS4;\r",
													"}\r",
													"\r",
													"let expectedClassPeriodName = statementClassPeriodName;\r",
													"let expectedSchoolID = 255901001;\r",
													"\r",
													"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
													"let classPeriodsArray = response.classPeriods;\r",
													"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
													"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
													"    console.log(\"classPeriod\", classPeriod);\r",
													"\r",
													"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
													"    let foundValidPeriod = false\r",
													"\r",
													"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
													"        let classPeriodItem = classPeriodsArray[i];\r",
													"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
													"        console.log(\"schoolId\", schoolId);\r",
													"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
													"        console.log(\"classPeriodName\", classPeriodName);\r",
													"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
													"            foundValidPeriod = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
													"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
													"    statementLocalCourseCode = \"ALG-2\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS4;\r",
													"}\r",
													"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
													"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: schoolId value from course offering reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 4 PUT: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
													"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"let locationSystemValueS4 = pm.environment.get(\"locationSystemValueS4\");\r",
													"let statementclassroomIdentificationCode = \"\";\r",
													"\r",
													"if (locationSystemValueS4 === \"\" || locationSystemValueS4 === null) {\r",
													"    statementclassroomIdentificationCode = \"901\";\r",
													"} else {\r",
													"    statementclassroomIdentificationCode = locationSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"08 - Scenario 4 PUT:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
													"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 3 POST: schoolId value from location reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.locationReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 4 PUT: schoolId value from location school reference for the section is '255901001'\", () =>{\r",
													"    pm.expect(response.locationSchoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"11 - Scenario 4 PUT: sequenceOfCourse value for the section is '1'\", () =>{\r",
													"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS4 = pm.environment.get(\"sectionIdentifierSystemValueS4\");\r",
													"let statementSectionIdentifier = \"\";\r",
													"\r",
													"if (sectionIdentifierSystemValueS4 === \"\" || sectionIdentifierSystemValueS4 === null) {\r",
													"    statementSectionIdentifier = \"ALG12017RM901\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"12 - Scenario 4 PUT: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
													"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"pm.test(\"13 - Scenario 4 PUT: availableCredits value for the section is '3'\", () =>{\r",
													"    pm.expect(response.availableCredits, `'3' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"14 - Scenario 4 PUT: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
													"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Sections and getting the ID of the section\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
													"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
													"\r",
													"        pm.environment.set(\"s4SectionId\", latestCourseOffering.id);\r",
													"        console.log('s4SectionId', pm.environment.get(\"s4SectionId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s4SectionId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"sections",
												"{{s4SectionId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "04-StaffAssociation",
					"item": [
						{
							"name": "Scenario 1",
							"item": [
								{
									"name": "Scenario 1 POST - Get Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Staff request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: firstName value for the staff is 'John'\", () => {\r",
													"    pm.expect(response.firstName, `'John' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"John\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: lastSurname value for the staff is 'Loyo'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Loyo' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Loyo\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: birthDate value for the staff is '1959-04-30'\", () => {\r",
													"    pm.expect(response.birthDate, `'1959-04-30' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1959-04-30\");\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: generationCodeSuffix value for the staff is 'Sr'\", () => {\r",
													"    pm.expect(response.generationCodeSuffix, `'Sr' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(\"Sr\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: highestCompletedLevelOfEducationDescriptor value for the staff is 'Master's'\", () => {\r",
													"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Master's' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Master's\");\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 1 POST: sexDescriptor value for the staff is 'Male'\", () => {\r",
													"    pm.expect(response.sexDescriptor, `'Male' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Male\");\r",
													"});\r",
													"\r",
													"let expectedElectronicMailAddress = \"johnloyo@edficert.org\";\r",
													"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
													"let electronicMailsArray = response.electronicMails;\r",
													"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
													"\r",
													"pm.test(\"11 - Scenario 1 POST: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
													"    let foundValidStaffElectronicMailAddress = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
													"            foundValidStaffElectronicMailAddress = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 1 POST: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
													"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
													"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff and getting the ID of the staff\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s1StaffId\", latestBellSchedule.id);\r",
													"        console.log('s1StaffId', pm.environment.get(\"s1StaffId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s1StaffId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffs",
												"{{s1StaffId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Staff Education Organization Assignment Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-01-02`;\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901107'\", () => {\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901107' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
													"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
													"});\r",
													"\r",
													"let expectedEndDate = `${currentYear}-01-03`;\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: endDate value for the Staff Education Organization Assignment Association is \" + expectedEndDate, () => {\r",
													"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: positionTitle value for the Staff Education Organization Assignment Association is '1st Grade teacher'\", () => {\r",
													"    pm.expect(response.positionTitle, `'1st Grade teacher' value was not found for the positionTitle`).to.eql(\"1st Grade teacher\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s1staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
													"        console.log('s1staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s1staffEducationOrganizationAssignmentAssociationsId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s1staffEducationOrganizationAssignmentAssociationsId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffEducationOrganizationAssignmentAssociations",
												"{{s1staffEducationOrganizationAssignmentAssociationsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Staff School Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Staff School Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: schoolId value for the Staff School Association is '255901107'\", () => {\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901107' value was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: staffUniqueId value for the Staff School Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: programAssignmentDescriptor value for the Staff School Association is 'Regular Education'\", () => {\r",
													"    pm.expect(response.programAssignmentDescriptor, `'Regular Education' was not flound in the programAssignmentDescriptor property. Retrieved value is '${response.programAssignmentDescriptor}'`).to.include(\"Regular Education\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff School Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSchoolAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s1staffSchoolAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s1staffSchoolAssociationId', pm.environment.get(\"s1staffSchoolAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSchoolAssociations/{{s1staffSchoolAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSchoolAssociations",
												"{{s1staffSchoolAssociationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 1 POST - Get Staff Section Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 1 POST: Test that Staff Section Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 1 POST: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
													"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 1 POST: schoolId value for Staff Section Association is '255901107'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolId, `'255901107' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 1 POST: schoolYear value for Staff Section Association is '2017'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 1 POST: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
													"let statementSectionIdentifier;\r",
													"\r",
													"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
													"    statementSectionIdentifier = \"ELA012017RM555\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"06 - Scenario 1 POST: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
													"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"07 - Scenario 1 POST: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 1 POST: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
													"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-08-31`;\r",
													"\r",
													"pm.test(\"09 - Scenario 1 POST: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s1staffSectionAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s1staffSectionAssociationId', pm.environment.get(\"s1staffSectionAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s1staffSectionAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSectionAssociations",
												"{{s1staffSectionAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 2",
							"item": [
								{
									"name": "Scenario 2 POST - Get Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Staff request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: firstName value for the staff is 'Jane'\", () => {\r",
													"    pm.expect(response.firstName, `'Jane' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"Jane\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: lastSurname value for the staff is 'Smith'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Smith' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Smith\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: birthDate value for the staff is '1973-07-20'\", () => {\r",
													"    pm.expect(response.birthDate, `'1973-07-20' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1973-07-20\");\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: highestCompletedLevelOfEducationDescriptor value for the staff is 'Doctorate'\", () => {\r",
													"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Doctorate' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Doctorate\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: middleName value for the staff is 'Marcy'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Marcy' was not found in the middleName property . Retrieved value is '${response.middleName}'`).to.eql(\"Marcy\");\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 2 POST: sexDescriptor value for the staff is 'Female'\", () => {\r",
													"    pm.expect(response.sexDescriptor, `'Female' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Female\");\r",
													"});\r",
													"\r",
													"let expectedElectronicMailAddress = \"janesmith@edficert.org\";\r",
													"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
													"let electronicMailsArray = response.electronicMails;\r",
													"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
													"\r",
													"pm.test(\"11 - Scenario 2 POST: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
													"    let foundValidStaffElectronicMailAddress = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
													"            foundValidStaffElectronicMailAddress = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 2 POST: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
													"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
													"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff and getting the ID of the staff\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s2StaffId\", latestBellSchedule.id);\r",
													"        console.log('s2StaffId', pm.environment.get(\"s2StaffId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s2StaffId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffs",
												"{{s2StaffId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Staff Education Organization Assignment Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-08-01`;\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901001'\", () => {\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901001' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
													"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: positionTitle value for the Staff Education Organization Assignment Association is '9th Grade Teacher'\", () => {\r",
													"    pm.expect(response.positionTitle, `'9th Grade Teacher' value was not found for the positionTitle`).to.eql(\"9th Grade Teacher\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s2staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
													"        console.log('s2staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s2staffEducationOrganizationAssignmentAssociationsId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s2staffEducationOrganizationAssignmentAssociationsId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffEducationOrganizationAssignmentAssociations",
												"{{s2staffEducationOrganizationAssignmentAssociationsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Staff School Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Staff School Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: schoolId value for the Staff School Association is '255901001'\", () => {\r",
													"    pm.expect(response.schoolReference.schoolId, `'255901001' value was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
													"    statementStaffUnique = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
													"}\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: staffUniqueId value for the Staff School Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: programAssignmentDescriptor value for the Staff School Association is 'Regular Education'\", () => {\r",
													"    pm.expect(response.programAssignmentDescriptor, `'Regular Education' was not flound in the programAssignmentDescriptor property. Retrieved value is '${response.programAssignmentDescriptor}'`).to.include(\"Regular Education\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Section Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSchoolAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s2staffSchoolAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s2staffSchoolAssociationId', pm.environment.get(\"s2staffSchoolAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSchoolAssociations/{{s2staffSchoolAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSchoolAssociations",
												"{{s2staffSchoolAssociationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 2 POST - Get Staff Section Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 2 POST: Test that Staff Section Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
													"    statementLocalCourseCode = \"ALG-2\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 2 POST: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
													"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 2 POST: schoolId value for Staff Section Association is '255901001'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolId, `'255901001' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 2 POST: schoolYear value for Staff Section Association is '2017'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 2 POST: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS2 = pm.environment.get(\"sectionIdentifierSystemValueS2\");\r",
													"let statementSectionIdentifier;\r",
													"\r",
													"if (sectionIdentifierSystemValueS2 === \"\" || sectionIdentifierSystemValueS2 === null) {\r",
													"    statementSectionIdentifier = \"ALG12017RM901\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"06 - Scenario 2 POST: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
													"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
													"}\r",
													"\r",
													"pm.test(\"07 - Scenario 2 POST: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 2 POST: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
													"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-08-31`;\r",
													"\r",
													"pm.test(\"09 - Scenario 2 POST: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s2staffSectionAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s2staffSectionAssociationId', pm.environment.get(\"s2staffSectionAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s2staffSectionAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSectionAssociations",
												"{{s2staffSectionAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 3",
							"item": [
								{
									"name": "Scenario 3 PUT - Get Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Staff request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: firstName value for the staff is 'John'\", () => {\r",
													"    pm.expect(response.firstName, `'John' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"John\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: lastSurname value for the staff is 'Loyo'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Loyo' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Loyo\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: birthDate value for the staff is '1959-04-30'\", () => {\r",
													"    pm.expect(response.birthDate, `'1959-04-30' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1959-04-30\");\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 3 PUT: generationCodeSuffix value for the staff is 'Sr'\", () => {\r",
													"    pm.expect(response.generationCodeSuffix, `'Sr' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(\"Sr\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 3 PUT: highestCompletedLevelOfEducationDescriptor value for the staff is 'Master's'\", () => {\r",
													"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Master's' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Master's\");\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 3 PUT: highlyQualifiedTeacher value for the staff is 'false'\", () => {\r",
													"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is true. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 3 PUT: sexDescriptor value for the staff is 'Male'\", () => {\r",
													"    pm.expect(response.sexDescriptor, `'Male' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Male\");\r",
													"});\r",
													"\r",
													"let expectedElectronicMailAddress = \"johnloyo@edficert.org\";\r",
													"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
													"let electronicMailsArray = response.electronicMails;\r",
													"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
													"\r",
													"pm.test(\"11 - Scenario 3 PUT: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
													"    let foundValidStaffElectronicMailAddress = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
													"            foundValidStaffElectronicMailAddress = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 3 PUT: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
													"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
													"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff and getting the ID of the staff\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s3StaffId\", latestBellSchedule.id);\r",
													"        console.log('s3StaffId', pm.environment.get(\"s3StaffId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s3StaffId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffs",
												"{{s3StaffId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Staff Education Organization Assignment Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-01-01`;\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901107'\", () => {\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901107' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
													"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: positionTitle value for the Staff Education Organization Assignment Association is '2nd Grade teacher'\", () => {\r",
													"    pm.expect(response.positionTitle, `'2nd Grade teacher' value was not found for the positionTitle`).to.eql(\"2nd Grade teacher\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s3staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
													"        console.log('s3staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s3staffEducationOrganizationAssignmentAssociationsId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s3staffEducationOrganizationAssignmentAssociationsId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffEducationOrganizationAssignmentAssociations",
												"{{s3staffEducationOrganizationAssignmentAssociationsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 3 PUT - Get Staff Section Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 3 PUT: Test that Staff Section Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
													"    statementLocalCourseCode = \"ELA-01\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 3 PUT: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
													"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 3 PUT: schoolId value for Staff Section Association is '255901107'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolId, `'255901107' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901107);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 3 PUT: schoolYear value for Staff Section Association is '2017'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 3 PUT: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
													"let statementSectionIdentifier;\r",
													"\r",
													"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
													"    statementSectionIdentifier = \"ELA012017RM555\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"06 - Scenario 3 PUT: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
													"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
													"    statementStaffUniqueId = \"207220\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
													"}\r",
													"\r",
													"pm.test(\"07 - Scenario 3 PUT: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 3 PUT: classroomPositionDescriptor value for Staff Section Association is 'Assistant Teacher'\", () => {\r",
													"    pm.expect(response.classroomPositionDescriptor, `'Assistant Teacher' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Assistant Teacher\");\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-08-31`;\r",
													"\r",
													"pm.test(\"09 - Scenario 3 PUT: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s3staffSectionAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s3staffSectionAssociationId', pm.environment.get(\"s3staffSectionAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s3staffSectionAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSectionAssociations",
												"{{s3staffSectionAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario 4",
							"item": [
								{
									"name": "Scenario 4 PUT - Get Staff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Staff request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: firstName value for the staff is 'Jane'\", () => {\r",
													"    pm.expect(response.firstName, `'Jane' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"Jane\");\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: hispanicLatinoEthnicity value for the staff is 'false'\", () => {\r",
													"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is true. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: lastSurname value for the staff is 'Smith'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Smith' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Smith\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: birthDate value for the staff is '1973-07-20'\", () => {\r",
													"    pm.expect(response.birthDate, `'1973-07-20' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1973-07-20\");\r",
													"});\r",
													"\r",
													"pm.test(\"07 - Scenario 4 PUT: highestCompletedLevelOfEducationDescriptor value for the staff is 'Doctorate'\", () => {\r",
													"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Doctorate' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Doctorate\");\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 PUT: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
													"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"09 - Scenario 4 PUT: middleName value for the staff is 'Marcy'\", () => {\r",
													"    pm.expect(response.lastSurname, `'Marcy' was not found in the middleName property . Retrieved value is '${response.middleName}'`).to.eql(\"Marcy\");\r",
													"});\r",
													"\r",
													"pm.test(\"10 - Scenario 4 PUT: sexDescriptor value for the staff is 'Female'\", () => {\r",
													"    pm.expect(response.sexDescriptor, `'Female' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Female\");\r",
													"});\r",
													"\r",
													"let expectedElectronicMailAddress = \"janesmith@edficert.org\";\r",
													"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
													"let electronicMailsArray = response.electronicMails;\r",
													"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
													"\r",
													"pm.test(\"11 - Scenario 4 PUT: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
													"    let foundValidStaffElectronicMailAddress = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
													"            foundValidStaffElectronicMailAddress = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"12 - Scenario 4 PUT: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
													"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
													"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
													"        let electronicMailItem = electronicMailsArray[i];\r",
													"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
													"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
													"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
													"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff and getting the ID of the staff\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s4StaffId\", latestBellSchedule.id);\r",
													"        console.log('s4StaffId', pm.environment.get(\"s4StaffId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s4StaffId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffs",
												"{{s4StaffId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Staff Education Organization Assignment Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-08-01`;\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901001'\", () => {\r",
													"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901001' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
													"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
													"});\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: positionTitle value for the Staff Education Organization Assignment Association is '10th Grade Teacher'\", () => {\r",
													"    pm.expect(response.positionTitle, `'10th Grade Teacher' value was not found for the positionTitle`).to.eql(\"10th Grade Teacher\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s4staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
													"        console.log('s4staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s4staffEducationOrganizationAssignmentAssociationsId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s4staffEducationOrganizationAssignmentAssociationsId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffEducationOrganizationAssignmentAssociations",
												"{{s4staffEducationOrganizationAssignmentAssociationsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scenario 4 PUT - Get Staff Section Association",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"01 - Scenario 4 PUT: Test that Staff Section Association request has 200 code status\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
													"let statementLocalCourseCode;\r",
													"\r",
													"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
													"    statementLocalCourseCode = \"ALG-2\";\r",
													"} else {\r",
													"    statementLocalCourseCode = localCourseCodeSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"02 - Scenario 4 PUT: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
													"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
													"});\r",
													"\r",
													"pm.test(\"03 - Scenario 4 PUT: schoolId value for Staff Section Association is '255901001'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolId, `'255901001' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901001);\r",
													"});\r",
													"\r",
													"pm.test(\"04 - Scenario 4 PUT: schoolYear value for Staff Section Association is '2017'\", () => {\r",
													"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
													"});\r",
													"\r",
													"pm.test(\"05 - Scenario 4 PUT: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
													"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
													"});\r",
													"\r",
													"let sectionIdentifierSystemValueS4 = pm.environment.get(\"sectionIdentifierSystemValueS4\");\r",
													"let statementSectionIdentifier;\r",
													"\r",
													"if (sectionIdentifierSystemValueS4 === \"\" || sectionIdentifierSystemValueS4 === null) {\r",
													"    statementSectionIdentifier = \"ALG12017RM901\";\r",
													"} else {\r",
													"    statementSectionIdentifier = sectionIdentifierSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"06 - Scenario 4 PUT: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
													"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
													"});\r",
													"\r",
													"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
													"let statementStaffUniqueId;\r",
													"\r",
													"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
													"    statementStaffUniqueId = \"207269\";\r",
													"} else {\r",
													"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
													"}\r",
													"\r",
													"pm.test(\"07 - Scenario 4 PUT: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
													"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
													"});\r",
													"\r",
													"pm.test(\"08 - Scenario 4 PUT: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
													"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
													"});\r",
													"\r",
													"let dateObject = new Date();\r",
													"let currentYear = dateObject.getFullYear();\r",
													"\r",
													"let expectedBeginDate = `${currentYear}-09-01`;\r",
													"\r",
													"pm.test(\"09 - Scenario 4 PUT: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
													"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
													"pm.sendRequest({\r",
													"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
													"        'Accept': '*/*'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log('Error in the Authentication Process:', err);\r",
													"    } else {\r",
													"        const _ = require('lodash');\r",
													"\r",
													"        var jsonData = res.json();\r",
													"\r",
													"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
													"\r",
													"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
													"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
													"\r",
													"        pm.environment.set(\"s4staffSectionAssociationId\", latestBellSchedule.id);\r",
													"        console.log('s4staffSectionAssociationId', pm.environment.get(\"s4staffSectionAssociationId\"));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{certToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s4staffSectionAssociationId}}",
											"host": [
												"{{resourceBaseUrl}}"
											],
											"path": [
												"ed-fi",
												"staffSectionAssociations",
												"{{s4staffSectionAssociationId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Assessment",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js', function (err, res) {\r",
					"    if (!err && res) {\r",
					"        eval(res.text());\r",
					"    }\r",
					"});\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${pm.environment.get('baseUrl')}/oauth/token`,\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/x-www-form-urlencoded' \r",
					"    },\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            { key: 'grant_type', value: 'client_credentials' },\r",
					"            { key: 'client_id', value: pm.environment.get('edFiClientId') },\r",
					"            { key: 'client_secret', value: pm.environment.get('edFiClientSecret')}\r",
					"        ]\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log('Error when generating the token:', err); \r",
					"    } else {\r",
					"        accessToken = res.json().access_token;\r",
					"        pm.environment.set('certToken',accessToken);\r",
					"        console.log(\"Access token is: \", accessToken);\r",
					"    }\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}