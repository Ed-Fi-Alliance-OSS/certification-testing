{
	"info": {
		"_postman_id": "5f849751-48f9-4947-bc53-8562ade38817",
		"name": "Certification Testing - SIS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29458798"
	},
	"item": [
		{
			"name": "01-EducationOrganization",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Find the most recently modified School and use it for subsequent testing\r",
											"const _ = require('lodash');\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// With querystring ?schoolId=255901333 there can be only one result in the array, since schoolId is unique\r",
											"pm.test(\"02 - Scenario 1 POST: find school255901333\", () => {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    pm.expect(jsonData).to.have.lengthOf(1);\r",
											"});\r",
											"let latestSchool = jsonData[0];\r",
											"\r",
											"pm.environment.set(\"s1SchoolId\", latestSchool.id);\r",
											"console.log('s1SchoolId', pm.environment.get(\"s1SchoolId\"));\r",
											"\r",
											"// Assertions for the Certification process\r",
											"pm.expect(latestSchool.addresses).to.be.an('array');\r",
											"\r",
											"const physicalAddress = _.find(latestSchool.addresses, {\"addressTypeDescriptor\": \"uri://ed-fi.org/AddressTypeDescriptor#Physical\"});\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: contains a physical address\", () => {\r",
											"    pm.expect(physicalAddress).to.not.be.undefined; // if no physical address is found by _.find, then the result is `undefined`.\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: city\", () => {\r",
											"    pm.expect(physicalAddress.city).to.equal(\"Grand Oaks\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: postalCode\", () => {\r",
											"    pm.expect(physicalAddress.postalCode).to.equal(\"73334\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: stateAbbreviationDescriptor\", () => {\r",
											"    pm.expect(physicalAddress.stateAbbreviationDescriptor).to.equal(\"uri://ed-fi.org/StateAbbreviationDescriptor#TX\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: streetNumberName\", () => {\r",
											"    pm.expect(physicalAddress.streetNumberName).to.equal(\"456 Oaks Street\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: educationOrganizationCategoryDescriptor\", () => {\r",
											"    pm.expect(latestSchool.educationOrganizationCategories).to.deep.include({ \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" });\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: gradeLevelDescriptor\", () =>{\r",
											"    pm.expect(latestSchool.gradeLevels).to.deep.include({ \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" });\r",
											"    pm.expect(latestSchool.gradeLevels).to.deep.include({ \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" });\r",
											"    pm.expect(latestSchool.gradeLevels).to.deep.include({ \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" });\r",
											"    pm.expect(latestSchool.gradeLevels).to.deep.include({ \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" });\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: localEducationAgencyId\", () =>{\r",
											"    pm.expect(latestSchool.localEducationAgencyReference.localEducationAgencyId).to.equal(255901);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: nameOfInstitution\", () =>{\r",
											"    pm.expect(latestSchool.nameOfInstitution).to.equal(\"Grand Oaks High School\");\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: schoolId\", () =>{\r",
											"    pm.expect(latestSchool.schoolId).to.equal(255901333);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: shortNameOfInstitution\", () =>{\r",
											"    pm.expect(latestSchool.shortNameOfInstitution).to.equal(\"GOHS\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/schools/?schoolId=255901333",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"schools",
										""
									],
									"query": [
										{
											"key": "schoolId",
											"value": "255901333"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Course request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
											"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
											"});\r",
											"\r",
											"let courseSystemValue = pm.environment.get(\"courseSystemValue\");\r",
											"let statementCourseCode = \"\";\r",
											"\r",
											"if (courseSystemValue === \"\" || courseSystemValue === null) {\r",
											"    statementCourseCode = \"ALG 01\";\r",
											"} else {\r",
											"    statementCourseCode = courseSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
											"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.identificationCodes).to.be.an('array');\r",
											"let identificationCodesArray = response.identificationCodes;\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
											"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
											"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: identificationCode value for the course is '03100500'\", () => {\r",
											"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
											"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
											"let levelCharacteristicsArray = response.levelCharacteristics;\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
											"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra I'\", () =>{\r",
											"    pm.expect(response.courseTitle, `'Algebra I' was not found in any courseTitle. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra I\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
											"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
											"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Courses and getting the latest course ID\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
											"        console.log('latestCourseDate', latestCourseDate);\r",
											"\r",
											"        pm.environment.set(\"s1CourseID\", latestCourse.id);\r",
											"        console.log('s1CourseID', pm.environment.get(\"s1CourseID\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s1CourseID}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courses",
										"{{s1CourseID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Program request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value for the program is '255901'\", () =>{\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
											"});\r",
											"\r",
											"let programSystemValue = pm.environment.get(\"programSystemValue\");\r",
											"let statementProgramID = \"\";\r",
											"\r",
											"if (programSystemValue === \"\" || programSystemValue === null) {\r",
											"    statementProgramID = \"101\";\r",
											"} else {\r",
											"    statementProgramID = programSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: programId value for the program is \" + statementProgramID , () =>{\r",
											"    pm.expect(response.programId).to.eql(statementProgramID, `'${statementProgramID}' was not found in the programId property. Retrieved value is '${response.programId}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value for the program is 'Grand Bend Bilingual 101'\", () =>{\r",
											"    pm.expect(response.programName, `'Grand Bend Bilingual 101' was not found in any programName property. Retrieved value is '${response.programName}'`).to.eql(\"Grand Bend Bilingual 101\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value for the program is 'Bilingual'\", () =>{\r",
											"    pm.expect(response.programTypeDescriptor, `'Bilingual' was not found in any programTypeDescriptor property. Retrieved value is '${response.programTypeDescriptor}'`).to.contain(\"Bilingual\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Programs and getting the latest program ID\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/programs`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestProgram = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestProgramDate = latestProgram ? latestProgram._lastModifiedDate : null;\r",
											"        console.log('latestProgramDate', latestProgramDate);\r",
											"\r",
											"        pm.environment.set(\"s1ProgramID\", latestProgram.id);\r",
											"        console.log('s1ProgramID', pm.environment.get(\"s1ProgramID\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/programs/{{s1ProgramID}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"programs",
										"{{s1ProgramID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Class Period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Class Periods and getting the latest class period ID\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
											"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s1ClassPeriodId\", latestClassPeriod.id);\r",
											"        console.log('s1ClassPeriodId', pm.environment.get(\"s1ClassPeriodId\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Class Period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
											"    statementClassPeriodName = \"Class Period 1\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
											"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value for the class period is '255901107'\", () =>{\r",
											"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s1ClassPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"classPeriods",
										"{{s1ClassPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Locations and getting the ID of the location\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
											"        console.log('latestLocationDate', latestLocationDate);\r",
											"\r",
											"        pm.environment.set(\"s1Location\", latestLocation.id);\r",
											"        console.log('s1Location', pm.environment.get(\"s1Location\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Location request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
											"    statementclassroomIdentificationCode = \"501\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value for the location is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
											"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s1Location}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"locations",
										"{{s1Location}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get School",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Schools and getting the ID of the School\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
											"        console.log('latestSchoolDate', latestSchoolDate);\r",
											"\r",
											"        pm.environment.set(\"s2SchoolId\", latestSchool.id);\r",
											"        console.log('s2SchoolId', pm.environment.get(\"s2SchoolId\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.expect(response.addresses).to.be.an('array');\r",
											"let addressesArray = response.addresses;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
											"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
											"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: city value for the school is 'Grand Oaks'\", () => {\r",
											"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
											"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: postalCode value for the school is '73334'\", () => {\r",
											"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
											"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
											"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
											"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
											"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
											"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
											"});\r",
											"\r",
											"let certEducationOrganizationCategories = [\r",
											"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
											"];\r",
											"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
											"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
											"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
											"    });\r",
											"\r",
											"let certGradeLevels = [\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
											"];\r",
											"let gradeLevelDescriptorArray = response.gradeLevels;\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
											"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
											"    certGradeLevels.forEach(expected => {\r",
											"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
											"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
											"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
											"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: schoolId value for the school is '255901444'\", () =>{\r",
											"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
											"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s2SchoolId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"schools",
										"{{s2SchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
											"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
											"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
											"});\r",
											"\r",
											"pm.expect(response.identificationCodes).to.be.an('array');\r",
											"let identificationCodesArray = response.identificationCodes;\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
											"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
											"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
											"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
											"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
											"let levelCharacteristicsArray = response.levelCharacteristics;\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
											"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
											"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: numberOfParts value for the course is '1'\", () =>{\r",
											"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Courses and getting the ID of the Course\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
											"        console.log('latestCourseDate', latestCourseDate);\r",
											"\r",
											"        pm.environment.set(\"s2CourseCode\", latestCourse.id);\r",
											"        console.log('s2CourseCode', pm.environment.get(\"s2CourseCode\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s2CourseCode}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courses",
										"{{s2CourseCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Class Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Class Period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValueS2\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
											"    statementClassPeriodName = \"Class Period 1\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
											"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value for the class period is '255901001'\", () =>{\r",
											"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
											"});\r",
											"\r",
											"let meetingTimesArray = response.meetingTimes;\r",
											"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: startTime value for the class period is '08:15:00'\", () =>{\r",
											"    meetingTimesArray.forEach((meeting) => {\r",
											"        pm.expect(meeting.startTime).to.eql(\"08:15:00\", `'08:15:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
											"    meetingTimesArray.forEach((meeting) => {\r",
											"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Class Periods and getting the ID of the class period\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
											"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s2ClassPeriodId\", latestClassPeriod.id);\r",
											"        console.log('s2ClassPeriodId', pm.environment.get(\"s2ClassPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s2ClassPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"classPeriods",
										"{{s2ClassPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Location request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"\r",
											"let locationSystemValueS2 = pm.environment.get(\"locationSystemValueS2\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValueS2 === \"\" || locationSystemValueS2 === null) {\r",
											"    statementclassroomIdentificationCode = \"901\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value for the location is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: maximumNumberOfSeats value for the location is '22'\", () =>{\r",
											"    pm.expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Locations and getting the ID of the location\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
											"        console.log('latestLocationDate', latestLocationDate);\r",
											"\r",
											"        pm.environment.set(\"s2Location\", latestLocation.id);\r",
											"        console.log('s2Location', pm.environment.get(\"s2Location\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s2Location}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"locations",
										"{{s2Location}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 DELETE - Get Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s2DeletedProgramID\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programName\": \"Grand Bend Bilingual 101\",\r\n    \"programTypeDescriptor\": \"uri://ed-fi.org/ProgramTypeDescriptor#Bilingual\",\r\n    \"educationOrganizationReference\": {\r\n        \"educationOrganizationId\": 255901\r\n    },\r\n    \"programId\": \"101\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/programs/{{s2DeletedProgramID}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"programs",
										"{{s2DeletedProgramID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.expect(response.addresses).to.be.an('array');\r",
											"let addressesArray = response.addresses;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
											"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
											"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 POST: city value for the school is 'Grand Oaks'\", () => {\r",
											"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
											"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 POST: postalCode value for the school is '73334'\", () => {\r",
											"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73334\"));\r",
											"    pm.expect(postalCodeValue, `'73334' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
											"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
											"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 POST: streetNumberName value for the school is '456 Cedar Street'\", () => {\r",
											"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"456 Cedar Street\"));\r",
											"    pm.expect(streetNumberNameValue, `'456 Cedar Street' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
											"});\r",
											"\r",
											"let certEducationOrganizationCategories = [\r",
											"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
											"];\r",
											"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
											"\r",
											"pm.test(\"07 - Scenario 3 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
											"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
											"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
											"    });\r",
											"\r",
											"let certGradeLevels = [\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade\" },\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" },\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Twelfth grade\" }\r",
											"];\r",
											"let gradeLevelDescriptorArray = response.gradeLevels;\r",
											"\r",
											"pm.test(\"08 - Scenario 3 POST: gradeLevelDescriptor value for the school are 'Ninth grade', 'Tenth grade', 'Eleventh grade', and 'Twelfth grade'\", () =>{\r",
											"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
											"    certGradeLevels.forEach(expected => {\r",
											"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
											"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
											"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 POST: nameOfInstitution value for the school is 'Grand Oaks High School'\", () =>{\r",
											"    pm.expect(response.nameOfInstitution, `'Grand Oaks High School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks High School\");\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 POST: schoolId value for the school is '255901333'\", () =>{\r",
											"    pm.expect(response.schoolId, `'255901333' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901333);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 POST: shortNameOfInstitution value for the school is 'GOHS'\", () =>{\r",
											"    pm.expect(response.shortNameOfInstitution, `'GOHS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOHS\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Schools and getting the ID of the School\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
											"        console.log('latestSchoolDate', latestSchoolDate);\r",
											"\r",
											"        pm.environment.set(\"s3SchoolId\", latestSchool.id);\r",
											"        console.log('s3SchoolId', pm.environment.get(\"s3SchoolId\"));\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s3SchoolId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"schools",
										"{{s3SchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: academicSubjectDescriptor value for the course is 'Mathematics'\", () =>{\r",
											"    pm.expect(response.academicSubjectDescriptor, `'Mathematics' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Mathematics\");\r",
											"});\r",
											"\r",
											"let courseSystemValueS3 = pm.environment.get(\"courseSystemValueS3\");\r",
											"let statementCourseCode = \"\";\r",
											"\r",
											"if (courseSystemValueS3 === \"\" || courseSystemValueS3 === null) {\r",
											"    statementCourseCode = \"ALG 01\";\r",
											"} else {\r",
											"    statementCourseCode = courseSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 3 POST: courseCode value for the course is \" + statementCourseCode , () =>{\r",
											"    pm.expect(response.courseCode).to.eql(statementCourseCode, `'${statementCourseCode}' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.identificationCodes).to.be.an('array');\r",
											"let identificationCodesArray = response.identificationCodes;\r",
											"\r",
											"pm.test(\"04 - Scenario 3 POST: courseIdentificationSystemDescriptor value for the course is 'State course code'\", () => {\r",
											"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"State course code\"));\r",
											"    pm.expect(courseIdentificationSystemDescriptorValue, `'State course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 POST: identificationCode value for the course is '03100500'\", () => {\r",
											"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"03100500\"));\r",
											"    pm.expect(identificationCodeValue, `'03100500' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
											"let levelCharacteristicsArray = response.levelCharacteristics;\r",
											"\r",
											"pm.test(\"06 - Scenario 3 POST: courseLevelCharacteristicDescriptor value for the course is 'Core Subject'\", () =>{\r",
											"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Core Subject\"));\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Core Subject' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: courseTitle value for the course is 'Algebra II'\", () =>{\r",
											"    pm.expect(response.courseTitle, `'Algebra II' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Algebra II\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: numberOfParts value for the course is '1'\", () =>{\r",
											"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: maxCompletionsForCredit value for the course is '3'\", () =>{\r",
											"    pm.expect(response.maxCompletionsForCredit, `'3' was not found in any maxCompletionsForCredit property. Retrieved value is '${response.maxCompletionsForCredit}'`).to.eql(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Courses and getting the ID of the Course\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
											"        console.log('latestCourseDate', latestCourseDate);\r",
											"\r",
											"        pm.environment.set(\"s3CourseID\", latestCourse.id);\r",
											"        console.log('s3CourseID', pm.environment.get(\"s3CourseID\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s3CourseID}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courses",
										"{{s3CourseID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Class Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that Class Period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValueS3 = pm.environment.get(\"classPeriodSystemValueS3\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValueS3 === \"\" || classPeriodSystemValueS3 === null) {\r",
											"    statementClassPeriodName = \"Class Period 01\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
											"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 POST: schoolId value for the class period is '255901107'\", () =>{\r",
											"    pm.expect(response, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Class Periods and getting the ID of the class period\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
											"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s3ClassPeriodId\", latestClassPeriod.id);\r",
											"        console.log('s3ClassPeriodId', pm.environment.get(\"s3ClassPeriodId\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s3ClassPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"classPeriods",
										"{{s3ClassPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that Location request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
											"    statementclassroomIdentificationCode = \"Class Period 1\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 POST: schoolId value for the location is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 POST: maximumNumberOfSeats value for the course is '20'\", () =>{\r",
											"    pm.expect(response.maximumNumberOfSeats, `'20' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(20);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Locations and getting the ID of the location\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
											"        console.log('latestLocationDate', latestLocationDate);\r",
											"\r",
											"        pm.environment.set(\"s3Location\", latestLocation.id);\r",
											"        console.log('s3Location', pm.environment.get(\"s3Location\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s3Location}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"locations",
										"{{s3Location}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get School",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.expect(response.addresses).to.be.an('array');\r",
											"let addressesArray = response.addresses;\r",
											"\r",
											"pm.test(\"02 - Scenario 4 POST: addressTypeDescriptor value for the school is 'Physical'\", () => {\r",
											"    let addressTypeDescriptorValue = addressesArray.some(item => item.addressTypeDescriptor.includes(\"Physical\"));\r",
											"    pm.expect(addressTypeDescriptorValue, `'Physical' was not found in the addressTypeDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 POST: city value for the school is 'Grand Oaks'\", () => {\r",
											"    let cityValue = addressesArray.some(item => item.city.includes(\"Grand Oaks\"));\r",
											"    pm.expect(cityValue, `'Grand Oaks' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.city))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 POST: postalCode value for the school is '73335'\", () => {\r",
											"    let postalCodeValue = addressesArray.some(item => item.postalCode.includes(\"73335\"));\r",
											"    pm.expect(postalCodeValue, `'73335' was not found in the city property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 POST: stateAbbreviationDescriptor value for the school is 'TX'\", () => {\r",
											"    let stateAbbreviationDescriptorValue = addressesArray.some(item => item.stateAbbreviationDescriptor.includes(\"TX\"));\r",
											"    pm.expect(stateAbbreviationDescriptorValue, `'TX' was not found in the stateAbbreviationDescriptor property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.postalCode))}`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 POST: streetNumberName value for the school is '9993 West Blvd.'\", () => {\r",
											"    let streetNumberNameValue = addressesArray.some(item => item.streetNumberName.includes(\"9993 West Blvd.\"));\r",
											"    pm.expect(streetNumberNameValue, `'9993 West Blvd.' was not found in the streetNumberName property. Retrieved value is: ${JSON.stringify(addressesArray.map(item => item.streetNumberName))}`).to.be.true;\r",
											"});\r",
											"\r",
											"let certEducationOrganizationCategories = [\r",
											"    { \"educationOrganizationCategoryDescriptor\": \"uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School\" }\r",
											"];\r",
											"let educationOrganizationCategoryDescriptorArray = response.educationOrganizationCategories;\r",
											"\r",
											"pm.test(\"07 - Scenario 4 POST: educationOrganizationCategoryDescriptor value for the school are 'School'\", () => {\r",
											"    let eocd = educationOrganizationCategoryDescriptorArray.some(item => item.educationOrganizationCategoryDescriptor.includes(\"School\"));\r",
											"    pm.expect(eocd, `'School' was not found in any of the educationOrganizationCategoryDescriptor values. The obtained values are: ${JSON.stringify(educationOrganizationCategoryDescriptorArray.map(item => item.educationOrganizationCategoryDescriptor))}`).to.be.true;\r",
											"    });\r",
											"\r",
											"let certGradeLevels = [\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Sixth grade\"},\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Seventh grade\"},\r",
											"    {\"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Eighth grade\"}\r",
											"];\r",
											"let gradeLevelDescriptorArray = response.gradeLevels;\r",
											"\r",
											"pm.test(\"08 - Scenario 4 POST: gradeLevelDescriptor value for the school are Sixth grade', 'Seventh grade', and 'Eighth grade'\", () =>{\r",
											"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
											"    certGradeLevels.forEach(expected => {\r",
											"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
											"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 POST: localEducationAgencyId value for the school is '255901'\", () =>{\r",
											"    pm.expect(response, `'255901' was not found in the localEducationAgencyId property. Retrieved value is: '${response.localEducationAgencyReference}'`).to.have.nested.property('localEducationAgencyReference.localEducationAgencyId', 255901);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 POST: nameOfInstitution value for the school is 'Grand Oaks Middle School'\", () =>{\r",
											"    pm.expect(response.nameOfInstitution, `'Grand Oaks Middle School' was not found in the nameOfInstitution property. Retrieved value is: '${response.nameOfInstitution}'`).to.have.property('nameOfInstitution', \"Grand Oaks Middle School\");\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 4 POST: schoolId value for the school is '255901444'\", () =>{\r",
											"    pm.expect(response.schoolId, `'255901444' was not found in the schoolId property. Retrieved value is: '${response.schoolId}'`).to.have.property('schoolId', 255901444);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 4 POST: shortNameOfInstitution value for the school is 'GOMS'\", () =>{\r",
											"    pm.expect(response.shortNameOfInstitution, `'GOMS' was not found in the shortNameOfInstitution property. Retrieved value is: '${response.shortNameOfInstitution}'`).to.have.property('shortNameOfInstitution',\"GOMS\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Schools and getting the ID of the School\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/schools`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSchool = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSchoolDate = latestSchool ? latestSchool._lastModifiedDate : null;\r",
											"        console.log('latestSchoolDate', latestSchoolDate);\r",
											"\r",
											"        pm.environment.set(\"s4SchoolId\", latestSchool.id);\r",
											"        console.log('s4SchoolId', pm.environment.get(\"s4SchoolId\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/schools/{{s4SchoolId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"schools",
										"{{s4SchoolId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 POST: Test that School request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 POST: academicSubjectDescriptor value for the course is 'Fine and Performing Arts'\", () =>{\r",
											"    pm.expect(response.academicSubjectDescriptor, `'Fine and Performing Arts' was not found in the academicSubjectDescriptor property. Retrieved value is: '${response.academicSubjectDescriptor}'`).to.contain(\"Fine and Performing Arts\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 POST: courseCode value for the course is 'ART 01'\", () =>{\r",
											"    pm.expect(response.courseCode, `'ART 01' was not found in the courseCode property. Retrieved value is '${response.courseCode}'`).to.eql(\"ART 01\", );\r",
											"});\r",
											"\r",
											"pm.expect(response.identificationCodes).to.be.an('array');\r",
											"let identificationCodesArray = response.identificationCodes;\r",
											"\r",
											"pm.test(\"04 - Scenario 4 POST: courseIdentificationSystemDescriptor value for the course is 'LEA course code'\", () => {\r",
											"    let courseIdentificationSystemDescriptorValue = identificationCodesArray.some(item => item.courseIdentificationSystemDescriptor.includes(\"LEA course code\"));\r",
											"    pm.expect(courseIdentificationSystemDescriptorValue, `'LEA course code' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.courseIdentificationSystemDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 POST: identificationCode value for the course is 'ART 01'\", () => {\r",
											"    let identificationCodeValue = identificationCodesArray.some(item => item.identificationCode.includes(\"ART 01\"));\r",
											"    pm.expect(identificationCodeValue, `'ART 01' was not found in any courseIdentificationSystemDescriptor property. Retrieved value is '${JSON.stringify(identificationCodesArray.map(item => item.identificationCode))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.expect(response.levelCharacteristics).to.be.an('array');\r",
											"let levelCharacteristicsArray = response.levelCharacteristics;\r",
											"\r",
											"pm.test(\"06 - Scenario 4 POST: courseLevelCharacteristicDescriptor value for the course is 'Basic'\", () =>{\r",
											"    let courseLevelCharacteristicDescriptorValue = levelCharacteristicsArray.some(item => item.courseLevelCharacteristicDescriptor.includes(\"Basic\"));\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue, `'Basic' was not found in any courseLevelCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(levelCharacteristicsArray.map(item => item.courseLevelCharacteristicDescriptor))}'`).to.be.true;\r",
											"    pm.expect(courseLevelCharacteristicDescriptorValue).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 POST: courseTitle value for the course is 'Art, Grade 1'\", () =>{\r",
											"    pm.expect(response.courseTitle, `'Art, Grade 1' was not found in any courseTitle property. Retrieved value is '${response.courseTitle}'`).to.eql(\"Art, Grade 1\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 POST: educationOrganizationId value for the course is '255901'\", () =>{\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901' was not found in any educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 POST: numberOfParts value for the course is '1'\", () =>{\r",
											"    pm.expect(response.numberOfParts,`'1' was not found in any numberOfParts property. Retrieved value is '${response.numberOfParts}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Courses and getting the ID of the Course\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courses`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourse = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseDate = latestCourse ? latestCourse._lastModifiedDate : null;\r",
											"        console.log('latestCourseDate', latestCourseDate);\r",
											"\r",
											"        pm.environment.set(\"s4CourseID\", latestCourse.id);\r",
											"        console.log('s4CourseID', pm.environment.get(\"s4CourseID\"));\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courses/{{s4CourseID}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courses",
										"{{s4CourseID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT- Get Class Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 POST: Test that Class Period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValueS4 = pm.environment.get(\"classPeriodSystemValueS4\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValueS4 === \"\" || classPeriodSystemValueS4 === null) {\r",
											"    statementClassPeriodName = \"Class Period 1\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 POST: classPeriodName value for the class period is \" + statementClassPeriodName , () =>{\r",
											"    pm.expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 POST: schoolId value for the class period is '255901001'\", () =>{\r",
											"    pm.expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');\r",
											"});\r",
											"\r",
											"let meetingTimesArray = response.meetingTimes;\r",
											"pm.expect(meetingTimesArray).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"\r",
											"pm.test(\"04 - Scenario 4 POST: startTime value for the class period is '08:35:00'\", () =>{\r",
											"    meetingTimesArray.forEach((meeting) => {\r",
											"        pm.expect(meeting.startTime).to.eql(\"08:35:00\", `'08:35:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 POST: endTime value for the class period is '09:25:00'\", () =>{\r",
											"    meetingTimesArray.forEach((meeting) => {\r",
											"        pm.expect(meeting.endTime).to.eql(\"09:25:00\", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Class Periods and getting the ID of the class period\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/classPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;\r",
											"        console.log('latestClassPeriodDate', latestClassPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s4ClassPeriodId\", latestClassPeriod.id);\r",
											"        console.log('s4ClassPeriodId', pm.environment.get(\"s4ClassPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/classPeriods/{{s4ClassPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"classPeriods",
										"{{s4ClassPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 POST - Get Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 POST: Test that Location request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let locationSystemValueS4 = pm.environment.get(\"locationSystemValueS4\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValueS4 === \"\" || locationSystemValueS4 === null) {\r",
											"    statementclassroomIdentificationCode = \"901\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 POST: classroomIdentificationCode value for the location is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 POST: schoolId value for the location is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 POST: maximumNumberOfSeats value for the location is '18'\", () =>{\r",
											"    pm.expect(response.maximumNumberOfSeats, `'18' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(18);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Locations and getting the ID of the location\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/locations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestLocation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;\r",
											"        console.log('latestLocationDate', latestLocationDate);\r",
											"\r",
											"        pm.environment.set(\"s4Location\", latestLocation.id);\r",
											"        console.log('s4Location', pm.environment.get(\"s4Location\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/locations/{{s4Location}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"locations",
										"{{s4Location}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "02-EducationOrganizationCalendar",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Calendar",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Calendars and getting the ID of the calendar\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDate', latestCalendarDate);\r",
											"\r",
											"        pm.environment.set(\"s1CalendarId\", latestCalendar.id);\r",
											"        console.log('s1CalendarId', pm.environment.get(\"s1CalendarId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Calendar request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: calendarCode value for the calendar is '107SS111111'\", () => {\r",
											"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value for the calendar is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolYear value for the calendar is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
											"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s1CalendarId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendars",
										"{{s1CalendarId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Calendar Date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Calendar Dated and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
											"\r",
											"        pm.environment.set(\"s1CalendarDateId\", latestCalendarDate.id);\r",
											"        console.log('s1CalendarDateId', pm.environment.get(\"s1CalendarDateId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Calendar dates request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateString = response.date;\r",
											"console.log(\"dateString\", dateString);\r",
											"\r",
											"let date = new Date(dateString);\r",
											"console.log(\"date\", date);\r",
											"\r",
											"let yearFromDate = date.getFullYear();\r",
											"let monthFromDate = date.getMonth() + 1;\r",
											"let dayFromDate = date.getDate();\r",
											"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"let currentDateTest = `${currentYear}-09-16`;\r",
											"\r",
											"let formattedDate = date.toISOString().split('T')[0];\r",
											"console.log(\"formattedDate\", formattedDate);\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: year of date value for the calendar dates is 9/16/\" + currentYear, () => {\r",
											"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: calendarCode value for the calendar dates is '107SS111111'\", () => {\r",
											"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolId value for the calendar dates is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: schoolYear value for the calendar dates is \" + currentYear, () => {\r",
											"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let certCalendarEvents = [\r",
											"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
											"];\r",
											"let calendarEventDescriptorArray = response.calendarEvents;\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: calendarEventDescriptor value for the calendar dates is 'Holiday'\", () => {\r",
											"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
											"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s1CalendarDateId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendarDates",
										"{{s1CalendarDateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-10-04`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: endDate value for the grading period is \" + currentYear + \"-10-04\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-10-04' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-04`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValue\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 29;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: periodSequence value for the grading period is '1'\", () => {\r",
											"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s1GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s1GradingPeriodId', pm.environment.get(\"s1GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s1GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s1GradingPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Session request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value for the session is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolYear value for the session is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
											"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-15`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: endDate value for the session is \" + currentYear + \"-12-15\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValue\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 88;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.gradingPeriods).to.be.an('array');\r",
											"\r",
											"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
											"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: 'First Six Weeks' as a grading period exists\", () => {\r",
											"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
											"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: 'Second Six Weeks' as a grading period exists\", () => {\r",
											"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
											"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Sessions and getting the ID of the latest session\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
											"        console.log('latestSessionDate', latestSessionDate);\r",
											"\r",
											"        pm.environment.set(\"s1SessionId\", latestSession.id);\r",
											"        console.log('s1SessionId', pm.environment.get(\"s1SessionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s1SessionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sessions",
										"{{s1SessionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Calendar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Calendar request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: calendarCode value for the calendar is 'IEP001'\", () => {\r",
											"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value for the calendar is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolYear value for the calendar is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
											"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
											"});\r",
											"\r",
											"let certGradeLevels = [\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" }\r",
											"];\r",
											"let gradeLevelDescriptorArray = response.gradeLevels;\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: gradeLevelDescriptor value for the school contains 'Ninth grade'\", () =>{\r",
											"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
											"    certGradeLevels.forEach(expected => {\r",
											"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
											"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' was not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Calendars and getting the ID of the calendar\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDate', latestCalendarDate);\r",
											"\r",
											"        pm.environment.set(\"s2CalendarId\", latestCalendar.id);\r",
											"        console.log('s2CalendarId', pm.environment.get(\"s2CalendarId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s2CalendarId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendars",
										"{{s2CalendarId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Calendar Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Calendar dates request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateString = response.date;\r",
											"console.log(\"dateString\", dateString);\r",
											"\r",
											"let date = new Date(dateString);\r",
											"console.log(\"date\", date);\r",
											"\r",
											"let yearFromDate = date.getFullYear();\r",
											"let monthFromDate = date.getMonth() + 1;\r",
											"let dayFromDate = date.getDate();\r",
											"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"let currentDateTest = `${currentYear}-09-16`;\r",
											"\r",
											"let formattedDate = date.toISOString().split('T')[0];\r",
											"console.log(\"formattedDate\", formattedDate);\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: year of date value for the calendar dates is \" + currentYear + \"-09-16\", () => {\r",
											"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: calendarCode value for the calendar dates is 'IEP001'\", () => {\r",
											"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolId value for the calendar dates is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: schoolYear value for the calendar dates is \" + currentYear, () => {\r",
											"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let certCalendarEvents = [\r",
											"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
											"];\r",
											"let calendarEventDescriptorArray = response.calendarEvents;\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: calendarEventDescriptor value for the calendar date is 'Holiday'\", () => {\r",
											"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
											"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
											"\r",
											"        pm.environment.set(\"s2CalendarDateId\", latestCalendarDate.id);\r",
											"        console.log('s2CalendarDateId', pm.environment.get(\"s2CalendarDateId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s2CalendarDateId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendarDates",
										"{{s2CalendarDateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-10-06`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: beginDate value for the grading period is \" + currentYear + \"-10-06\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-10-06' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-10-06`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: gradingPeriodDescriptor value for the grading period is 'Second Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'Second Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"Second Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-15`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: endDate value for the grading period is \" + currentYear + \"-12-15\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS2\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 30;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: periodSequence value for the grading period is '2'\", () => {\r",
											"    pm.expect(response.periodSequence, `'2' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s2GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s2GradingPeriodId', pm.environment.get(\"s2GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s2GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s2GradingPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Session request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: schoolId value for the session is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolYear value for the session is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
											"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-15`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: endDate value for the session is \" + currentYear + \"-12-15\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValueS2\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 88;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.gradingPeriods).to.be.an('array');\r",
											"\r",
											"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
											"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: 'First Six Weeks' as a grading period exists\", () => {\r",
											"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
											"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: 'Second Six Weeks' as a grading period exists\", () => {\r",
											"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
											"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Sessions and getting the ID of the latest session\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
											"        console.log('latestSessionDate', latestSessionDate);\r",
											"\r",
											"        pm.environment.set(\"s2SessionId\", latestSession.id);\r",
											"        console.log('s2SessionId', pm.environment.get(\"s2SessionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s2SessionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sessions",
										"{{s2SessionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 POST - Get Calendar",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Calendars and getting the ID of the calendar\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDate', latestCalendarDate);\r",
											"\r",
											"        pm.environment.set(\"s3CalendarId\", latestCalendar.id);\r",
											"        console.log('s3CalendarId', pm.environment.get(\"s3CalendarId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Calendar request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: calendarCode value for the calendar is '107SS111111'\", () => {\r",
											"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value for the calendar is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolYear value for the calendar is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: calendarTypeDescriptor value for the calendar is 'Student Specific'\", () => {\r",
											"    pm.expect(response.calendarTypeDescriptor, `'Student Specific' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"Student Specific\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s3CalendarId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendars",
										"{{s3CalendarId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Calendar Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Calendar dates request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateString = response.date;\r",
											"console.log(\"dateString\", dateString);\r",
											"\r",
											"let date = new Date(dateString);\r",
											"console.log(\"date\", date);\r",
											"\r",
											"let yearFromDate = date.getFullYear();\r",
											"let monthFromDate = date.getMonth() + 1;\r",
											"let dayFromDate = date.getDate();\r",
											"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"let currentDateTest = `${currentYear}-09-16`;\r",
											"\r",
											"let formattedDate = date.toISOString().split('T')[0];\r",
											"console.log(\"formattedDate\", formattedDate);\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: year of date value for the calendar dates is 9/16/\" + currentYear, () => {\r",
											"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 PUT: calendarCode value for the calendar is '107SS111111'\", () => {\r",
											"    pm.expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"107SS111111\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolId value for the calendar is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: schoolYear value for the calendar date is \" + currentYear, () => {\r",
											"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let certCalendarEvents = [\r",
											"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Instructional day\" },\r",
											"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Student late arrival/early dismissal\" }\r",
											"];\r",
											"let calendarEventDescriptorArray = response.calendarEvents;\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: calendarEventDescriptor values for the calendar date are 'Instructional day', and 'Student late arrival/early dismissal'\", () => {\r",
											"    let calendarEventDescriptors = calendarEventDescriptorArray.map(item => item.calendarEventDescriptor);\r",
											"    certCalendarEvents.forEach(expected => {\r",
											"        let calendarEventFound = calendarEventDescriptors.includes(expected.calendarEventDescriptor);\r",
											"        pm.expect(calendarEventFound, `'${expected.calendarEventDescriptor}' were not completely found. These are the values found: ${JSON.stringify(calendarEventDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
											"\r",
											"        pm.environment.set(\"s3CalendarDateId\", latestCalendarDate.id);\r",
											"        console.log('s3CalendarDateId', pm.environment.get(\"s3CalendarDateId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s1CalendarDateId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendarDates",
										"{{s1CalendarDateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 POST - Get Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: schoolId value for the grading period dates is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 3 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 3 POST: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 POST: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-10-04`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 3 POST: endDate value for the grading period is \" + currentYear + \"-10-04\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-10-04' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-04`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS3\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 29;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 3 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 POST: periodSequence value for the grading period is '1'\", () => {\r",
											"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s3GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s3GradingPeriodId', pm.environment.get(\"s3GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s3GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s3GradingPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 POST - Get Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Session request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: schoolId value for the session is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolYear value for the session is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
											"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-16`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: endDate value for the session is \" + currentYear + \"-12-16\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-16' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValue\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 89;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.gradingPeriods).to.be.an('array');\r",
											"\r",
											"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
											"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: 'First Six Weeks' as a grading period exists\", () => {\r",
											"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
											"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: 'Second Six Weeks' as a grading period exists\", () => {\r",
											"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
											"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901107' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901107);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Sessions and getting the ID of the latest session\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
											"        console.log('latestSessionDate', latestSessionDate);\r",
											"\r",
											"        pm.environment.set(\"s3SessionId\", latestSession.id);\r",
											"        console.log('s3SessionId', pm.environment.get(\"s3SessionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s3SessionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sessions",
										"{{s3SessionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 POST - Get Calendar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Calendar request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: calendarCode value for the calendar is 'IEP001'\", () => {\r",
											"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value for the calendar is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolYear value for the calendar is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: calendarTypeDescriptor value for the calendar is 'IEP'\", () => {\r",
											"    pm.expect(response.calendarTypeDescriptor, `'IEP' was not found in the schoolYear property. Retrieved value is '${response.calendarTypeDescriptor}'`).to.contain(\"IEP\");\r",
											"});\r",
											"\r",
											"let certGradeLevels = [\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Ninth grade\" },\r",
											"    { \"gradeLevelDescriptor\": \"uri://ed-fi.org/GradeLevelDescriptor#Tenth grade\" }\r",
											"];\r",
											"let gradeLevelDescriptorArray = response.gradeLevels;\r",
											"\r",
											"pm.test(\"06 - Scenario 4 puT: gradeLevelDescriptor value for the school contains 'Ninth grade'\", () =>{\r",
											"    let gradeLevelDescriptors = gradeLevelDescriptorArray.map(item => item.gradeLevelDescriptor);\r",
											"    certGradeLevels.forEach(expected => {\r",
											"        let gradeLevelFound = gradeLevelDescriptors.includes(expected.gradeLevelDescriptor);\r",
											"        pm.expect(gradeLevelFound, `'${expected.gradeLevelDescriptor}' were not completely found. These are the values found: ${JSON.stringify(gradeLevelDescriptors)}`).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Calendars and getting the ID of the calendar\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendars`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendar = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDate = latestCalendar ? latestCalendar._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDate', latestCalendarDate);\r",
											"\r",
											"        pm.environment.set(\"s4CalendarId\", latestCalendar.id);\r",
											"        console.log('s4CalendarId', pm.environment.get(\"s4CalendarId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendars/{{s4CalendarId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendars",
										"{{s4CalendarId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Calendar Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Calendar datesrequest has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateString = response.date;\r",
											"console.log(\"dateString\", dateString);\r",
											"\r",
											"let date = new Date(dateString);\r",
											"console.log(\"date\", date);\r",
											"\r",
											"let yearFromDate = date.getFullYear();\r",
											"let monthFromDate = date.getMonth() + 1;\r",
											"let dayFromDate = date.getDate();\r",
											"console.log(\"yearFromDate: \", yearFromDate, \" || monthFromDate: \", monthFromDate, \" || dayFromDate: \", dayFromDate);\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"let currentDateTest = `${currentYear}-09-16`;\r",
											"\r",
											"let formattedDate = date.toISOString().split('T')[0];\r",
											"console.log(\"formattedDate\", formattedDate);\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: year of date value for the calendar dates is \" + currentYear + \"-09-16\", () => {\r",
											"    pm.expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: calendarCode value for the calendar is 'IEP001'\", () => {\r",
											"    pm.expect(response.calendarCode, `'IEP001' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql(\"IEP001\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolId value for the calendar is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: schoolYear value for the calendar date is \" + currentYear, () => {\r",
											"    pm.expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let certCalendarEventDescriptor= [\r",
											"    { \"calendarEventDescriptor\": \"uri://ed-fi.org/CalendarEventDescriptor#Holiday\" }\r",
											"];\r",
											"let calendarEventDescriptorArray = response.calendarEvents;\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: calendarEventDescriptor value for the calendar date is 'Instructional Day'\", () => {\r",
											"    let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes(\"Holiday\"));\r",
											"    pm.expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Calendar Dates and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/calendarDates`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;\r",
											"        console.log('latestCalendarDateDate', latestCalendarDateDate);\r",
											"\r",
											"        pm.environment.set(\"s4CalendarDateId\", latestCalendarDate.id);\r",
											"        console.log('s4CalendarDateId', pm.environment.get(\"s4CalendarDateId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/calendarDates/{{s4CalendarDateId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"calendarDates",
										"{{s4CalendarDateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 POST - Get Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 POST: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 POST: schoolId value for the grading period dates is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 4 POST: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-10-06`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 4 POST: beginDate value for the grading period is \" + currentYear + \"-10-06\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-10-06' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-10-06`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 POST: gradingPeriodDescriptor value for the grading period is 'Second Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'Second Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"Second Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-15`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 4 POST: endDate value for the grading period is \" + currentYear + \"-12-15\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-15' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS4\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 30;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 4 POST: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 POST: periodSequence value for the grading period is '2'\", () => {\r",
											"    pm.expect(response.periodSequence, `'2' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s4GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s4GradingPeriodId', pm.environment.get(\"s4GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s4GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s4GradingPeriodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 POST - Get Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Session request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: schoolId value for the session is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolYear value for the session is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: termDescriptor value for the session is 'Fall Semester'\", () =>{\r",
											"    pm.expect(response.termDescriptor, `'Fall Semester' was not found in the termDescriptor property. Retrieved value is '${response.termDescriptor}'`).to.include(\"Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sessionName for the session is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: beginDate value for the session is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-12-16`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: endDate value for the session is \" + currentYear + \"-12-16\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-12-16' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-12-15`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSessionSystemValueS2\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 89;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: totalInstructionalDays value for the session is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.expect(response.gradingPeriods).to.be.an('array');\r",
											"\r",
											"let firstGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks\";\r",
											"let secondGradingPeriodDescriptor = \"uri://ed-fi.org/GradingPeriodDescriptor#Second Six Weeks\";\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: 'First Six Weeks' as a grading period exists\", () => {\r",
											"    let firstSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === firstGradingPeriodDescriptor);\r",
											"    pm.expect(firstSixWeeks, \"'First Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(firstSixWeeks.gradingPeriodReference.periodSequence, `'1' was not found in the periodSequence property for this Grading Period. Retrieved value is '${firstSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: 'Second Six Weeks' as a grading period exists\", () => {\r",
											"    let secondSixWeeks = response.gradingPeriods.find(gp => gp.gradingPeriodReference.gradingPeriodDescriptor === secondGradingPeriodDescriptor);\r",
											"    pm.expect(secondSixWeeks, \"'Second Six Weeks' was not found in the grading periods. Please take a look on the response body for more information regarding the Grading Periods for this Session\").to.not.be.undefined;\r",
											"\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolId, `'255901001' was not found in the schoolId property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolId}'`).to.eql(255901001);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.schoolYear, `'${currentYear}' was not found in the schoolYear property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.schoolYear}'`).to.eql(currentYear);\r",
											"    pm.expect(secondSixWeeks.gradingPeriodReference.periodSequence, `'2' was not found in the periodSequence property for this Grading Period. Retrieved value is '${secondSixWeeks.gradingPeriodReference.periodSequence}'`).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Sessions and getting the ID of the latest session\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sessions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestSession = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestSessionDate = latestSession ? latestSession._lastModifiedDate : null;\r",
											"        console.log('latestSessionDate', latestSessionDate);\r",
											"\r",
											"        pm.environment.set(\"s4SessionId\", latestSession.id);\r",
											"        console.log('s4SessionId', pm.environment.get(\"s4SessionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sessions/{{s4SessionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sessions",
										"{{s4SessionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": [
						{
							"name": "Scenario 5 PUT - Get Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 5 PUT: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 5 PUT: schoolId value for the grading period dates is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 5 PUT: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 5 PUT: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 5 PUT: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-10-05`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 5 PUT: endDate value for the grading period is \" + currentYear + \"-10-05\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-10-05' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-05`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS1\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 30;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 5 PUT: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 5 PUT: periodSequence value for the grading period is '1'\", () => {\r",
											"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s5GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s5GradingPeriodId', pm.environment.get(\"s5GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s5GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s5GradingPeriodId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 6",
					"item": [
						{
							"name": "Scenario 6 PUT - Get Grading Period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 6 PUT: Test that Grading period request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 6 PUT: schoolId value for the grading period dates is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901001');\r",
											"});\r",
											"\r",
											"let currentYear = new Date().getFullYear();\r",
											"console.log(\"currentYear\", currentYear);\r",
											"\r",
											"pm.test(\"03 - Scenario 6 PUT: schoolYear value for the grading period is \" + currentYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);\r",
											"});\r",
											"\r",
											"let beginDateString = response.beginDate;\r",
											"console.log(\"beginDateString\", beginDateString);\r",
											"\r",
											"let testBeginDate = new Date(beginDateString);\r",
											"console.log(\"testBeginDate\", testBeginDate);\r",
											"\r",
											"let yearFromBeginDate = testBeginDate.getFullYear();\r",
											"let monthFromBeginDate = testBeginDate.getMonth() + 1;\r",
											"let dayFromBeginDate = testBeginDate.getDate();\r",
											"console.log(\"yearFromBeginDate: \", yearFromBeginDate, \" || monthFromBeginDate: \", monthFromBeginDate, \" || dayFromBeginDate: \", dayFromBeginDate);\r",
											"\r",
											"let currentTestBeginDate = `${currentYear}-08-23`;\r",
											"\r",
											"let formattedBeginDate = testBeginDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedBeginDate\", formattedBeginDate);\r",
											"\r",
											"pm.test(\"04 - Scenario 6 PUT: beginDate value for the grading period is \" + currentYear + \"-08-23\", () => {\r",
											"    pm.expect(formattedBeginDate, `'${currentYear}-08-23' was not found in the beginDate property. Retrieved value is: ${formattedBeginDate}`).to.eql(`${currentYear}-08-23`);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 6 PUT: gradingPeriodDescriptor value for the grading period is 'First Six Weeks'\", () =>{\r",
											"    pm.expect(response.gradingPeriodDescriptor, `'First Six Weeks' was not found in the gradingPeriodDescriptor property. Retrieved value is: ${response.gradingPeriodDescriptor}`).to.contain(\"First Six Weeks\");\r",
											"});\r",
											"\r",
											"let endDateString = response.endDate;\r",
											"console.log(\"endDateString\", endDateString);\r",
											"\r",
											"let testEndDate = new Date(endDateString);\r",
											"console.log(\"testEndDate\", testEndDate);\r",
											"\r",
											"let yearFromEndDate = testEndDate.getFullYear();\r",
											"let monthFromEndDate = testEndDate.getMonth() + 1;\r",
											"let dayFromEndDate = testEndDate.getDate();\r",
											"console.log(\"yearFromEndDate: \", yearFromEndDate, \" || monthFromEndDate: \", monthFromEndDate, \" || dayFromEndDate: \", dayFromEndDate);\r",
											"\r",
											"let currentTestEndDate = `${currentYear}-10-05`;\r",
											"\r",
											"let formattedEndDate = testEndDate.toISOString().split('T')[0];\r",
											"console.log(\"formattedEndDate\", formattedEndDate);\r",
											"\r",
											"pm.test(\"06 - Scenario 6 PUT: endDate value for the grading period is \" + currentYear + \"-10-05\", () => {\r",
											"    pm.expect(formattedEndDate, `'${currentYear}-10-05' was not found in the endDate property. Retrieved value is: ${formattedEndDate}`).to.eql(`${currentYear}-10-05`);\r",
											"});\r",
											"\r",
											"let totalInstructionalDaysSystemValue = pm.environment.get(\"totalInstructionalDaysSystemValueS3\");\r",
											"let statementTotalInstructionalDays = 0;\r",
											"\r",
											"if (totalInstructionalDaysSystemValue === \"\" || totalInstructionalDaysSystemValue === null) {\r",
											"    statementTotalInstructionalDays = 30;\r",
											"} else {\r",
											"    statementTotalInstructionalDays = totalInstructionalDaysSystemValue + 1;\r",
											"}\r",
											"console.log(\"statementTotalInstructionalDays\", statementTotalInstructionalDays);\r",
											"\r",
											"pm.test(\"07 - Scenario 6 PUT: totalInstructionalDays value for the grading period is \" + statementTotalInstructionalDays , () =>{\r",
											"    pm.expect(response.totalInstructionalDays).to.eql(statementTotalInstructionalDays, `'${statementTotalInstructionalDays}' was not found in the totalInstructionalDays property. Retrieved value is: '${response.totalInstructionalDays}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 6 PUT: periodSequence value for the grading period is '1'\", () => {\r",
											"    pm.expect(response.periodSequence, `'1' was not found in the periodSequence property. Retrieved value is '${response.periodSequence}'`).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request of Grading Periods and getting the ID of the latest calendar date\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/gradingPeriods`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGradingPeriod = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradingPeriodDate = latestGradingPeriod ? latestGradingPeriod._lastModifiedDate : null;\r",
											"        console.log('latestGradingPeriodDate', latestGradingPeriodDate);\r",
											"\r",
											"        pm.environment.set(\"s6GradingPeriodId\", latestGradingPeriod.id);\r",
											"        console.log('s6GradingPeriodId', pm.environment.get(\"s6GradingPeriodId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/gradingPeriods/{{s6GradingPeriodId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"gradingPeriods",
										"{{s6GradingPeriodId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "03-MasterSchedule",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Bell Schedule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s1BellScheduleId\", latestBellSchedule.id);\r",
											"        console.log('s1BellScheduleId', pm.environment.get(\"s1BellScheduleId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Bell Schedule request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: bellScheduleName value for the bell schedule is 'Normal Schedule A'\", () => {\r",
											"    pm.expect(response.bellScheduleName, `'Normal Schedule A' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule A\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value for the bell schedule is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 1'\", () => {\r",
											"    let classPeriod1 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 1\"));\r",
											"\r",
											"    console.log(\"classPeriod1\", classPeriod1);\r",
											"\r",
											"    pm.expect(classPeriod1, `'Class Period 1' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console. Retrieved value is '${classPeriod1}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 2'\", () => {\r",
											"    let classPeriod2 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 2\"));\r",
											"\r",
											"    console.log(\"classPeriod2\", classPeriod2);\r",
											"\r",
											"    pm.expect(classPeriod2, `'Class Period 2' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console. '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: classPeriodName value for the bell schedule is 'Class Period 3'\", () => {\r",
											"    let classPeriod3 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 3\"));\r",
											"\r",
											"    console.log(\"classPeriod3\", classPeriod3);\r",
											"\r",
											"    pm.expect(classPeriod3, `'Class Period 3' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: alternateDayName value for the bell schedule is 'A'\", () => {\r",
											"    pm.expect(response.alternateDayName, `'A' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"A\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s1BellScheduleId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"bellSchedules",
										"{{s1BellScheduleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Course Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Course Offering request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: courseCode value for the course offering is 'ELA-01'\", () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'ELA-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ELA-01\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from course reference for the course offering  is '255901107'\", () =>{\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolId value from school reference for the course offering is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
											"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: schoolId value from session reference for the course offering is '255901107'\", () =>{\r",
											"    pm.expect(response.sessionReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: localCourseTitle value from session reference for the course offering is 'English Language Arts GB Elementary'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'English Language Arts GB Elementary' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"English Language Arts GB Elementary\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: localCourseCode value from session reference for the course offering is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.localCourseTitle, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(statementLocalCourseCode);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s1CourseOfferingId\", latestCourseOffering.id);\r",
											"        console.log('s1CourseOfferingId', pm.environment.get(\"s1CourseOfferingId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s1CourseOfferingId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseOfferings",
										"{{s1CourseOfferingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Section request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValue = pm.environment.get(\"classPeriodSystemValue\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValue === \"\" || classPeriodSystemValue === null) {\r",
											"    statementClassPeriodName = \"Class Period 01\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValue;\r",
											"}\r",
											"\r",
											"let expectedClassPeriodName = statementClassPeriodName;\r",
											"let expectedSchoolID = 255901107;\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
											"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
											"    console.log(\"classPeriod\", classPeriod);\r",
											"\r",
											"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
											"    let foundValidPeriod = false\r",
											"\r",
											"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
											"        let classPeriodItem = classPeriodsArray[i];\r",
											"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
											"        console.log(\"schoolId\", schoolId);\r",
											"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
											"        console.log(\"classPeriodName\", classPeriodName);\r",
											"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
											"            foundValidPeriod = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
											"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: schoolId value from course offering reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"let locationSystemValue = pm.environment.get(\"locationSystemValue\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValue === \"\" || locationSystemValue === null) {\r",
											"    statementclassroomIdentificationCode = \"501\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: schoolId value from location reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.locationReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: schoolId value from location school reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.locationSchoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: sequenceOfCourse value for the section is '1'\", () =>{\r",
											"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
											"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 1 POST: availableCredits value for the section is '1'\", () =>{\r",
											"    pm.expect(response.availableCredits, `'1' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 1 POST: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
											"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Sections and getting the ID of the section\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s1SectionId\", latestCourseOffering.id);\r",
											"        console.log('s1SectionId', pm.environment.get(\"s1SectionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s1SectionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sections",
										"{{s1SectionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Bell Schedule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s2BellScheduleId\", latestBellSchedule.id);\r",
											"        console.log('s2BellScheduleId', pm.environment.get(\"s2BellScheduleId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Bell Schedule request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: bellScheduleName value for the bell schedule is 'Normal Schedule B'\", () => {\r",
											"    pm.expect(response.bellScheduleName, `'Normal Schedule B' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule B\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value for the bell schedule is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 4'\", () => {\r",
											"    let classPeriod4 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 4\"));\r",
											"\r",
											"    console.log(\"classPeriod4\", classPeriod4);\r",
											"\r",
											"    pm.expect(classPeriod4, `'Class Period 4' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 5'\", () => {\r",
											"    let classPeriod5 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 5\"));\r",
											"\r",
											"    console.log(\"classPeriod5\", classPeriod5);\r",
											"\r",
											"    pm.expect(classPeriod5, `'Class Period 5' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: classPeriodName value for the bell schedule is 'Class Period 6'\", () => {\r",
											"    let classPeriod6 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 6\"));\r",
											"\r",
											"    console.log(\"classPeriod6\", classPeriod6);\r",
											"\r",
											"    pm.expect(classPeriod6, `'Class Period 6' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: alternateDayName value for the bell schedule is 'B'\", () => {\r",
											"    pm.expect(response.alternateDayName, `'B' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"B\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s2BellScheduleId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"bellSchedules",
										"{{s2BellScheduleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Course Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Course Offering request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: courseCode value for the course offering is 'ALG-01'\", () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'ALG-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ALG-01\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value from course reference for the course offering  is '255901001'\", () =>{\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolId value from school reference for the course offering is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
											"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: schoolId value from session reference for the course offering is '255901001'\", () =>{\r",
											"    pm.expect(response.sessionReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: localCourseTitle value from session reference for the course offering is 'Algebra 02 GBHS'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'Algebra 02 GBHS' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"Algebra 02 GBHS\");\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: localCourseCode value from session reference for the course offering is 'ALG-2'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'ALG-2' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"ALG-2\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s2CourseOfferingId\", latestCourseOffering.id);\r",
											"        console.log('s2CourseOfferingId', pm.environment.get(\"s2CourseOfferingId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s2CourseOfferingId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseOfferings",
										"{{s2CourseOfferingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Section request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValueS2 = pm.environment.get(\"classPeriodSystemValueS2\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValueS2 === \"\" || classPeriodSystemValueS2 === null) {\r",
											"    statementClassPeriodName = \"Class Period 01\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValueS2;\r",
											"}\r",
											"\r",
											"let expectedClassPeriodName = statementClassPeriodName;\r",
											"let expectedSchoolID = 255901001;\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
											"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
											"    console.log(\"classPeriod\", classPeriod);\r",
											"\r",
											"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
											"    let foundValidPeriod = false\r",
											"\r",
											"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
											"        let classPeriodItem = classPeriodsArray[i];\r",
											"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
											"        console.log(\"schoolId\", schoolId);\r",
											"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
											"        console.log(\"classPeriodName\", classPeriodName);\r",
											"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
											"            foundValidPeriod = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
											"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
											"    statementLocalCourseCode = \"ALG-21\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS2;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: schoolId value from course offering reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"let locationSystemValueS2 = pm.environment.get(\"locationSystemValueS2\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValueS2 === \"\" || locationSystemValueS2 === null) {\r",
											"    statementclassroomIdentificationCode = \"901\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: schoolId value from location reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.locationReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: schoolId value from location school reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.locationSchoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: sequenceOfCourse value for the section is '1'\", () =>{\r",
											"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS2 = pm.environment.get(\"sectionIdentifierSystemValueS2\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValueS2 === \"\" || sectionIdentifierSystemValueS2 === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
											"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 2 POST: availableCredits value for the section is '1'\", () =>{\r",
											"    pm.expect(response.availableCredits, `'1' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 2 POST: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
											"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Sections and getting the ID of the section\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s2SectionId\", latestCourseOffering.id);\r",
											"        console.log('s2SectionId', pm.environment.get(\"s2SectionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s2SectionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sections",
										"{{s2SectionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 POST - Get Bell Schedule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s3BellScheduleId\", latestBellSchedule.id);\r",
											"        console.log('s3BellScheduleId', pm.environment.get(\"s3BellScheduleId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Bell Schedule request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: bellScheduleName value for the bell schedule is 'Early Release A'\", () => {\r",
											"    pm.expect(response.bellScheduleName, `'Early Release A' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Early Release A\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value for the bell schedule is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray)\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: classPeriodName value for the bell schedule is 'Class Period 1'\", () => {\r",
											"    let classPeriod1 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 1\"));\r",
											"\r",
											"    console.log(\"classPeriod1\", classPeriod1);\r",
											"\r",
											"    pm.expect(classPeriod1, `'Class Period 1' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: classPeriodName value for the bell schedule is 'Class Period 2'\", () => {\r",
											"    let classPeriod2 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 2\"));\r",
											"\r",
											"    console.log(\"classPeriod2\", classPeriod2);\r",
											"\r",
											"    pm.expect(classPeriod2, `'Class Period 2' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: alternateDayName value for the bell schedule is 'A'\", () => {\r",
											"    pm.expect(response.alternateDayName, `'A' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"A\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s3BellScheduleId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"bellSchedules",
										"{{s3BellScheduleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT- Get Course Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Course Offering request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: courseCode value for the course offering is 'ELA-01'\", () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'ELA-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ELA-01\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value from course reference for the course offering  is '255901107'\", () =>{\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolId value from school reference for the course offering is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
											"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: schoolId value from session reference for the course offering is '255901107'\", () =>{\r",
											"    pm.expect(response.sessionReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: localCourseTitle value from session reference for the course offering is 'English Language Arts, Grade 1'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'English Language Arts, Grade 1' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"English Language Arts, Grade 1\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: localCourseCode value from session reference for the course offering is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.localCourseTitle, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(statementLocalCourseCode);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s3CourseOfferingId\", latestCourseOffering.id);\r",
											"        console.log('s3CourseOfferingId', pm.environment.get(\"s3CourseOfferingId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s3CourseOfferingId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseOfferings",
										"{{s3CourseOfferingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Section request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValueS3 = pm.environment.get(\"classPeriodSystemValueS3\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValueS3 === \"\" || classPeriodSystemValueS3 === null) {\r",
											"    statementClassPeriodName = \"Class Period 01\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValueS2;\r",
											"}\r",
											"\r",
											"let expectedClassPeriodName = statementClassPeriodName;\r",
											"let expectedSchoolID = 255901107;\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
											"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
											"    console.log(\"classPeriod\", classPeriod);\r",
											"\r",
											"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
											"    let foundValidPeriod = false\r",
											"\r",
											"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
											"        let classPeriodItem = classPeriodsArray[i];\r",
											"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
											"        console.log(\"schoolId\", schoolId);\r",
											"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
											"        console.log(\"classPeriodName\", classPeriodName);\r",
											"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
											"            foundValidPeriod = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
											"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS3;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: schoolId value from course offering reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"let locationSystemValueS3 = pm.environment.get(\"locationSystemValueS3\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValueS3 === \"\" || locationSystemValueS3 === null) {\r",
											"    statementclassroomIdentificationCode = \"501\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: schoolId value from location reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.locationReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: schoolId value from location school reference for the section is '255901107'\", () =>{\r",
											"    pm.expect(response.locationSchoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: sequenceOfCourse value for the section is '1'\", () =>{\r",
											"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"12 - Scenario 2 PUT: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
											"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 3 PUT: availableCredits value for the section is '2'\", () =>{\r",
											"    pm.expect(response.availableCredits, `'2' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 3 PUT: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
											"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Sections and getting the ID of the section\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s3SectionId\", latestCourseOffering.id);\r",
											"        console.log('s3SectionId', pm.environment.get(\"s3SectionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s3SectionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sections",
										"{{s3SectionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 POST - Get Bell Schedule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Bell Schedule and getting the ID of the bell schedule\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/bellSchedules`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s4BellScheduleId\", latestBellSchedule.id);\r",
											"        console.log('s4BellScheduleId', pm.environment.get(\"s4BellScheduleId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Bell Schedule request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: bellScheduleName value for the bell schedule is 'Normal Schedule B'\", () => {\r",
											"    pm.expect(response.bellScheduleName, `'Normal Schedule B' was not found in the bellScheduleName property. Retrieved value is '${response.bellScheduleName}'`).to.eql(\"Normal Schedule B\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value for the bell schedule is '255901107'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: classPeriodName value for the bell schedule is 'Class Period 4'\", () => {\r",
											"    let classPeriod4 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 4\"));\r",
											"\r",
											"    console.log(\"classPeriod4\", classPeriod4);\r",
											"\r",
											"    pm.expect(classPeriod4, `'Class Period 4' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: classPeriodName value for the bell schedule is 'Class Period 5'\", () => {\r",
											"    let classPeriod5 = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 5\"));\r",
											"\r",
											"    console.log(\"classPeriod5\", classPeriod5);\r",
											"\r",
											"    pm.expect(classPeriod5, `'Class Period 5' was not found in any of the class period references. Please take a look at the response. For additional information take a look at the console.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: alternateDayName value for the bell schedule is 'B'\", () => {\r",
											"    pm.expect(response.alternateDayName, `'B' was not found in the alternateDayName property. Retrieved value is '${response.alternateDayName}'`).to.eql(\"B\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/bellSchedules/{{s4BellScheduleId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"bellSchedules",
										"{{s4BellScheduleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Course Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Course Offering request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: courseCode value for the course offering is 'ALG-01'\", () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'ALG-01' was not found in the courseCode property. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(\"ALG-01\");\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value from course reference for the course offering  is '255901001'\", () =>{\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolId value from school reference for the course offering is '255901001'\", () =>{\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sessionName value of course reference for the course offering is '2016-2017 Fall Semester'\", () =>{\r",
											"    pm.expect(response.sessionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: schoolId value from session reference for the course offering is '255901001'\", () =>{\r",
											"    pm.expect(response.sessionReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: schoolYear value from session reference for the course offering is \" + currentYear, () =>{\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${currentYear}' was not found in the schoolYear property. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(currentYear);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: localCourseTitle value from session reference for the course offering is 'Algebra II'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'Algebra II' was not found in the localCourseTitle property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"Algebra II\");\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: localCourseCode value from session reference for the course offering is 'ALG-2'\", () =>{\r",
											"    pm.expect(response.localCourseTitle, `'ALG-2' was not found in the localCourseCode property. Retrieved value is '${response.localCourseTitle}'`).to.eql(\"ALG-2\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Offerings and getting the ID of the course offering\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseOfferings`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s4CourseOfferingId\", latestCourseOffering.id);\r",
											"        console.log('s4CourseOfferingId', pm.environment.get(\"s4CourseOfferingId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseOfferings/{{s4CourseOfferingId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseOfferings",
										"{{s4CourseOfferingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Section request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let classPeriodSystemValueS4 = pm.environment.get(\"classPeriodSystemValueS4\");\r",
											"let statementClassPeriodName = \"\";\r",
											"\r",
											"if (classPeriodSystemValueS4 === \"\" || classPeriodSystemValueS4 === null) {\r",
											"    statementClassPeriodName = \"Class Period 01\";\r",
											"} else {\r",
											"    statementClassPeriodName = classPeriodSystemValueS4;\r",
											"}\r",
											"\r",
											"let expectedClassPeriodName = statementClassPeriodName;\r",
											"let expectedSchoolID = 255901001;\r",
											"\r",
											"pm.expect(response.classPeriods).to.be.an(\"array\");\r",
											"let classPeriodsArray = response.classPeriods;\r",
											"console.log(\"classPeriodsArray\",classPeriodsArray);\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: classPeriodName value for the school is \" + statementClassPeriodName, () => {\r",
											"    let classPeriod = classPeriodsArray.some(item =>  item.classPeriodReference.classPeriodName.includes(\"Class Period 01\"));\r",
											"    console.log(\"classPeriod\", classPeriod);\r",
											"\r",
											"    pm.expect(classPeriod, `'${statementClassPeriodName}' was not found in any of the class period references. Retrieved value is '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}'. Please take a look at the response for additional information .`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value from the class period for the section is \" + expectedSchoolID, () => {\r",
											"    let foundValidPeriod = false\r",
											"\r",
											"    for (let i = 0; i < classPeriodsArray.length; i++) {\r",
											"        let classPeriodItem = classPeriodsArray[i];\r",
											"        let schoolId = classPeriodItem.classPeriodReference.schoolId\r",
											"        console.log(\"schoolId\", schoolId);\r",
											"        let classPeriodName = classPeriodItem.classPeriodReference.classPeriodName;\r",
											"        console.log(\"classPeriodName\", classPeriodName);\r",
											"        if ((schoolId === expectedSchoolID) && (classPeriodName === statementClassPeriodName)) {\r",
											"            foundValidPeriod = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidPeriod, `Expected classPeriodName '${expectedClassPeriodName}' with schoolID '${expectedSchoolID}', but found '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.classPeriodName))}' with '${JSON.stringify(classPeriodsArray.map(item => item.classPeriodReference.schoolId))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: sessionName value for the section is '2016-2017 Fall Semester\",  () => {\r",
											"    pm.expect(response.courseOfferingReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property. Retrieved value is '${response.courseOfferingReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
											"    statementLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS4;\r",
											"}\r",
											"console.log(\"statementLocalCourseCode\", statementLocalCourseCode);\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: localCourseCode value from course offering reference for the section is \" + statementLocalCourseCode, () =>{\r",
											"    pm.expect(response.courseOfferingReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property. Retrieved value is '${response.courseOfferingReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: schoolId value from course offering reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: schoolYear value from course offering reference for the section is '2017'\", () =>{\r",
											"    pm.expect(response.courseOfferingReference.schoolYear, `'2017' was not found in the schoolId property. Retrieved value is '${response.courseOfferingReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"let locationSystemValueS4 = pm.environment.get(\"locationSystemValueS4\");\r",
											"let statementclassroomIdentificationCode = \"\";\r",
											"\r",
											"if (locationSystemValueS4 === \"\" || locationSystemValueS4 === null) {\r",
											"    statementclassroomIdentificationCode = \"901\";\r",
											"} else {\r",
											"    statementclassroomIdentificationCode = locationSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT:classroomIdentificationCode value from location reference for the section is \" + statementclassroomIdentificationCode, () =>{\r",
											"    pm.expect(response.locationReference.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.locationReference.classroomIdentificationCode}'`);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 POST: schoolId value from location reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.locationReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: schoolId value from location school reference for the section is '255901001'\", () =>{\r",
											"    pm.expect(response.locationSchoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.locationSchoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 4 PUT: sequenceOfCourse value for the section is '1'\", () =>{\r",
											"    pm.expect(response.sequenceOfCourse, `'1' was not found in the sequenceOfCourse property. Retrieved value is '${response.sequenceOfCourse}'`).to.eql(1);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS4 = pm.environment.get(\"sectionIdentifierSystemValueS4\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValueS4 === \"\" || sectionIdentifierSystemValueS4 === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"12 - Scenario 4 PUT: sectionIdentifier value for the section is \" + statementSectionIdentifier, () =>{\r",
											"    pm.expect(response.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property. Retrieved value is '${response.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 4 PUT: availableCredits value for the section is '3'\", () =>{\r",
											"    pm.expect(response.availableCredits, `'3' was not found in the sectionIdentifier property. Retrieved value is '${response.availableCredits}'`).to.eql(3);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 4 PUT: educationalEnvironmentDescriptor value for the section is 'Classroom'\", () =>{\r",
											"    pm.expect(response.educationalEnvironmentDescriptor, `'Classroom' was not found in the sectionIdentifier property. Retrieved value is '${response.educationalEnvironmentDescriptor}'`).to.contain(\"Classroom\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Sections and getting the ID of the section\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/sections`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseOffering = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseOfferingDate = latestCourseOffering ? latestCourseOffering._lastModifiedDate : null;\r",
											"        console.log('latestCourseOfferingDate', latestCourseOfferingDate);\r",
											"\r",
											"        pm.environment.set(\"s4SectionId\", latestCourseOffering.id);\r",
											"        console.log('s4SectionId', pm.environment.get(\"s4SectionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/sections/{{s4SectionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"sections",
										"{{s4SectionId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "04-StaffAssociation",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Staff request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: firstName value for the staff is 'John'\", () => {\r",
											"    pm.expect(response.firstName, `'John' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"John\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: lastSurname value for the staff is 'Loyo'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Loyo' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Loyo\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: birthDate value for the staff is '1959-04-30'\", () => {\r",
											"    pm.expect(response.birthDate, `'1959-04-30' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1959-04-30\");\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: generationCodeSuffix value for the staff is 'Sr'\", () => {\r",
											"    pm.expect(response.generationCodeSuffix, `'Sr' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(\"Sr\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: highestCompletedLevelOfEducationDescriptor value for the staff is 'Master's'\", () => {\r",
											"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Master's' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Master's\");\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: sexDescriptor value for the staff is 'Male'\", () => {\r",
											"    pm.expect(response.sexDescriptor, `'Male' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Male\");\r",
											"});\r",
											"\r",
											"let expectedElectronicMailAddress = \"johnloyo@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
											"    let foundValidStaffElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundValidStaffElectronicMailAddress = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff and getting the ID of the staff\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s1StaffId\", latestBellSchedule.id);\r",
											"        console.log('s1StaffId', pm.environment.get(\"s1StaffId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s1StaffId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffs",
										"{{s1StaffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Staff Education Organization Assignment Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-01-02`;\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901107'\", () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901107' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
											"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
											"});\r",
											"\r",
											"let expectedEndDate = `${currentYear}-01-03`;\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: endDate value for the Staff Education Organization Assignment Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: positionTitle value for the Staff Education Organization Assignment Association is '1st Grade teacher'\", () => {\r",
											"    pm.expect(response.positionTitle, `'1st Grade teacher' value was not found for the positionTitle`).to.eql(\"1st Grade teacher\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s1staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
											"        console.log('s1staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s1staffEducationOrganizationAssignmentAssociationsId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s1staffEducationOrganizationAssignmentAssociationsId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffEducationOrganizationAssignmentAssociations",
										"{{s1staffEducationOrganizationAssignmentAssociationsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Staff School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Staff School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value for the Staff School Association is '255901107'\", () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901107' value was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: staffUniqueId value for the Staff School Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programAssignmentDescriptor value for the Staff School Association is 'Regular Education'\", () => {\r",
											"    pm.expect(response.programAssignmentDescriptor, `'Regular Education' was not flound in the programAssignmentDescriptor property. Retrieved value is '${response.programAssignmentDescriptor}'`).to.include(\"Regular Education\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff School Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s1staffSchoolAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s1staffSchoolAssociationId', pm.environment.get(\"s1staffSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSchoolAssociations/{{s1staffSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSchoolAssociations",
										"{{s1staffSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Staff Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Staff Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value for Staff Section Association is '255901107'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'255901107' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolYear value for Staff Section Association is '2017'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier;\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
											"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-31`;\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s1staffSectionAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s1staffSectionAssociationId', pm.environment.get(\"s1staffSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s1staffSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSectionAssociations",
										"{{s1staffSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Staff request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: firstName value for the staff is 'Jane'\", () => {\r",
											"    pm.expect(response.firstName, `'Jane' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"Jane\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: lastSurname value for the staff is 'Smith'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Smith' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Smith\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: birthDate value for the staff is '1973-07-20'\", () => {\r",
											"    pm.expect(response.birthDate, `'1973-07-20' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1973-07-20\");\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: highestCompletedLevelOfEducationDescriptor value for the staff is 'Doctorate'\", () => {\r",
											"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Doctorate' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Doctorate\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: middleName value for the staff is 'Marcy'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Marcy' was not found in the middleName property . Retrieved value is '${response.middleName}'`).to.eql(\"Marcy\");\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: sexDescriptor value for the staff is 'Female'\", () => {\r",
											"    pm.expect(response.sexDescriptor, `'Female' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Female\");\r",
											"});\r",
											"\r",
											"let expectedElectronicMailAddress = \"janesmith@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
											"    let foundValidStaffElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundValidStaffElectronicMailAddress = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff and getting the ID of the staff\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s2StaffId\", latestBellSchedule.id);\r",
											"        console.log('s2StaffId', pm.environment.get(\"s2StaffId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s2StaffId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffs",
										"{{s2StaffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Staff Education Organization Assignment Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-01`;\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901001'\", () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901001' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
											"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: positionTitle value for the Staff Education Organization Assignment Association is '9th Grade Teacher'\", () => {\r",
											"    pm.expect(response.positionTitle, `'9th Grade Teacher' value was not found for the positionTitle`).to.eql(\"9th Grade Teacher\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s2staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
											"        console.log('s2staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s2staffEducationOrganizationAssignmentAssociationsId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s2staffEducationOrganizationAssignmentAssociationsId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffEducationOrganizationAssignmentAssociations",
										"{{s2staffEducationOrganizationAssignmentAssociationsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Staff School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Staff School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: schoolId value for the Staff School Association is '255901001'\", () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'255901001' value was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    statementStaffUnique = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: staffUniqueId value for the Staff School Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: programAssignmentDescriptor value for the Staff School Association is 'Regular Education'\", () => {\r",
											"    pm.expect(response.programAssignmentDescriptor, `'Regular Education' was not flound in the programAssignmentDescriptor property. Retrieved value is '${response.programAssignmentDescriptor}'`).to.include(\"Regular Education\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Section Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s2staffSchoolAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s2staffSchoolAssociationId', pm.environment.get(\"s2staffSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSchoolAssociations/{{s2staffSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSchoolAssociations",
										"{{s2staffSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Staff Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Staff Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
											"    statementLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value for Staff Section Association is '255901001'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'255901001' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolYear value for Staff Section Association is '2017'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS2 = pm.environment.get(\"sectionIdentifierSystemValueS2\");\r",
											"let statementSectionIdentifier;\r",
											"\r",
											"if (sectionIdentifierSystemValueS2 === \"\" || sectionIdentifierSystemValueS2 === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
											"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-31`;\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s2staffSectionAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s2staffSectionAssociationId', pm.environment.get(\"s2staffSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s2staffSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSectionAssociations",
										"{{s2staffSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Staff request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: firstName value for the staff is 'John'\", () => {\r",
											"    pm.expect(response.firstName, `'John' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"John\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: hispanicLatinoEthnicity value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: lastSurname value for the staff is 'Loyo'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Loyo' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Loyo\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: birthDate value for the staff is '1959-04-30'\", () => {\r",
											"    pm.expect(response.birthDate, `'1959-04-30' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1959-04-30\");\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: generationCodeSuffix value for the staff is 'Sr'\", () => {\r",
											"    pm.expect(response.generationCodeSuffix, `'Sr' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(\"Sr\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: highestCompletedLevelOfEducationDescriptor value for the staff is 'Master's'\", () => {\r",
											"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Master's' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Master's\");\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: highlyQualifiedTeacher value for the staff is 'false'\", () => {\r",
											"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is true. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: sexDescriptor value for the staff is 'Male'\", () => {\r",
											"    pm.expect(response.sexDescriptor, `'Male' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Male\");\r",
											"});\r",
											"\r",
											"let expectedElectronicMailAddress = \"johnloyo@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
											"    let foundValidStaffElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundValidStaffElectronicMailAddress = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 PUT: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff and getting the ID of the staff\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s3StaffId\", latestBellSchedule.id);\r",
											"        console.log('s3StaffId', pm.environment.get(\"s3StaffId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s3StaffId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffs",
										"{{s3StaffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Staff Education Organization Assignment Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-01-01`;\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901107'\", () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901107' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
											"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: positionTitle value for the Staff Education Organization Assignment Association is '2nd Grade teacher'\", () => {\r",
											"    pm.expect(response.positionTitle, `'2nd Grade teacher' value was not found for the positionTitle`).to.eql(\"2nd Grade teacher\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s3staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
											"        console.log('s3staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s3staffEducationOrganizationAssignmentAssociationsId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s3staffEducationOrganizationAssignmentAssociationsId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffEducationOrganizationAssignmentAssociations",
										"{{s3staffEducationOrganizationAssignmentAssociationsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Staff Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Staff Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value for Staff Section Association is '255901107'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'255901107' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901107);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolYear value for Staff Section Association is '2017'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
											"let statementSectionIdentifier;\r",
											"\r",
											"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
											"    statementStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: classroomPositionDescriptor value for Staff Section Association is 'Assistant Teacher'\", () => {\r",
											"    pm.expect(response.classroomPositionDescriptor, `'Assistant Teacher' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Assistant Teacher\");\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-31`;\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s3staffSectionAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s3staffSectionAssociationId', pm.environment.get(\"s3staffSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s3staffSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSectionAssociations",
										"{{s3staffSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Staff request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: staffUniqueId value for the staff is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffUniqueId, `'${statementStaffUniqueId}'  was not found in the staffUniqueId property. Retrieved value is '${response.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: firstName value for the staff is 'Jane'\", () => {\r",
											"    pm.expect(response.firstName, `'Jane' was not found in the staffUniqueId property. Retrieved value is '${response.firstName}'`).to.eql(\"Jane\");\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: hispanicLatinoEthnicity value for the staff is 'false'\", () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'hispanicLatinoEthnicity' is true. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: lastSurname value for the staff is 'Smith'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Smith' was not found in the lastSurname property . Retrieved value is '${response.lastSurname}'`).to.eql(\"Smith\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: birthDate value for the staff is '1973-07-20'\", () => {\r",
											"    pm.expect(response.birthDate, `'1973-07-20' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(\"1973-07-20\");\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: highestCompletedLevelOfEducationDescriptor value for the staff is 'Doctorate'\", () => {\r",
											"    pm.expect(response.highestCompletedLevelOfEducationDescriptor, `'Doctorate' was not found in the highestCompletedLevelOfEducationDescriptor property. Retrieved value is '${response.highestCompletedLevelOfEducationDescriptor}'`).to.contain(\"Doctorate\");\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: highlyQualifiedTeacher value for the staff is 'true'\", () => {\r",
											"    pm.expect(response.highlyQualifiedTeacher, `'highlyQualifiedTeacher' is false. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: middleName value for the staff is 'Marcy'\", () => {\r",
											"    pm.expect(response.lastSurname, `'Marcy' was not found in the middleName property . Retrieved value is '${response.middleName}'`).to.eql(\"Marcy\");\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: sexDescriptor value for the staff is 'Female'\", () => {\r",
											"    pm.expect(response.sexDescriptor, `'Female' was not found in the sexDescriptor property. Retrieved value is '${response.sexDescriptor}'`).to.contain(\"Female\");\r",
											"});\r",
											"\r",
											"let expectedElectronicMailAddress = \"janesmith@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Work\";\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"11 - Scenario 4 PUT: electronicMailAddress value for the staff is \" + expectedElectronicMailAddress, ()=> {\r",
											"    let foundValidStaffElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundValidStaffElectronicMailAddress = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in any of the electronicMailAddress properties. Retrieved value(s) '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 4 PUT: electronicMailTypeDescriptor value for the staff is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundValidStaffElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundValidStaffElectronicMailTypeDescriptor = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundValidStaffElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' was not found with '${expectedElectronicMailAddress}'. But found '${JSON.stringify(electronicMailsArray)}'. Please take a look at the response for more information`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff and getting the ID of the staff\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffs`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s4StaffId\", latestBellSchedule.id);\r",
											"        console.log('s4StaffId', pm.environment.get(\"s4StaffId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffs/{{s4StaffId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffs",
										"{{s4StaffId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Staff Education Organization Assignment Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Staff Education Organization Assignment Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: staffUniqueId value for the Staff Education Organization Assignment Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-01`;\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: beginDate value for the Staff Education Organization Assignment Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: educationOrganizationId value for the Staff Education Organization Assignment Association is '255901001'\", () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'255901001' was not found in the educationOrganizationId property. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: staffClassificationDescriptor value for the Staff Education Organization Assignment Association is 'Teacher'\", () => {\r",
											"    pm.expect(response.staffClassificationDescriptor, `'Teacher' was not found in the staffClassificationDescriptor property. Retrieved value is '${response.staffClassificationDescriptor}'`).to.contain(\"Teacher\");\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: positionTitle value for the Staff Education Organization Assignment Association is '10th Grade Teacher'\", () => {\r",
											"    pm.expect(response.positionTitle, `'10th Grade Teacher' value was not found for the positionTitle`).to.eql(\"10th Grade Teacher\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Education Organization Assignment Association and getting the ID of the Staff Education Organization Assignment Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffEducationOrganizationAssignmentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s4staffEducationOrganizationAssignmentAssociationsId\", latestBellSchedule.id);\r",
											"        console.log('s4staffEducationOrganizationAssignmentAssociationsId', pm.environment.get(\"s4staffEducationOrganizationAssignmentAssociationsId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffEducationOrganizationAssignmentAssociations/{{s4staffEducationOrganizationAssignmentAssociationsId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffEducationOrganizationAssignmentAssociations",
										"{{s4staffEducationOrganizationAssignmentAssociationsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Staff Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Staff Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
											"let statementLocalCourseCode;\r",
											"\r",
											"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
											"    statementLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: localCourseCode value for Staff Section Association is \" + statementLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${statementLocalCourseCode}' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(statementLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value for Staff Section Association is '255901001'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'255901001' was not found in the localCourseCode property from the Section Reference. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(255901001);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolYear value for Staff Section Association is '2017'\", () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'2017' was not found in the schoolYear property from the Section Reference. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(2017);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sessionName value for Staff Section Association is '2016-2017 Fall Semester'\", () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'2016-2017 Fall Semester' was not found in the sessionName property from the Section Reference. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(\"2016-2017 Fall Semester\");\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS4 = pm.environment.get(\"sectionIdentifierSystemValueS4\");\r",
											"let statementSectionIdentifier;\r",
											"\r",
											"if (sectionIdentifierSystemValueS4 === \"\" || sectionIdentifierSystemValueS4 === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: sectionIdentifier value for Staff Section Association is \" + statementSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${statementSectionIdentifier}' was not found in the sectionIdentifier property from the Section Reference. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(statementSectionIdentifier);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
											"let statementStaffUniqueId;\r",
											"\r",
											"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
											"    statementStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    statementStaffUniqueId = staffUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: staffUniqueId value for Staff Section Association is \" + statementStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${statementStaffUniqueId}' was not found in the staffUniqueId property from the Section Reference. Retrieved value is '${response.staffReference.staffUniqueId}'`).to.eql(statementStaffUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: classroomPositionDescriptor value for Staff Section Association is 'Teacher of Record'\", () => {\r",
											"    pm.expect(response.classroomPositionDescriptor, `'Teacher of Record' was not found in the classroomPositionDescriptor property. Retrieved value is '${response.classroomPositionDescriptor}'`).to.contain(\"Teacher of Record\");\r",
											"});\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-09-01`;\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: beginDate value for Staff Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Section Association and getting the ID of the Staff Section Association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestBellSchedule = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestBellScheduleDate = latestBellSchedule ? latestBellSchedule._lastModifiedDate : null;\r",
											"        console.log('latestBellScheduleDate', latestBellScheduleDate);\r",
											"\r",
											"        pm.environment.set(\"s4staffSectionAssociationId\", latestBellSchedule.id);\r",
											"        console.log('s4staffSectionAssociationId', pm.environment.get(\"s4staffSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffSectionAssociations/{{s4staffSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffSectionAssociations",
										"{{s4staffSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "05-Student",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBirthCity = \"Grand Bend\";\r",
											"let expectedBirthCountryDescriptor = \"AG\";\r",
											"let expectedBirthDate = \"2009-01-01\";\r",
											"let expectedFirstName = \"Austin\";\r",
											"let expectedMiddleName = \"Samuel\";\r",
											"let expectedLastSurname = \"Jones\";\r",
											"let expectedGenerationCodeSuffix = \"JR\";\r",
											"let expectedPersonalTitlePrefix = \"Mr.\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: studentUniqueId value for the Student is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property. Retrieved value is '${response.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: birthCity value for the Student is \" + expectedBirthCity, () => {\r",
											"    pm.expect(response.birthCity, `'${expectedBirthCity}' was not found in the birthCity property. Retrieved value is '${response.birthCity}'`).to.eql(expectedBirthCity);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: birthCountryDescriptor value for the Student is \" + expectedBirthCountryDescriptor, () => {\r",
											"    pm.expect(response.birthCountryDescriptor, `${expectedBirthCountryDescriptor}' was not found in the birthCountryDescriptor property. Retrieved value is '${response.birthCountryDescriptor}'`).to.contain(expectedBirthCountryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: birthDate value for the Student is \" + expectedBirthDate, () => {\r",
											"    pm.expect(response.birthDate, `${expectedBirthDate}' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(expectedBirthDate);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: firstName value for the Student is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `${expectedFirstName}' was not found in the firstName property. Retrieved value is '${response.firstName}'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: middleName value for the Student is \" + expectedMiddleName, () => {\r",
											"    pm.expect(response.middleName, `${expectedMiddleName}' was not found in the middleName property. Retrieved value is '${response.middleName}'`).to.eql(expectedMiddleName);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: lastSurname value for the Student is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `${expectedLastSurname}' was not found in the lastSurname property. Retrieved value is '${response.lastSurname}'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: generationCodeSuffix value for the Student is \" + expectedGenerationCodeSuffix, () => {\r",
											"    pm.expect(response.generationCodeSuffix, `${expectedGenerationCodeSuffix}' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(expectedGenerationCodeSuffix);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: personalTitlePrefix value for the Student is \" + expectedPersonalTitlePrefix, () => {\r",
											"    pm.expect(response.personalTitlePrefix, `${expectedPersonalTitlePrefix}' was not found in the personalTitlePrefix property. Retrieved value is '${response.personalTitlePrefix}'`).to.eql(expectedPersonalTitlePrefix);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Students and getting the ID of the student\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/students`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDate = latestStudent ? latestStudent._lastModifiedDate : null;\r",
											"        console.log('latestStudentDate', latestStudentDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentId\", latestStudent.id);\r",
											"        console.log('s1StudentId', pm.environment.get(\"s1StudentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/students/{{s1StudentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"students",
										"{{s1StudentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedBirthCity = \"Grand Bend\";\r",
											"let expectedBirthCountryDescriptor = \"US\";\r",
											"let expectedBirthDate = \"2001-01-01\";\r",
											"let expectedFirstName = \"Madison\";\r",
											"let expectedMiddleName = \"Mary\";\r",
											"let expectedLastSurname = \"Johnson\";\r",
											"let expectedPersonalTitlePrefix = \"Ms.\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: studentUniqueId value for the Student is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property. Retrieved value is '${response.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: birthCity value for the Student is \" + expectedBirthCity, () => {\r",
											"    pm.expect(response.birthCity, `'${expectedBirthCity}' was not found in the birthCity property. Retrieved value is '${response.birthCity}'`).to.eql(expectedBirthCity);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: birthCountryDescriptor value for the Student is \" + expectedBirthCountryDescriptor, () => {\r",
											"    pm.expect(response.birthCountryDescriptor, `${expectedBirthCountryDescriptor}' was not found in the birthCountryDescriptor property. Retrieved value is '${response.birthCountryDescriptor}'`).to.contain(expectedBirthCountryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: birthDate value for the Student is \" + expectedBirthDate, () => {\r",
											"    pm.expect(response.birthDate, `${expectedBirthDate}' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(expectedBirthDate);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: firstName value for the Student is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `${expectedFirstName}' was not found in the firstName property. Retrieved value is '${response.firstName}'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: middleName value for the Student is \" + expectedMiddleName, () => {\r",
											"    pm.expect(response.middleName, `${expectedMiddleName}' was not found in the middleName property. Retrieved value is '${response.middleName}'`).to.eql(expectedMiddleName);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: lastSurname value for the Student is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `${expectedLastSurname}' was not found in the lastSurname property. Retrieved value is '${response.lastSurname}'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: personalTitlePrefix value for the Student is \" + expectedPersonalTitlePrefix, () => {\r",
											"    pm.expect(response.personalTitlePrefix, `${expectedPersonalTitlePrefix}' was not found in the personalTitlePrefix property. Retrieved value is '${response.personalTitlePrefix}'`).to.eql(expectedPersonalTitlePrefix);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Students and getting the ID of the student\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/students`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDate = latestStudent ? latestStudent._lastModifiedDate : null;\r",
											"        console.log('latestStudentDate', latestStudentDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentId\", latestStudent.id);\r",
											"        console.log('s2StudentId', pm.environment.get(\"s2StudentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/students/{{s2StudentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"students",
										"{{s2StudentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBirthCity = \"Grand Bend\";\r",
											"let expectedBirthCountryDescriptor = \"AG\";\r",
											"let expectedBirthDate = \"2009-01-02\";\r",
											"let expectedFirstName = \"Austin\";\r",
											"let expectedMiddleName = \"Samuel\";\r",
											"let expectedLastSurname = \"Jones\";\r",
											"let expectedGenerationCodeSuffix = \"JR\";\r",
											"let expectedPersonalTitlePrefix = \"Mr.\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: studentUniqueId value for the Student is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property. Retrieved value is '${response.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: birthCity value for the Student is \" + expectedBirthCity, () => {\r",
											"    pm.expect(response.birthCity, `'${expectedBirthCity}' was not found in the birthCity property. Retrieved value is '${response.birthCity}'`).to.eql(expectedBirthCity);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: birthCountryDescriptor value for the Student is \" + expectedBirthCountryDescriptor, () => {\r",
											"    pm.expect(response.birthCountryDescriptor, `${expectedBirthCountryDescriptor}' was not found in the birthCountryDescriptor property. Retrieved value is '${response.birthCountryDescriptor}'`).to.contain(expectedBirthCountryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: birthDate value for the Student is \" + expectedBirthDate, () => {\r",
											"    pm.expect(response.birthDate, `${expectedBirthDate}' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(expectedBirthDate);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: firstName value for the Student is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `${expectedFirstName}' was not found in the firstName property. Retrieved value is '${response.firstName}'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: middleName value for the Student is \" + expectedMiddleName, () => {\r",
											"    pm.expect(response.middleName, `${expectedMiddleName}' was not found in the middleName property. Retrieved value is '${response.middleName}'`).to.eql(expectedMiddleName);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: lastSurname value for the Student is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `${expectedLastSurname}' was not found in the lastSurname property. Retrieved value is '${response.lastSurname}'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: generationCodeSuffix value for the Student is \" + expectedGenerationCodeSuffix, () => {\r",
											"    pm.expect(response.generationCodeSuffix, `${expectedGenerationCodeSuffix}' was not found in the generationCodeSuffix property. Retrieved value is '${response.generationCodeSuffix}'`).to.eql(expectedGenerationCodeSuffix);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: personalTitlePrefix value for the Student is \" + expectedPersonalTitlePrefix, () => {\r",
											"    pm.expect(response.personalTitlePrefix, `${expectedPersonalTitlePrefix}' was not found in the personalTitlePrefix property. Retrieved value is '${response.personalTitlePrefix}'`).to.eql(expectedPersonalTitlePrefix);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Students and getting the ID of the student\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/students`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDate = latestStudent ? latestStudent._lastModifiedDate : null;\r",
											"        console.log('latestStudentDate', latestStudentDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentId\", latestStudent.id);\r",
											"        console.log('s3StudentId', pm.environment.get(\"s3StudentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/students/{{s3StudentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"students",
										"{{s3StudentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Student Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedBirthCity = \"Grand Oaks\";\r",
											"let expectedBirthCountryDescriptor = \"US\";\r",
											"let expectedBirthDate = \"2001-01-01\";\r",
											"let expectedFirstName = \"Madison\";\r",
											"let expectedMiddleName = \"Mary\";\r",
											"let expectedLastSurname = \"Johnson\";\r",
											"let expectedPersonalTitlePrefix = \"Ms.\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: studentUniqueId value for the Student is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property. Retrieved value is '${response.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: birthCity value for the Student is \" + expectedBirthCity, () => {\r",
											"    pm.expect(response.birthCity, `'${expectedBirthCity}' was not found in the birthCity property. Retrieved value is '${response.birthCity}'`).to.eql(expectedBirthCity);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: birthCountryDescriptor value for the Student is \" + expectedBirthCountryDescriptor, () => {\r",
											"    pm.expect(response.birthCountryDescriptor, `${expectedBirthCountryDescriptor}' was not found in the birthCountryDescriptor property. Retrieved value is '${response.birthCountryDescriptor}'`).to.contain(expectedBirthCountryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: birthDate value for the Student is \" + expectedBirthDate, () => {\r",
											"    pm.expect(response.birthDate, `${expectedBirthDate}' was not found in the birthDate property. Retrieved value is '${response.birthDate}'`).to.eql(expectedBirthDate);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: firstName value for the Student is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `${expectedFirstName}' was not found in the firstName property. Retrieved value is '${response.firstName}'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: middleName value for the Student is \" + expectedMiddleName, () => {\r",
											"    pm.expect(response.middleName, `${expectedMiddleName}' was not found in the middleName property. Retrieved value is '${response.middleName}'`).to.eql(expectedMiddleName);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: lastSurname value for the Student is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `${expectedLastSurname}' was not found in the lastSurname property. Retrieved value is '${response.lastSurname}'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: personalTitlePrefix value for the Student is \" + expectedPersonalTitlePrefix, () => {\r",
											"    pm.expect(response.personalTitlePrefix, `${expectedPersonalTitlePrefix}' was not found in the personalTitlePrefix property. Retrieved value is '${response.personalTitlePrefix}'`).to.eql(expectedPersonalTitlePrefix);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Students and getting the ID of the student\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/students`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDate = latestStudent ? latestStudent._lastModifiedDate : null;\r",
											"        console.log('latestStudentDate', latestStudentDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentId\", latestStudent.id);\r",
											"        console.log('s4StudentId', pm.environment.get(\"s4StudentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/students/{{s4StudentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"students",
										"{{s4StudentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "06-StudentEnrollment",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Graduation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Graduation Plan request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = 2020;\r",
											"let expectedTotalRequiredCredits = 28;\r",
											"let expectedGraduationPlanTypeDescriptor = \"Recommended\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value for the Graduation Plan is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId from educationOrganizationReference for the Graduation Plan. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolYear value for the Graduation Plan is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.graduationSchoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from graduationSchoolYearTypeReference for the Graduation Plan. Retrieved value is '${response.graduationSchoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: totalRequiredCredits value for the Graduation Plan is \" + expectedTotalRequiredCredits, () => {\r",
											"    pm.expect(response.totalRequiredCredits, `'${expectedTotalRequiredCredits}' was not found in the totalRequiredCredits property. Retrieved value is '${response.totalRequiredCredits}'`).to.eql(expectedTotalRequiredCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: graduationPlanTypeDescriptor value for the Graduation Plan is \" + expectedGraduationPlanTypeDescriptor, () => {\r",
											"    pm.expect(response.graduationPlanTypeDescriptor, `'${expectedGraduationPlanTypeDescriptor}' was not found in the graduationPlanTypeDescriptor property. Retrieved value is '${response.graduationPlanTypeDescriptor}'`).to.contain(expectedGraduationPlanTypeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Graduation Plans and getting the ID of the graduation plan\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/graduationPlans`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGraduationPlan = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGraduationPlanDate = latestGraduationPlan ? latestGraduationPlan._lastModifiedDate : null;\r",
											"        console.log('latestGraduationPlanDate', latestGraduationPlanDate);\r",
											"\r",
											"        pm.environment.set(\"s1GraduationPlanId\", latestGraduationPlan.id);\r",
											"        console.log('s1GraduationPlanId', pm.environment.get(\"s1GraduationPlanId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/graduationPlans/{{s1GraduationPlanId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"graduationPlans",
										"{{s1GraduationPlanId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEntryDate = `${currentYear}-08-31`;\r",
											"let expectedEntryGradeLevelDescriptor = \"First Grade\";\r",
											"let expectedEntryTypeDescriptor = \"Next year school\";\r",
											"let expectedExitWithdrawDate = `${currentYear}-09-01`;\r",
											"let expectedExitWithdrawTypeDescriptor = \"Transferred\";\r",
											"let expectedRepeatGradeIndicator = false;\r",
											"let expectedResidencyStatusDescriptor = \"Resident of admin unit and school area\";\r",
											"let expectedSchoolChoiceTransfer = false;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value for the Student School Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from the schoolReference for the Student School Association. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: studentUniqueId value for the Student School Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from the studentReference for the Student School Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: entryDate value for the Student School Association is \" + expectedEntryDate, () => {\r",
											"    pm.expect(response.entryDate, `'${expectedEntryDate}' was not found in the entryDate property for the Student School Association. Retrieved value is '${response.entryDate}'`).to.eql(expectedEntryDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: entryGradeLevelDescriptor value for the Student School Association is \" + expectedEntryGradeLevelDescriptor, () => {\r",
											"    pm.expect(response.entryGradeLevelDescriptor, `'${expectedEntryGradeLevelDescriptor}' was not found in the entryGradeLevelDescriptor property for the Student School Association. Retrieved value is '${response.entryGradeLevelDescriptor}'`).to.contain(expectedEntryGradeLevelDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: entryTypeDescriptor value for the Student School Association is \" + expectedEntryTypeDescriptor, () => {\r",
											"    pm.expect(response.entryTypeDescriptor, `'${expectedEntryTypeDescriptor}' was not found in the expectedEntryTypeDescriptor property for the Student School Association. Retrieved value is '${response.entryTypeDescriptor}'`).to.contain(expectedEntryTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: exitWithdrawDate value for the Student School Association is \" + expectedExitWithdrawDate, () => {\r",
											"    pm.expect(response.exitWithdrawDate, `'${expectedExitWithdrawDate}' was not found in the exitWithdrawDate property for the Student School Association. Retrieved value is '${response.exitWithdrawDate}'`).to.eql(expectedExitWithdrawDate);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: exitWithdrawTypeDescriptor value for the Student School Association is \" + expectedExitWithdrawTypeDescriptor, () => {\r",
											"    pm.expect(response.exitWithdrawTypeDescriptor, `'${expectedExitWithdrawTypeDescriptor}' was not found in the exitWithdrawTypeDescriptor property for the Student School Association. Retrieved value is '${response.exitWithdrawTypeDescriptor}'`).to.eql(expectedExitWithdrawTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: repeatGradeIndicator value for the Student School Association is \" + expectedRepeatGradeIndicator, () => {\r",
											"    pm.expect(response.repeatGradeIndicator, `'${expectedRepeatGradeIndicator}' was not found in the repeatGradeIndicator property for the Student School Association. Retrieved value is '${response.repeatGradeIndicator}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: residencyStatusDescriptor value for the Student School Association is \" + expectedResidencyStatusDescriptor, () => {\r",
											"    pm.expect(response.residencyStatusDescriptor, `'${expectedResidencyStatusDescriptor}' was not found in the residencyStatusDescriptor property for the Student School Association. Retrieved value is '${response.residencyStatusDescriptor}'`).to.contain(expectedResidencyStatusDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: schoolChoiceTransfer value for the Student School Association is \" + expectedSchoolChoiceTransfer, () => {\r",
											"    pm.expect(response.schoolChoiceTransfer, `'${expectedSchoolChoiceTransfer}' was not found in the schoolChoiceTransfer property for the Student School Association. Retrieved value is '${response.schoolChoiceTransfer}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAssociationDate = latestStudentSchoolAssociation ? latestStudentSchoolAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAssociationDate', latestStudentSchoolAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentSchoolAssociationId\", latestStudentSchoolAssociation.id);\r",
											"        console.log('s1StudentSchoolAssociationId', pm.environment.get(\"s1StudentSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s1StudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s1StudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Education Organization Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Education Organization Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901 ;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedLimitedEnglishProficiencyDescriptor = \"NotLimited\";\r",
											"let expectedStudentCharacteristicDescriptor = \"Immigrant\";\r",
											"let expectedAssigningOrganizationIdentificationCode1 = \"State\";\r",
											"let expectedAssigningOrganizationIdentificationCode2 = \"District\";\r",
											"let expectedAssigningOrganizationIdentificationCode3 = \"Local\";\r",
											"let expectedIdentificationCode1 = pm.environment.get(\"s1IdentificationCode1\");\r",
											"let expectedIdentificationCode2 = pm.environment.get(\"s1IdentificationCode2\");\r",
											"let expectedIdentificationCode3 = pm.environment.get(\"s1IdentificationCode3\");\r",
											"let expectedStudentIdentificationSystemDescriptor1 = \"State\";\r",
											"let expectedStudentIdentificationSystemDescriptor2 = \"District\";\r",
											"let expectedStudentIdentificationSystemDescriptor3 = \"Local\";\r",
											"let expectedSexDescriptor = \"Male\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"654 Mission Hills\";\r",
											"let expectedTelephoneNumber = \"(111) 222 3333\";\r",
											"let expectedTelephoneNumberTypeDescriptor = \"Home\";\r",
											"let expectedElectronicMailAddress = \"austin@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Other\";\r",
											"let expectedHispanicLatinoEthnicity = false;\r",
											"let expectedRaceDescriptor = \"Black - African American\";\r",
											"let expectedLanguageDescriptor = \"spa\";\r",
											"let expectedLanguageUseDescriptor = \"Home language\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value for the Student Education Organization Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from the educationOrganizationReference for the Student Education Organization Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: studentUniqueId value for the Student Education Organization Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from the studentReference for the Student Education Organization Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: limitedEnglishProficiencyDescriptor value for the Student Education Organization Association is \" + expectedLimitedEnglishProficiencyDescriptor, () => {\r",
											"    pm.expect(response.limitedEnglishProficiencyDescriptor, `'${expectedLimitedEnglishProficiencyDescriptor}' was not found in the limitedEnglishProficiencyDescriptor property for the Student Education Organization Association. Retrieved value is '${response.limitedEnglishProficiencyDescriptor}'`).to.include(expectedLimitedEnglishProficiencyDescriptor);\r",
											"});\r",
											"\r",
											"let studentCharacteristicsArray = response.studentCharacteristics;\r",
											"pm.expect(studentCharacteristicsArray).to.be.an(\"array\")\r",
											"pm.test(\"05 - Scenario 1 POST: studentCharacteristicDescriptor value for the Student Education Organization Association is \" + expectedStudentCharacteristicDescriptor, () => {\r",
											"    let foundStudentCharacteristicDescriptor = false;\r",
											"    for (let i = 0; i < studentCharacteristicsArray.length; i++) {\r",
											"        let studentCharacteristicDescriptorItem = studentCharacteristicsArray[i];\r",
											"        let studentCharacteristicDescriptor = studentCharacteristicDescriptorItem.studentCharacteristicDescriptor;\r",
											"        if (studentCharacteristicDescriptor.includes(expectedStudentCharacteristicDescriptor)) {\r",
											"            foundStudentCharacteristicDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundStudentCharacteristicDescriptor, `'${expectedStudentCharacteristicDescriptor}' was not found in the studentCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(studentCharacteristicsArray)}'. Please take a look at the response for more information.`).to.be.true;\r",
											"    }  \r",
											"});\r",
											"\r",
											"let studentIdentificationCodesArray = response.studentIdentificationCodes;\r",
											"pm.expect(studentIdentificationCodesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: assigningOrganizationIdentificationCode values for the Student Education Organization Association could be \" + expectedAssigningOrganizationIdentificationCode1 + \", \" + expectedAssigningOrganizationIdentificationCode2 + \" , or \" + expectedAssigningOrganizationIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode1 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode2 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedAssigningOrganizationIdentificationCode1}', '${expectedAssigningOrganizationIdentificationCode2}', or '${expectedAssigningOrganizationIdentificationCode3}' were not found in assigningOrganizationIdentificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.assigningOrganizationIdentificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: identificationCode values for the Student Education Organization Association could be \" + expectedIdentificationCode1 + \", \" + expectedIdentificationCode2 + \" , or \" + expectedIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.identificationCode === expectedIdentificationCode1 || item.identificationCode === expectedIdentificationCode2 || item.identificationCode === expectedIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedIdentificationCode1}', '${expectedIdentificationCode2}', or '${expectedIdentificationCode3}' were not found in identificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.identificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: studentIdentificationSystemDescriptor values for the Student Education Organization Association could be \" + expectedStudentIdentificationSystemDescriptor1 + \", \" + expectedStudentIdentificationSystemDescriptor2 + \" , or \" + expectedStudentIdentificationSystemDescriptor3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor1) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor2) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor3)) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedStudentIdentificationSystemDescriptor1}', '${expectedStudentIdentificationSystemDescriptor2}', or '${expectedStudentIdentificationSystemDescriptor3}' were not found in studentIdentificationSystemDescriptor from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.studentIdentificationSystemDescriptor))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: sexDescriptor value for the Student Education Organization Association is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Student Education Organization Association. Retrieved value is '${response.sexDescriptor}'`).to.contain(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: addressTypeDescriptor value for the Student Education Organization Association is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: city value for the Student Education Organization Association is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: postalCode value for the Student Education Organization Association is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 1 POST: stateAbbreviationDescriptor value for the Student Education Organization Association is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 1 POST: streetNumberName value for the Student Education Organization Association is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let telephonesArray = response.telephones;\r",
											"pm.expect(telephonesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"15 - Scenario 1 POST: telephoneNumber value for the Student Education Organization Association is \" + expectedTelephoneNumber, () => {\r",
											"    let foundTelephoneNumber = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let telephoneNumberItem = telephonesArray[i];\r",
											"        let telephoneNumber = telephoneNumberItem.telephoneNumber;\r",
											"        if (telephoneNumber === expectedTelephoneNumber) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"    pm.expect(foundTelephoneNumber, `'${expectedTelephoneNumber}' was not found in the foundTelephoneNumber property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 1 POST: telephoneNumberTypeDescriptor value for the Student Education Organization Association is \" + expectedTelephoneNumberTypeDescriptor, () => {\r",
											"    let foundTelephoneNumberTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let telephoneNumberTypeDescriptorItem = telephonesArray[i];\r",
											"        let telephoneNumberTypeDescriptor = telephoneNumberTypeDescriptorItem.telephoneNumberTypeDescriptor;\r",
											"        let telephoneNumber = telephoneNumberTypeDescriptorItem.telephoneNumber;\r",
											"        if (telephoneNumber === expectedTelephoneNumber && telephoneNumberTypeDescriptor.includes(expectedTelephoneNumberTypeDescriptor)) {\r",
											"            foundTelephoneNumberTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundTelephoneNumberTypeDescriptor, `'${expectedTelephoneNumberTypeDescriptor}' with '${expectedTelephoneNumber}' was not found in the telephoneNumberTypeDescriptor property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumberTypeDescriptor))}' with '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"17 - Scenario 1 POST: electronicMailAddress value for the Student Education Organization Association is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"18 - Scenario 1 POST: electronicMailTypeDescriptor value for the Student Education Organization Association is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = telephonesArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptorItem;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"19 - Scenario 1 POST: hispanicLatinoEthnicity value for the Student Education Organization Association is \" + expectedHispanicLatinoEthnicity, () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'${expectedHispanicLatinoEthnicity}' was not found in the hispanicLatinoEthnicity property for the Student Education Organization Association. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"let racesArray = response.races;\r",
											"pm.expect(racesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"20 - Scenario 1 POST: raceDescriptor value for the Student Education Organization Association is \" + expectedRaceDescriptor, () => {\r",
											"    let foundRaceDescriptor = false;\r",
											"    for (let i = 0; i < racesArray.length; i++) {\r",
											"        let raceDescriptorItem = racesArray[i];\r",
											"        let raceDescriptor = raceDescriptorItem.raceDescriptor;\r",
											"        if (raceDescriptor.includes(expectedRaceDescriptor)) {\r",
											"            foundRaceDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundRaceDescriptor, `'${expectedRaceDescriptor}' was not found in the raceDescriptor property. Retrieved value is '${JSON.stringify(racesArray.map(item => item.raceDescriptor))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let languagesArray = response.languages;\r",
											"pm.expect(languagesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"21 - Scenario 1 POST: languageDescriptor value for the Student Education Organization Association is \" + expectedLanguageDescriptor, () => {\r",
											"    let foundLanguageDescriptor = false;\r",
											"    for (let i = 0; i < languagesArray.length; i++) {\r",
											"        let languageDescriptorItem = languagesArray[i];\r",
											"        let languageDescriptor = languageDescriptorItem.languageDescriptor;\r",
											"        if (languageDescriptor.includes(expectedLanguageDescriptor)) {\r",
											"            foundLanguageDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundLanguageDescriptor, `'${expectedLanguageDescriptor}' was not found in the languageDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"22 - Scenario 1 POST: languageUseDescriptor value for the Student Education Organization Association is \" + expectedLanguageUseDescriptor, () => {\r",
											"    let foundLanguageUseDescriptor = false;\r",
											"    for (let i = 0; i <languagesArray.length; i++) {\r",
											"        let languageDescriptorItem = languagesArray[i];\r",
											"        if (languageDescriptorItem.uses && Array.isArray(languageDescriptorItem.uses)) {\r",
											"            for (let j = 0; j < languageDescriptorItem.uses.length; j++) {\r",
											"                let languageUseDescriptorItem = languageDescriptorItem.uses[j];\r",
											"                let languageUseDescriptor = languageUseDescriptorItem.languageUseDescriptor;\r",
											"                if (languageUseDescriptor === expectedLanguageUseDescriptor) {\r",
											"                    foundLanguageUseDescriptor = true;\r",
											"                    break; // Si lo encontramos, no es necesario seguir buscando\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    pm.expect(foundLanguageUseDescriptor, `'${expectedLanguageUseDescriptor}' within '${expectedLanguageDescriptor}' was not found in the languageUseDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.uses.map(use => use.languageUseDescriptor)))}' within '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;  \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Education Organization Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentEducationOrganizationAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociationDate = latestStudentEducationOrganizationAssociation ? latestStudentEducationOrganizationAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentEducationOrganizationAssociationDate', latestStudentEducationOrganizationAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentEducationOrganizationAssociationId\", latestStudentEducationOrganizationAssociation.id);\r",
											"        console.log('s1StudentEducationOrganizationAssociationId', pm.environment.get(\"s1StudentEducationOrganizationAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentEducationOrganizationAssociations/{{s1StudentEducationOrganizationAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentEducationOrganizationAssociations",
										"{{s1StudentEducationOrganizationAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBeginDate = `${currentYear}-09-01`;\r",
											"let expectedEndDate = `${currentYear}-12-16`;\r",
											"let expectedHomeroomIndicator = false;\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode = \"\";\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"expectedLocalCourseCode = statementLocalCourseCode;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: localCourseCode value from sectionReference for Student Section Association is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from sectionReference for Student Section Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolYear value from sectionReference for Student Section Association is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eq(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"expectedSectionIdentifier = statementSectionIdentifier;\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sectionIdentifier value from sectionReference for Student Section Association is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier)\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: sessionName value from sectionReference for Student Section Association is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Section Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: beginDate value for Student Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Section Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: endDate value for Student Section Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property for Student Section Association. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: homeroomIndicator value for the Student Section Association is \" + expectedHomeroomIndicator, () => {\r",
											"    pm.expect(response.homeroomIndicator, `'${expectedHomeroomIndicator}' was not found in the homeroomIndicator property for Student Section Association. Retrieved value is '${response.homeroomIndicator}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Association and getting the ID of the student section association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAssociationDate = latestStudentSectionAssociation ? latestStudentSectionAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAssociationDate', latestStudentSectionAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentSectionAssociationId\", latestStudentSectionAssociation.id);\r",
											"        console.log('s1StudentSectionAssociationId', pm.environment.get(\"s1StudentSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s1StudentSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAssociations",
										"{{s1StudentSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Graduation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Graduation Plan request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = 2020;\r",
											"let expectedTotalRequiredCredits = 26;\r",
											"let expectedGraduationPlanTypeDescriptor = \"Minimum\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value for the Graduation Plan is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId from educationOrganizationReference for the Graduation Plan. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolYear value for the Graduation Plan is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.graduationSchoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from graduationSchoolYearTypeReference for the Graduation Plan. Retrieved value is '${response.graduationSchoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: totalRequiredCredits value for the Graduation Plan is \" + expectedTotalRequiredCredits, () => {\r",
											"    pm.expect(response.totalRequiredCredits, `'${expectedTotalRequiredCredits}' was not found in the totalRequiredCredits property. Retrieved value is '${response.totalRequiredCredits}'`).to.eql(expectedTotalRequiredCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: graduationPlanTypeDescriptor value for the Graduation Plan is \" + expectedGraduationPlanTypeDescriptor, () => {\r",
											"    pm.expect(response.graduationPlanTypeDescriptor, `'${expectedGraduationPlanTypeDescriptor}' was not found in the graduationPlanTypeDescriptor property. Retrieved value is '${response.graduationPlanTypeDescriptor}'`).to.contain(expectedGraduationPlanTypeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Graduation Plans and getting the ID of the graduation plan\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/graduationPlans`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGraduationPlan = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGraduationPlanDate = latestGraduationPlan ? latestGraduationPlan._lastModifiedDate : null;\r",
											"        console.log('latestGraduationPlanDate', latestGraduationPlanDate);\r",
											"\r",
											"        pm.environment.set(\"s2GraduationPlanId\", latestGraduationPlan.id);\r",
											"        console.log('s2GraduationPlanId', pm.environment.get(\"s2GraduationPlanId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/graduationPlans/{{s2GraduationPlanId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"graduationPlans",
										"{{s2GraduationPlanId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"02 - Scenario 2 POST: Test that Student School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedEntryDate = `${currentYear}-08-31`;\r",
											"let expectedEntryGradeLevelDescriptor = \"Ninth grade\";\r",
											"let expectedEntryTypeDescriptor = \"Next year school\";\r",
											"let expectedRepeatGradeIndicator = false;\r",
											"let expectedResidencyStatusDescriptor = \"Resident of admin unit and school area\";\r",
											"let expectedSchoolChoiceTransfer = false;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: schoolId value for the Student School Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from the schoolReference for the Student School Association. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: studentUniqueId value for the Student School Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from the studentReference for the Student School Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: entryDate value for the Student School Association is \" + expectedEntryDate, () => {\r",
											"    pm.expect(response.entryDate, `'${expectedEntryDate}' was not found in the entryDate property for the Student School Association. Retrieved value is '${response.entryDate}'`).to.eql(expectedEntryDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: entryGradeLevelDescriptor value for the Student School Association is \" + expectedEntryGradeLevelDescriptor, () => {\r",
											"    pm.expect(response.entryGradeLevelDescriptor, `'${expectedEntryGradeLevelDescriptor}' was not found in the entryGradeLevelDescriptor property for the Student School Association. Retrieved value is '${response.entryGradeLevelDescriptor}'`).to.contain(expectedEntryGradeLevelDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: entryTypeDescriptor value for the Student School Association is \" + expectedEntryTypeDescriptor, () => {\r",
											"    pm.expect(response.entryTypeDescriptor, `'${expectedEntryTypeDescriptor}' was not found in the expectedEntryTypeDescriptor property for the Student School Association. Retrieved value is '${response.entryTypeDescriptor}'`).to.contain(expectedEntryTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: repeatGradeIndicator value for the Student School Association is \" + expectedRepeatGradeIndicator, () => {\r",
											"    pm.expect(response.repeatGradeIndicator, `'${expectedRepeatGradeIndicator}' was not found in the repeatGradeIndicator property for the Student School Association. Retrieved value is '${response.repeatGradeIndicator}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: residencyStatusDescriptor value for the Student School Association is \" + expectedResidencyStatusDescriptor, () => {\r",
											"    pm.expect(response.residencyStatusDescriptor, `'${expectedResidencyStatusDescriptor}' was not found in the residencyStatusDescriptor property for the Student School Association. Retrieved value is '${response.residencyStatusDescriptor}'`).to.contain(expectedResidencyStatusDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: schoolChoiceTransfer value for the Student School Association is \" + expectedSchoolChoiceTransfer, () => {\r",
											"    pm.expect(response.schoolChoiceTransfer, `'${expectedSchoolChoiceTransfer}' was not found in the schoolChoiceTransfer property for the Student School Association. Retrieved value is '${response.schoolChoiceTransfer}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAssociationDate = latestStudentSchoolAssociation ? latestStudentSchoolAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAssociationDate', latestStudentSchoolAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentSchoolAssociationId\", latestStudentSchoolAssociation.id);\r",
											"        console.log('s2StudentSchoolAssociationId', pm.environment.get(\"s2StudentSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s2StudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s2StudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Education Organization Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Education Organization Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901 ;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedLimitedEnglishProficiencyDescriptor = \"NotLimited\";\r",
											"let expectedStudentCharacteristicDescriptor = \"Economic Disadvantaged\";\r",
											"let expectedAssigningOrganizationIdentificationCode1 = \"State\";\r",
											"let expectedAssigningOrganizationIdentificationCode2 = \"District\";\r",
											"let expectedAssigningOrganizationIdentificationCode3 = \"Local\";\r",
											"let expectedIdentificationCode1 = pm.environment.get(\"s2IdentificationCode1\");\r",
											"let expectedIdentificationCode2 = pm.environment.get(\"s2IdentificationCode2\");\r",
											"let expectedIdentificationCode3 = pm.environment.get(\"s2IdentificationCode3\");\r",
											"let expectedStudentIdentificationSystemDescriptor1 = \"State\";\r",
											"let expectedStudentIdentificationSystemDescriptor2 = \"District\";\r",
											"let expectedStudentIdentificationSystemDescriptor3 = \"Local\";\r",
											"let expectedSexDescriptor = \"Female\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"123 Cedar Street\";\r",
											"let expectedElectronicMailAddress = \"madison@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Other\";\r",
											"let expectedHispanicLatinoEthnicity = false;\r",
											"let expectedRaceDescriptor = \"White\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value for the Student Education Organization Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from the educationOrganizationReference for the Student Education Organization Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: studentUniqueId value for the Student Education Organization Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from the studentReference for the Student Education Organization Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: limitedEnglishProficiencyDescriptor value for the Student Education Organization Association is \" + expectedLimitedEnglishProficiencyDescriptor, () => {\r",
											"    pm.expect(response.limitedEnglishProficiencyDescriptor, `'${expectedLimitedEnglishProficiencyDescriptor}' was not found in the limitedEnglishProficiencyDescriptor property for the Student Education Organization Association. Retrieved value is '${response.limitedEnglishProficiencyDescriptor}'`).to.include(expectedLimitedEnglishProficiencyDescriptor);\r",
											"});\r",
											"\r",
											"let studentCharacteristicsArray = response.studentCharacteristics;\r",
											"pm.expect(studentCharacteristicsArray).to.be.an(\"array\")\r",
											"pm.test(\"05 - Scenario 2 POST: studentCharacteristicDescriptor value for the Student Education Organization Association is \" + expectedStudentCharacteristicDescriptor, () => {\r",
											"    let foundStudentCharacteristicDescriptor = false;\r",
											"    for (let i = 0; i < studentCharacteristicsArray.length; i++) {\r",
											"        let studentCharacteristicDescriptorItem = studentCharacteristicsArray[i];\r",
											"        let studentCharacteristicDescriptor = studentCharacteristicDescriptorItem.studentCharacteristicDescriptor;\r",
											"        if (studentCharacteristicDescriptor.includes(expectedStudentCharacteristicDescriptor)) {\r",
											"            foundStudentCharacteristicDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundStudentCharacteristicDescriptor, `'${expectedStudentCharacteristicDescriptor}' was not found in the studentCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(studentCharacteristicsArray)}'. Please take a look at the response for more information.`).to.be.true;\r",
											"    }  \r",
											"});\r",
											"\r",
											"let studentIdentificationCodesArray = response.studentIdentificationCodes;\r",
											"pm.expect(studentIdentificationCodesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: assigningOrganizationIdentificationCode values for the Student Education Organization Association could be \" + expectedAssigningOrganizationIdentificationCode1 + \", \" + expectedAssigningOrganizationIdentificationCode2 + \" , or \" + expectedAssigningOrganizationIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode1 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode2 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedAssigningOrganizationIdentificationCode1}', '${expectedAssigningOrganizationIdentificationCode2}', or '${expectedAssigningOrganizationIdentificationCode3}' were not found in assigningOrganizationIdentificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.assigningOrganizationIdentificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: identificationCode values for the Student Education Organization Association could be \" + expectedIdentificationCode1 + \", \" + expectedIdentificationCode2 + \" , or \" + expectedIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.identificationCode === expectedIdentificationCode1 || item.identificationCode === expectedIdentificationCode2 || item.identificationCode === expectedIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedIdentificationCode1}', '${expectedIdentificationCode2}', or '${expectedIdentificationCode3}' were not found in identificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.identificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: studentIdentificationSystemDescriptor values for the Student Education Organization Association could be \" + expectedStudentIdentificationSystemDescriptor1 + \", \" + expectedStudentIdentificationSystemDescriptor2 + \" , or \" + expectedStudentIdentificationSystemDescriptor3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor1) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor2) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor3)) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedStudentIdentificationSystemDescriptor1}', '${expectedStudentIdentificationSystemDescriptor2}', or '${expectedStudentIdentificationSystemDescriptor3}' were not found in studentIdentificationSystemDescriptor from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.studentIdentificationSystemDescriptor))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: sexDescriptor value for the Student Education Organization Association is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Student Education Organization Association. Retrieved value is '${response.sexDescriptor}'`).to.contain(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: addressTypeDescriptor value for the Student Education Organization Association is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: city value for the Student Education Organization Association is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: postalCode value for the Student Education Organization Association is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 2 POST: stateAbbreviationDescriptor value for the Student Education Organization Association is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 2 POST: streetNumberName value for the Student Education Organization Association is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"15 - Scenario 2 POST: electronicMailAddress value for the Student Education Organization Association is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 2 POST: electronicMailTypeDescriptor value for the Student Education Organization Association is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = telephonesArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptorItem;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 2 POST: hispanicLatinoEthnicity value for the Student Education Organization Association is \" + expectedHispanicLatinoEthnicity, () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'${expectedHispanicLatinoEthnicity}' was not found in the hispanicLatinoEthnicity property for the Student Education Organization Association. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"let racesArray = response.races;\r",
											"pm.expect(racesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"18 - Scenario 2 POST: raceDescriptor value for the Student Education Organization Association is \" + expectedRaceDescriptor, () => {\r",
											"    let foundRaceDescriptor = false;\r",
											"    for (let i = 0; i < racesArray.length; i++) {\r",
											"        let raceDescriptorItem = racesArray[i];\r",
											"        let raceDescriptor = raceDescriptorItem.raceDescriptor;\r",
											"        if (raceDescriptor.includes(expectedRaceDescriptor)) {\r",
											"            foundRaceDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundRaceDescriptor, `'${expectedRaceDescriptor}' was not found in the raceDescriptor property. Retrieved value is '${JSON.stringify(racesArray.map(item => item.raceDescriptor))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Education Organization Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentEducationOrganizationAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociationDate = latestStudentEducationOrganizationAssociation ? latestStudentEducationOrganizationAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentEducationOrganizationAssociationDate', latestStudentEducationOrganizationAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentEducationOrganizationAssociationId\", latestStudentEducationOrganizationAssociation.id);\r",
											"        console.log('s2StudentEducationOrganizationAssociationId', pm.environment.get(\"s2StudentEducationOrganizationAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentEducationOrganizationAssociations/{{s2StudentEducationOrganizationAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentEducationOrganizationAssociations",
										"{{s2StudentEducationOrganizationAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedBeginDate = `${currentYear}-08-31`;\r",
											"let expectedEndDate = `${currentYear}-12-16`;\r",
											"let expectedHomeroomIndicator = true;\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode = \"\";\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"expectedLocalCourseCode = statementLocalCourseCode;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: localCourseCode value from sectionReference for Student Section Association is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value from sectionReference for Student Section Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolYear value from sectionReference for Student Section Association is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eq(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"expectedSectionIdentifier = statementSectionIdentifier;\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sectionIdentifier value from sectionReference for Student Section Association is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier)\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: sessionName value from sectionReference for Student Section Association is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: studentUniqueId value from studentReference for Student Section Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: beginDate value for Student Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Section Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: endDate value for Student Section Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property for Student Section Association. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: homeroomIndicator value for the Student Section Association is \" + expectedHomeroomIndicator, () => {\r",
											"    pm.expect(response.homeroomIndicator, `'${expectedHomeroomIndicator}' was not found in the homeroomIndicator property for Student Section Association. Retrieved value is '${response.homeroomIndicator}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Association and getting the ID of the student section association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAssociationDate = latestStudentSectionAssociation ? latestStudentSectionAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAssociationDate', latestStudentSectionAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentSectionAssociationId\", latestStudentSectionAssociation.id);\r",
											"        console.log('s2StudentSectionAssociationId', pm.environment.get(\"s2StudentSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s2StudentSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAssociations",
										"{{s2StudentSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Graduation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Graduation Plan request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = 2020;\r",
											"let expectedTotalRequiredCredits = 30;\r",
											"let expectedGraduationPlanTypeDescriptor = \"Recommended\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value for the Graduation Plan is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId from educationOrganizationReference for the Graduation Plan. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolYear value for the Graduation Plan is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.graduationSchoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from graduationSchoolYearTypeReference for the Graduation Plan. Retrieved value is '${response.graduationSchoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: totalRequiredCredits value for the Graduation Plan is \" + expectedTotalRequiredCredits, () => {\r",
											"    pm.expect(response.totalRequiredCredits, `'${expectedTotalRequiredCredits}' was not found in the totalRequiredCredits property. Retrieved value is '${response.totalRequiredCredits}'`).to.eql(expectedTotalRequiredCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: graduationPlanTypeDescriptor value for the Graduation Plan is \" + expectedGraduationPlanTypeDescriptor, () => {\r",
											"    pm.expect(response.graduationPlanTypeDescriptor, `'${expectedGraduationPlanTypeDescriptor}' was not found in the graduationPlanTypeDescriptor property. Retrieved value is '${response.graduationPlanTypeDescriptor}'`).to.contain(expectedGraduationPlanTypeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Graduation Plans and getting the ID of the graduation plan\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/graduationPlans`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGraduationPlan = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGraduationPlanDate = latestGraduationPlan ? latestGraduationPlan._lastModifiedDate : null;\r",
											"        console.log('latestGraduationPlanDate', latestGraduationPlanDate);\r",
											"\r",
											"        pm.environment.set(\"s3GraduationPlanId\", latestGraduationPlan.id);\r",
											"        console.log('s3GraduationPlanId', pm.environment.get(\"s3GraduationPlanId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/graduationPlans/{{s3GraduationPlanId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"graduationPlans",
										"{{s3GraduationPlanId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"02 - Scenario 3 PUT: Test that Student School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEntryDate = `${currentYear}-09-01`;\r",
											"let expectedEntryGradeLevelDescriptor = \"First grade\";\r",
											"let expectedEntryTypeDescriptor = \"Next year school\";\r",
											"let expectedRepeatGradeIndicator = false;\r",
											"let expectedResidencyStatusDescriptor = \"Resident of admin unit and school area\";\r",
											"let expectedSchoolChoiceTransfer = false;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: schoolId value for the Student School Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from the schoolReference for the Student School Association. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: studentUniqueId value for the Student School Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from the studentReference for the Student School Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: entryDate value for the Student School Association is \" + expectedEntryDate, () => {\r",
											"    pm.expect(response.entryDate, `'${expectedEntryDate}' was not found in the entryDate property for the Student School Association. Retrieved value is '${response.entryDate}'`).to.eql(expectedEntryDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: entryGradeLevelDescriptor value for the Student School Association is \" + expectedEntryGradeLevelDescriptor, () => {\r",
											"    pm.expect(response.entryGradeLevelDescriptor, `'${expectedEntryGradeLevelDescriptor}' was not found in the entryGradeLevelDescriptor property for the Student School Association. Retrieved value is '${response.entryGradeLevelDescriptor}'`).to.contain(expectedEntryGradeLevelDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: entryTypeDescriptor value for the Student School Association is \" + expectedEntryTypeDescriptor, () => {\r",
											"    pm.expect(response.entryTypeDescriptor, `'${expectedEntryTypeDescriptor}' was not found in the expectedEntryTypeDescriptor property for the Student School Association. Retrieved value is '${response.entryTypeDescriptor}'`).to.contain(expectedEntryTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: repeatGradeIndicator value for the Student School Association is \" + expectedRepeatGradeIndicator, () => {\r",
											"    pm.expect(response.repeatGradeIndicator, `'${expectedRepeatGradeIndicator}' was not found in the repeatGradeIndicator property for the Student School Association. Retrieved value is '${response.repeatGradeIndicator}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: residencyStatusDescriptor value for the Student School Association is \" + expectedResidencyStatusDescriptor, () => {\r",
											"    pm.expect(response.residencyStatusDescriptor, `'${expectedResidencyStatusDescriptor}' was not found in the residencyStatusDescriptor property for the Student School Association. Retrieved value is '${response.residencyStatusDescriptor}'`).to.contain(expectedResidencyStatusDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: schoolChoiceTransfer value for the Student School Association is \" + expectedSchoolChoiceTransfer, () => {\r",
											"    pm.expect(response.schoolChoiceTransfer, `'${expectedSchoolChoiceTransfer}' was not found in the schoolChoiceTransfer property for the Student School Association. Retrieved value is '${response.schoolChoiceTransfer}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAssociationDate = latestStudentSchoolAssociation ? latestStudentSchoolAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAssociationDate', latestStudentSchoolAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentSchoolAssociationId\", latestStudentSchoolAssociation.id);\r",
											"        console.log('s3StudentSchoolAssociationId', pm.environment.get(\"s3StudentSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s3StudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s3StudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Education Organization Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Education Organization Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901 ;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedLimitedEnglishProficiencyDescriptor = \"NotLimited\";\r",
											"let expectedStudentCharacteristicDescriptor = \"Immigrant\";\r",
											"let expectedAssigningOrganizationIdentificationCode1 = \"State\";\r",
											"let expectedAssigningOrganizationIdentificationCode2 = \"District\";\r",
											"let expectedAssigningOrganizationIdentificationCode3 = \"Local\";\r",
											"let expectedIdentificationCode1 = pm.environment.get(\"s3IdentificationCode1\");\r",
											"let expectedIdentificationCode2 = pm.environment.get(\"s3IdentificationCode2\");\r",
											"let expectedIdentificationCode3 = pm.environment.get(\"s3IdentificationCode3\");\r",
											"let expectedStudentIdentificationSystemDescriptor1 = \"State\";\r",
											"let expectedStudentIdentificationSystemDescriptor2 = \"District\";\r",
											"let expectedStudentIdentificationSystemDescriptor3 = \"Local\";\r",
											"let expectedSexDescriptor = \"Male\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"654 Mission Hills\";\r",
											"let expectedTelephoneNumber = \"(111) 222 4444\";\r",
											"let expectedTelephoneNumberTypeDescriptor = \"Home\";\r",
											"let expectedElectronicMailAddress = \"austin@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Other\";\r",
											"let expectedHispanicLatinoEthnicity = false;\r",
											"let expectedRaceDescriptor = \"Black - African American\";\r",
											"let expectedLanguageDescriptor = \"spa\";\r",
											"let expectedLanguageUseDescriptor = \"Home language\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value for the Student Education Organization Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from the educationOrganizationReference for the Student Education Organization Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: studentUniqueId value for the Student Education Organization Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from the studentReference for the Student Education Organization Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: limitedEnglishProficiencyDescriptor value for the Student Education Organization Association is \" + expectedLimitedEnglishProficiencyDescriptor, () => {\r",
											"    pm.expect(response.limitedEnglishProficiencyDescriptor, `'${expectedLimitedEnglishProficiencyDescriptor}' was not found in the limitedEnglishProficiencyDescriptor property for the Student Education Organization Association. Retrieved value is '${response.limitedEnglishProficiencyDescriptor}'`).to.include(expectedLimitedEnglishProficiencyDescriptor);\r",
											"});\r",
											"\r",
											"let studentCharacteristicsArray = response.studentCharacteristics;\r",
											"pm.expect(studentCharacteristicsArray).to.be.an(\"array\")\r",
											"pm.test(\"05 - Scenario 3 PUT: studentCharacteristicDescriptor value for the Student Education Organization Association is \" + expectedStudentCharacteristicDescriptor, () => {\r",
											"    let foundStudentCharacteristicDescriptor = false;\r",
											"    for (let i = 0; i < studentCharacteristicsArray.length; i++) {\r",
											"        let studentCharacteristicDescriptorItem = studentCharacteristicsArray[i];\r",
											"        let studentCharacteristicDescriptor = studentCharacteristicDescriptorItem.studentCharacteristicDescriptor;\r",
											"        if (studentCharacteristicDescriptor.includes(expectedStudentCharacteristicDescriptor)) {\r",
											"            foundStudentCharacteristicDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundStudentCharacteristicDescriptor, `'${expectedStudentCharacteristicDescriptor}' was not found in the studentCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(studentCharacteristicsArray)}'. Please take a look at the response for more information.`).to.be.true;\r",
											"    }  \r",
											"});\r",
											"\r",
											"let studentIdentificationCodesArray = response.studentIdentificationCodes;\r",
											"pm.expect(studentIdentificationCodesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: assigningOrganizationIdentificationCode values for the Student Education Organization Association could be \" + expectedAssigningOrganizationIdentificationCode1 + \", \" + expectedAssigningOrganizationIdentificationCode2 + \" , or \" + expectedAssigningOrganizationIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode1 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode2 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedAssigningOrganizationIdentificationCode1}', '${expectedAssigningOrganizationIdentificationCode2}', or '${expectedAssigningOrganizationIdentificationCode3}' were not found in assigningOrganizationIdentificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.assigningOrganizationIdentificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: identificationCode values for the Student Education Organization Association could be \" + expectedIdentificationCode1 + \", \" + expectedIdentificationCode2 + \" , or \" + expectedIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.identificationCode === expectedIdentificationCode1 || item.identificationCode === expectedIdentificationCode2 || item.identificationCode === expectedIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedIdentificationCode1}', '${expectedIdentificationCode2}', or '${expectedIdentificationCode3}' were not found in identificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.identificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: studentIdentificationSystemDescriptor values for the Student Education Organization Association could be \" + expectedStudentIdentificationSystemDescriptor1 + \", \" + expectedStudentIdentificationSystemDescriptor2 + \" , or \" + expectedStudentIdentificationSystemDescriptor3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function(item) {\r",
											"        if (item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor1) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor2) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor3)) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedStudentIdentificationSystemDescriptor1}', '${expectedStudentIdentificationSystemDescriptor2}', or '${expectedStudentIdentificationSystemDescriptor3}' were not found in studentIdentificationSystemDescriptor from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.studentIdentificationSystemDescriptor))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: sexDescriptor value for the Student Education Organization Association is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Student Education Organization Association. Retrieved value is '${response.sexDescriptor}'`).to.contain(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: addressTypeDescriptor value for the Student Education Organization Association is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: city value for the Student Education Organization Association is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 PUT: postalCode value for the Student Education Organization Association is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 3 PUT: stateAbbreviationDescriptor value for the Student Education Organization Association is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 3 PUT: streetNumberName value for the Student Education Organization Association is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let telephonesArray = response.telephones;\r",
											"pm.expect(telephonesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"15 - Scenario 3 PUT: telephoneNumber value for the Student Education Organization Association is \" + expectedTelephoneNumber, () => {\r",
											"    let foundTelephoneNumber = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let telephoneNumberItem = telephonesArray[i];\r",
											"        let telephoneNumber = telephoneNumberItem.telephoneNumber;\r",
											"        if (telephoneNumber === expectedTelephoneNumber) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"    pm.expect(foundTelephoneNumber, `'${expectedTelephoneNumber}' was not found in the foundTelephoneNumber property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 3 PUT: telephoneNumberTypeDescriptor value for the Student Education Organization Association is \" + expectedTelephoneNumberTypeDescriptor, () => {\r",
											"    let foundTelephoneNumberTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let telephoneNumberTypeDescriptorItem = telephonesArray[i];\r",
											"        let telephoneNumberTypeDescriptor = telephoneNumberTypeDescriptorItem.telephoneNumberTypeDescriptor;\r",
											"        let telephoneNumber = telephoneNumberTypeDescriptorItem.telephoneNumber;\r",
											"        if (telephoneNumber === expectedTelephoneNumber && telephoneNumberTypeDescriptor.includes(expectedTelephoneNumberTypeDescriptor)) {\r",
											"            foundTelephoneNumberTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundTelephoneNumberTypeDescriptor, `'${expectedTelephoneNumberTypeDescriptor}' with '${expectedTelephoneNumber}' was not found in the telephoneNumberTypeDescriptor property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumberTypeDescriptor))}' with '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"17 - Scenario 3 PUT: electronicMailAddress value for the Student Education Organization Association is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"18 - Scenario 3 PUT: electronicMailTypeDescriptor value for the Student Education Organization Association is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = telephonesArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptorItem;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"19 - Scenario 3 PUT: hispanicLatinoEthnicity value for the Student Education Organization Association is \" + expectedHispanicLatinoEthnicity, () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'${expectedHispanicLatinoEthnicity}' was not found in the hispanicLatinoEthnicity property for the Student Education Organization Association. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"let racesArray = response.races;\r",
											"pm.expect(racesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"20 - Scenario 3 PUT: raceDescriptor value for the Student Education Organization Association is \" + expectedRaceDescriptor, () => {\r",
											"    let foundRaceDescriptor = false;\r",
											"    for (let i = 0; i < racesArray.length; i++) {\r",
											"        let raceDescriptorItem = racesArray[i];\r",
											"        let raceDescriptor = raceDescriptorItem.raceDescriptor;\r",
											"        if (raceDescriptor.includes(expectedRaceDescriptor)) {\r",
											"            foundRaceDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundRaceDescriptor, `'${expectedRaceDescriptor}' was not found in the raceDescriptor property. Retrieved value is '${JSON.stringify(racesArray.map(item => item.raceDescriptor))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let languagesArray = response.languages;\r",
											"pm.expect(languagesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"21 - Scenario 3 PUT: languageDescriptor value for the Student Education Organization Association is \" + expectedLanguageDescriptor, () => {\r",
											"    let foundLanguageDescriptor = false;\r",
											"    for (let i = 0; i < languagesArray.length; i++) {\r",
											"        let languageDescriptorItem = languagesArray[i];\r",
											"        let languageDescriptor = languageDescriptorItem.languageDescriptor;\r",
											"        if (languageDescriptor.includes(expectedLanguageDescriptor)) {\r",
											"            foundLanguageDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundLanguageDescriptor, `'${expectedLanguageDescriptor}' was not found in the languageDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"22 - Scenario 3 PUT: languageUseDescriptor value for the Student Education Organization Association is \" + expectedLanguageUseDescriptor, () => {\r",
											"    let foundLanguageUseDescriptor = false;\r",
											"    for (let i = 0; i <languagesArray.length; i++) {\r",
											"        let languageDescriptorItem = languagesArray[i];\r",
											"        if (languageDescriptorItem.uses && Array.isArray(languageDescriptorItem.uses)) {\r",
											"            for (let j = 0; j < languageDescriptorItem.uses.length; j++) {\r",
											"                let languageUseDescriptorItem = languageDescriptorItem.uses[j];\r",
											"                let languageUseDescriptor = languageUseDescriptorItem.languageUseDescriptor;\r",
											"                if (languageUseDescriptor === expectedLanguageUseDescriptor) {\r",
											"                    foundLanguageUseDescriptor = true;\r",
											"                    break; // Si lo encontramos, no es necesario seguir buscando\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    pm.expect(foundLanguageUseDescriptor, `'${expectedLanguageUseDescriptor}' within '${expectedLanguageDescriptor}' was not found in the languageUseDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.uses.map(use => use.languageUseDescriptor)))}' within '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;  \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Education Organization Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentEducationOrganizationAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociationDate = latestStudentEducationOrganizationAssociation ? latestStudentEducationOrganizationAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentEducationOrganizationAssociationDate', latestStudentEducationOrganizationAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentEducationOrganizationAssociationId\", latestStudentEducationOrganizationAssociation.id);\r",
											"        console.log('s3StudentEducationOrganizationAssociationId', pm.environment.get(\"s3StudentEducationOrganizationAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentEducationOrganizationAssociations/{{s3StudentEducationOrganizationAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentEducationOrganizationAssociations",
										"{{s3StudentEducationOrganizationAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBeginDate = `${currentYear}-09-01`;\r",
											"let expectedEndDate = `${currentYear}-12-10`;\r",
											"let expectedHomeroomIndicator = false;\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode = \"\";\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"expectedLocalCourseCode = statementLocalCourseCode;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: localCourseCode value from sectionReference for Student Section Association is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value from sectionReference for Student Section Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolYear value from sectionReference for Student Section Association is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eq(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"expectedSectionIdentifier = statementSectionIdentifier;\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sectionIdentifier value from sectionReference for Student Section Association is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier)\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: sessionName value from sectionReference for Student Section Association is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Section Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: beginDate value for Student Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Section Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: endDate value for Student Section Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property for Student Section Association. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: homeroomIndicator value for the Student Section Association is \" + expectedHomeroomIndicator, () => {\r",
											"    pm.expect(response.homeroomIndicator, `'${expectedHomeroomIndicator}' was not found in the homeroomIndicator property for Student Section Association. Retrieved value is '${response.homeroomIndicator}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Association and getting the ID of the student section association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAssociationDate = latestStudentSectionAssociation ? latestStudentSectionAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAssociationDate', latestStudentSectionAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentSectionAssociationId\", latestStudentSectionAssociation.id);\r",
											"        console.log('s3StudentSectionAssociationId', pm.environment.get(\"s3StudentSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s3StudentSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAssociations",
										"{{s3StudentSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Graduation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Graduation Plan request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = 2020;\r",
											"let expectedTotalRequiredCredits = 24;\r",
											"let expectedGraduationPlanTypeDescriptor = \"Minimum\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: educationOrganizationId value for the Graduation Plan is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId from educationOrganizationReference for the Graduation Plan. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolYear value for the Graduation Plan is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.graduationSchoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from graduationSchoolYearTypeReference for the Graduation Plan. Retrieved value is '${response.graduationSchoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: totalRequiredCredits value for the Graduation Plan is \" + expectedTotalRequiredCredits, () => {\r",
											"    pm.expect(response.totalRequiredCredits, `'${expectedTotalRequiredCredits}' was not found in the totalRequiredCredits property. Retrieved value is '${response.totalRequiredCredits}'`).to.eql(expectedTotalRequiredCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: graduationPlanTypeDescriptor value for the Graduation Plan is \" + expectedGraduationPlanTypeDescriptor, () => {\r",
											"    pm.expect(response.graduationPlanTypeDescriptor, `'${expectedGraduationPlanTypeDescriptor}' was not found in the graduationPlanTypeDescriptor property. Retrieved value is '${response.graduationPlanTypeDescriptor}'`).to.contain(expectedGraduationPlanTypeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Graduation Plans and getting the ID of the graduation plan\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/graduationPlans`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGraduationPlan = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGraduationPlanDate = latestGraduationPlan ? latestGraduationPlan._lastModifiedDate : null;\r",
											"        console.log('latestGraduationPlanDate', latestGraduationPlanDate);\r",
											"\r",
											"        pm.environment.set(\"s2GraduationPlanId\", latestGraduationPlan.id);\r",
											"        console.log('s2GraduationPlanId', pm.environment.get(\"s2GraduationPlanId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/graduationPlans/{{s2GraduationPlanId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"graduationPlans",
										"{{s2GraduationPlanId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Student School Association Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"02 - Scenario 3 PUT: Test that Student School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedGraduationSchoolYear = 2020;\r",
											"let expectedGraduationPlanTypeDescriptor = \"Recommended\";\r",
											"let expectedEntryDate = `${currentYear}-09-01`;\r",
											"let expectedEntryGradeLevelDescriptor = \"First grade\";\r",
											"let expectedEntryTypeDescriptor = \"Next year school\";\r",
											"let expectedRepeatGradeIndicator = false;\r",
											"let expectedResidencyStatusDescriptor = \"Resident of admin unit and school area\";\r",
											"let expectedSchoolChoiceTransfer = false;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: schoolId value for the Student School Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from the schoolReference for the Student School Association. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: studentUniqueId value for the Student School Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from the studentReference for the Student School Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: educationOrganizationId value for the Student School Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.graduationPlanReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId from the graduationPlanReference for the Student School Association. Retrieved value is '${response.graduationPlanReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: graduationSchoolYear value for the Student School Association is \" + expectedGraduationSchoolYear, () => {\r",
											"    pm.expect(response.graduationPlanReference.graduationSchoolYear, `'${expectedGraduationSchoolYear}' was not found in the graduationSchoolYear from the graduationPlanReference for the Student School Association. Retrieved value is '${response.graduationPlanReference.graduationSchoolYear}'`).to.eql(expectedGraduationSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: graduationPlanTypeDescriptor value for the Student School Association is \" + expectedGraduationPlanTypeDescriptor, () => {\r",
											"    pm.expect(response.graduationPlanReference.graduationPlanTypeDescriptor, `'${expectedGraduationPlanTypeDescriptor}' was not found in the graduationPlanTypeDescriptor from the graduationPlanReference for the Student School Association. Retrieved value is '${response.graduationPlanReference.graduationPlanTypeDescriptor}'`).to.contain(expectedGraduationPlanTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: entryDate value for the Student School Association is \" + expectedEntryDate, () => {\r",
											"    pm.expect(response.entryDate, `'${expectedEntryDate}' was not found in the entryDate property for the Student School Association. Retrieved value is '${response.entryDate}'`).to.eql(expectedEntryDate);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: entryGradeLevelDescriptor value for the Student School Association is \" + expectedEntryGradeLevelDescriptor, () => {\r",
											"    pm.expect(response.entryGradeLevelDescriptor, `'${expectedEntryGradeLevelDescriptor}' was not found in the entryGradeLevelDescriptor property for the Student School Association. Retrieved value is '${response.entryGradeLevelDescriptor}'`).to.contain(expectedEntryGradeLevelDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: entryTypeDescriptor value for the Student School Association is \" + expectedEntryTypeDescriptor, () => {\r",
											"    pm.expect(response.entryTypeDescriptor, `'${expectedEntryTypeDescriptor}' was not found in the expectedEntryTypeDescriptor property for the Student School Association. Retrieved value is '${response.entryTypeDescriptor}'`).to.contain(expectedEntryTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: repeatGradeIndicator value for the Student School Association is \" + expectedRepeatGradeIndicator, () => {\r",
											"    pm.expect(response.repeatGradeIndicator, `'${expectedRepeatGradeIndicator}' was not found in the repeatGradeIndicator property for the Student School Association. Retrieved value is '${response.repeatGradeIndicator}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: residencyStatusDescriptor value for the Student School Association is \" + expectedResidencyStatusDescriptor, () => {\r",
											"    pm.expect(response.residencyStatusDescriptor, `'${expectedResidencyStatusDescriptor}' was not found in the residencyStatusDescriptor property for the Student School Association. Retrieved value is '${response.residencyStatusDescriptor}'`).to.contain(expectedResidencyStatusDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 PUT: schoolChoiceTransfer value for the Student School Association is \" + expectedSchoolChoiceTransfer, () => {\r",
											"    pm.expect(response.schoolChoiceTransfer, `'${expectedSchoolChoiceTransfer}' was not found in the schoolChoiceTransfer property for the Student School Association. Retrieved value is '${response.schoolChoiceTransfer}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAssociationDate = latestStudentSchoolAssociation ? latestStudentSchoolAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAssociationDate', latestStudentSchoolAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentSchoolAssociationId\", latestStudentSchoolAssociation.id);\r",
											"        console.log('s4StudentSchoolAssociationId', pm.environment.get(\"s4StudentSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s4StudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s4StudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Student Education Organization Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student Education Organization Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedLimitedEnglishProficiencyDescriptor = \"NotLimited\";\r",
											"let expectedStudentCharacteristicDescriptor = \"Economic Disadvantaged\";\r",
											"let expectedAssigningOrganizationIdentificationCode1 = \"State\";\r",
											"let expectedAssigningOrganizationIdentificationCode2 = \"District\";\r",
											"let expectedAssigningOrganizationIdentificationCode3 = \"Local\";\r",
											"let expectedIdentificationCode1 = pm.environment.get(\"s4IdentificationCode1\");\r",
											"let expectedIdentificationCode2 = pm.environment.get(\"s4IdentificationCode2\");\r",
											"let expectedIdentificationCode3 = pm.environment.get(\"s4IdentificationCode3\");\r",
											"let expectedStudentIdentificationSystemDescriptor1 = \"State\";\r",
											"let expectedStudentIdentificationSystemDescriptor2 = \"District\";\r",
											"let expectedStudentIdentificationSystemDescriptor3 = \"Local\";\r",
											"let expectedSexDescriptor = \"Female\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"123 Cedar Circle\";\r",
											"let expectedElectronicMailAddress = \"madison@edficert.org\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Other\";\r",
											"let expectedHispanicLatinoEthnicity = false;\r",
											"let expectedRaceDescriptor = \"White\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: educationOrganizationId value for the Student Education Organization Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from the educationOrganizationReference for the Student Education Organization Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: studentUniqueId value for the Student Education Organization Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from the studentReference for the Student Education Organization Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: limitedEnglishProficiencyDescriptor value for the Student Education Organization Association is \" + expectedLimitedEnglishProficiencyDescriptor, () => {\r",
											"    pm.expect(response.limitedEnglishProficiencyDescriptor, `'${expectedLimitedEnglishProficiencyDescriptor}' was not found in the limitedEnglishProficiencyDescriptor property for the Student Education Organization Association. Retrieved value is '${response.limitedEnglishProficiencyDescriptor}'`).to.include(expectedLimitedEnglishProficiencyDescriptor);\r",
											"});\r",
											"\r",
											"let studentCharacteristicsArray = response.studentCharacteristics;\r",
											"pm.expect(studentCharacteristicsArray).to.be.an(\"array\")\r",
											"pm.test(\"05 - Scenario 4 PUT: studentCharacteristicDescriptor value for the Student Education Organization Association is \" + expectedStudentCharacteristicDescriptor, () => {\r",
											"    let foundStudentCharacteristicDescriptor = false;\r",
											"    for (let i = 0; i < studentCharacteristicsArray.length; i++) {\r",
											"        let studentCharacteristicDescriptorItem = studentCharacteristicsArray[i];\r",
											"        let studentCharacteristicDescriptor = studentCharacteristicDescriptorItem.studentCharacteristicDescriptor;\r",
											"        if (studentCharacteristicDescriptor.includes(expectedStudentCharacteristicDescriptor)) {\r",
											"            foundStudentCharacteristicDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundStudentCharacteristicDescriptor, `'${expectedStudentCharacteristicDescriptor}' was not found in the studentCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(studentCharacteristicsArray)}'. Please take a look at the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"let studentIdentificationCodesArray = response.studentIdentificationCodes;\r",
											"pm.expect(studentIdentificationCodesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: assigningOrganizationIdentificationCode values for the Student Education Organization Association could be \" + expectedAssigningOrganizationIdentificationCode1 + \", \" + expectedAssigningOrganizationIdentificationCode2 + \" , or \" + expectedAssigningOrganizationIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function (item) {\r",
											"        if (item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode1 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode2 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedAssigningOrganizationIdentificationCode1}', '${expectedAssigningOrganizationIdentificationCode2}', or '${expectedAssigningOrganizationIdentificationCode3}' were not found in assigningOrganizationIdentificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.assigningOrganizationIdentificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: identificationCode values for the Student Education Organization Association could be \" + expectedIdentificationCode1 + \", \" + expectedIdentificationCode2 + \" , or \" + expectedIdentificationCode3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function (item) {\r",
											"        if (item.identificationCode === expectedIdentificationCode1 || item.identificationCode === expectedIdentificationCode2 || item.identificationCode === expectedIdentificationCode3) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedIdentificationCode1}', '${expectedIdentificationCode2}', or '${expectedIdentificationCode3}' were not found in identificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.identificationCode))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: studentIdentificationSystemDescriptor values for the Student Education Organization Association could be \" + expectedStudentIdentificationSystemDescriptor1 + \", \" + expectedStudentIdentificationSystemDescriptor2 + \" , or \" + expectedStudentIdentificationSystemDescriptor3, () => {\r",
											"    let doesValuesExists = false;\r",
											"    studentIdentificationCodesArray.forEach(function (item) {\r",
											"        if (item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor1) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor2) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor3)) {\r",
											"            doesValuesExists = true;\r",
											"        }\r",
											"    });\r",
											"    pm.expect(doesValuesExists, `'${expectedStudentIdentificationSystemDescriptor1}', '${expectedStudentIdentificationSystemDescriptor2}', or '${expectedStudentIdentificationSystemDescriptor3}' were not found in studentIdentificationSystemDescriptor from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.studentIdentificationSystemDescriptor))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: sexDescriptor value for the Student Education Organization Association is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Student Education Organization Association. Retrieved value is '${response.sexDescriptor}'`).to.contain(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: addressTypeDescriptor value for the Student Education Organization Association is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 4 PUT: city value for the Student Education Organization Association is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"        pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 4 PUT: postalCode value for the Student Education Organization Association is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"        pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 4 PUT: stateAbbreviationDescriptor value for the Student Education Organization Association is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 4 PUT: streetNumberName value for the Student Education Organization Association is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"        pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"15 - Scenario 4 PUT: electronicMailAddress value for the Student Education Organization Association is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundTelephoneNumber = true;\r",
											"        }\r",
											"        pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 4 PUT: electronicMailTypeDescriptor value for the Student Education Organization Association is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < telephonesArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = telephonesArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptorItem;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 4 PUT: hispanicLatinoEthnicity value for the Student Education Organization Association is \" + expectedHispanicLatinoEthnicity, () => {\r",
											"    pm.expect(response.hispanicLatinoEthnicity, `'${expectedHispanicLatinoEthnicity}' was not found in the hispanicLatinoEthnicity property for the Student Education Organization Association. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;\r",
											"});\r",
											"\r",
											"let racesArray = response.races;\r",
											"pm.expect(racesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"18 - Scenario 4 PUT: raceDescriptor value for the Student Education Organization Association is \" + expectedRaceDescriptor, () => {\r",
											"    let foundRaceDescriptor = false;\r",
											"    for (let i = 0; i < racesArray.length; i++) {\r",
											"        let raceDescriptorItem = racesArray[i];\r",
											"        let raceDescriptor = raceDescriptorItem.raceDescriptor;\r",
											"        if (raceDescriptor.includes(expectedRaceDescriptor)) {\r",
											"            foundRaceDescriptor = true;\r",
											"        }\r",
											"        pm.expect(foundRaceDescriptor, `'${expectedRaceDescriptor}' was not found in the raceDescriptor property. Retrieved value is '${JSON.stringify(racesArray.map(item => item.raceDescriptor))}'.`).to.be.true;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Education Organization Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentEducationOrganizationAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentEducationOrganizationAssociationDate = latestStudentEducationOrganizationAssociation ? latestStudentEducationOrganizationAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentEducationOrganizationAssociationDate', latestStudentEducationOrganizationAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentEducationOrganizationAssociationId\", latestStudentEducationOrganizationAssociation.id);\r",
											"        console.log('s4StudentEducationOrganizationAssociationId', pm.environment.get(\"s4StudentEducationOrganizationAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentEducationOrganizationAssociations/{{s4StudentEducationOrganizationAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentEducationOrganizationAssociations",
										"{{s4StudentEducationOrganizationAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Student Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student Section Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedBeginDate = `${currentYear}-08-31`;\r",
											"let expectedEndDate = `${currentYear}-12-10`;\r",
											"let expectedHomeroomIndicator = true;\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"let statementLocalCourseCode = \"\";\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    statementLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    statementLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"expectedLocalCourseCode = statementLocalCourseCode;\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: localCourseCode value from sectionReference for Student Section Association is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value from sectionReference for Student Section Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolYear value from sectionReference for Student Section Association is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eq(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"let statementSectionIdentifier = \"\";\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    statementSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    statementSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"expectedSectionIdentifier = statementSectionIdentifier;\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sectionIdentifier value from sectionReference for Student Section Association is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier)\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: sessionName value from sectionReference for Student Section Association is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: studentUniqueId value from studentReference for Student Section Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: beginDate value for Student Section Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Section Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: endDate value for Student Section Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property for Student Section Association. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: homeroomIndicator value for the Student Section Association is \" + expectedHomeroomIndicator, () => {\r",
											"    pm.expect(response.homeroomIndicator, `'${expectedHomeroomIndicator}' was not found in the homeroomIndicator property for Student Section Association. Retrieved value is '${response.homeroomIndicator}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Association and getting the ID of the student section association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAssociationDate = latestStudentSectionAssociation ? latestStudentSectionAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAssociationDate', latestStudentSectionAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentSectionAssociationId\", latestStudentSectionAssociation.id);\r",
											"        console.log('s4StudentSectionAssociationId', pm.environment.get(\"s4StudentSectionAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s4StudentSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAssociations",
										"{{s4StudentSectionAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": [
						{
							"name": "Scenario 5 DELETE - Get Student Section Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s4DeletedStudentSectionAssociationId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s4DeletedStudentSectionAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAssociations",
										"{{s4DeletedStudentSectionAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 5 PUT - Get Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student School Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEntryDate = `${currentYear}-08-31`;\r",
											"let expectedEntryGradeLevelDescriptor = \"First Grade\";\r",
											"let expectedEntryTypeDescriptor = \"Next year school\";\r",
											"let expectedExitWithdrawDate = `${currentYear}-11-01`;\r",
											"let expectedExitWithdrawTypeDescriptor = \"Transferred\";\r",
											"let expectedRepeatGradeIndicator = false;\r",
											"let expectedResidencyStatusDescriptor = \"Resident of admin unit and school area\";\r",
											"let expectedSchoolChoiceTransfer = false;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value for the Student School Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from the schoolReference for the Student School Association. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: studentUniqueId value for the Student School Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from the studentReference for the Student School Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: entryDate value for the Student School Association is \" + expectedEntryDate, () => {\r",
											"    pm.expect(response.entryDate, `'${expectedEntryDate}' was not found in the entryDate property for the Student School Association. Retrieved value is '${response.entryDate}'`).to.eql(expectedEntryDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: entryGradeLevelDescriptor value for the Student School Association is \" + expectedEntryGradeLevelDescriptor, () => {\r",
											"    pm.expect(response.entryGradeLevelDescriptor, `'${expectedEntryGradeLevelDescriptor}' was not found in the entryGradeLevelDescriptor property for the Student School Association. Retrieved value is '${response.entryGradeLevelDescriptor}'`).to.contain(expectedEntryGradeLevelDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: entryTypeDescriptor value for the Student School Association is \" + expectedEntryTypeDescriptor, () => {\r",
											"    pm.expect(response.entryTypeDescriptor, `'${expectedEntryTypeDescriptor}' was not found in the expectedEntryTypeDescriptor property for the Student School Association. Retrieved value is '${response.entryTypeDescriptor}'`).to.contain(expectedEntryTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: exitWithdrawDate value for the Student School Association is \" + expectedExitWithdrawDate, () => {\r",
											"    pm.expect(response.exitWithdrawDate, `'${expectedExitWithdrawDate}' was not found in the exitWithdrawDate property for the Student School Association. Retrieved value is '${response.exitWithdrawDate}'`).to.eql(expectedExitWithdrawDate);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: exitWithdrawTypeDescriptor value for the Student School Association is \" + expectedExitWithdrawTypeDescriptor, () => {\r",
											"    pm.expect(response.exitWithdrawTypeDescriptor, `'${expectedExitWithdrawTypeDescriptor}' was not found in the exitWithdrawTypeDescriptor property for the Student School Association. Retrieved value is '${response.exitWithdrawTypeDescriptor}'`).to.eql(expectedExitWithdrawTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: repeatGradeIndicator value for the Student School Association is \" + expectedRepeatGradeIndicator, () => {\r",
											"    pm.expect(response.repeatGradeIndicator, `'${expectedRepeatGradeIndicator}' was not found in the repeatGradeIndicator property for the Student School Association. Retrieved value is '${response.repeatGradeIndicator}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: residencyStatusDescriptor value for the Student School Association is \" + expectedResidencyStatusDescriptor, () => {\r",
											"    pm.expect(response.residencyStatusDescriptor, `'${expectedResidencyStatusDescriptor}' was not found in the residencyStatusDescriptor property for the Student School Association. Retrieved value is '${response.residencyStatusDescriptor}'`).to.contain(expectedResidencyStatusDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: schoolChoiceTransfer value for the Student School Association is \" + expectedSchoolChoiceTransfer, () => {\r",
											"    pm.expect(response.schoolChoiceTransfer, `'${expectedSchoolChoiceTransfer}' was not found in the schoolChoiceTransfer property for the Student School Association. Retrieved value is '${response.schoolChoiceTransfer}'`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Association and getting the ID of the student school association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAssociationDate = latestStudentSchoolAssociation ? latestStudentSchoolAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAssociationDate', latestStudentSchoolAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s5StudentSchoolAssociationId\", latestStudentSchoolAssociation.id);\r",
											"        console.log('s5StudentSchoolAssociationId', pm.environment.get(\"s5StudentSchoolAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s5StudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s5StudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 6",
					"item": [
						{
							"name": "Scenario 6 DELETE - Get Student School Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s1DeletedStudentSchoolAssociationId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{s1DeletedStudentSchoolAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAssociations",
										"{{s1DeletedStudentSchoolAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "07-Parent",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Parent request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedFirstName = \"Michael\";\r",
											"let expectedLastSurname = \"Jones\";\r",
											"let expectedSexDescriptor = \"Male\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"654 Mission Hills\";\r",
											"let expectedApartmentRoomSuiteNumber = \"100\";\r",
											"let expectedNameOfCounty = \"WILLISTON\";\r",
											"let expectedDoNotPublishIndicator = true;\r",
											"let expectedElectronicMailAddress = \"michaeljones@email.com\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Home/Personal\";\r",
											"let expectedPrimaryEmailAddressIndicator = true;\r",
											"\r",
											"let parentUniqueIdSystemValue = pm.environment.get(\"parentUniqueIdSystemValue\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValue === \"\" || parentUniqueIdSystemValue === null) {\r",
											"    expectedParentUniqueId = \"333333\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: parentUniqueId value for Parent is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property for the Parent. Retrieved value is '${response.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: firstName value for Parent is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `'${expectedFirstName}' was not found in the firstName property for the Parent. Retrieved value is '${response.firstName}.'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: lastSurname value for Parent is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `'${expectedLastSurname}' was not found in the lastSurname property for the Parent. Retrieved value is '${response.lastSurname}.'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: lastSurname value for Parent is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Parent. Retrieved value is '${response.sexDescriptor}.'`).to.include(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: addressTypeDescriptor value for the Parent is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: city value for the Parent is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: postalCode value for the Parent is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: stateAbbreviationDescriptor value for the Parent is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: streetNumberName value for the Parent is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: apartmentRoomSuiteNumber value for the Parent is \" + expectedApartmentRoomSuiteNumber, () => {\r",
											"    let foundApartmentRoomSuiteNumber = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let apartmentRoomSuiteNumberItem = addressesArray[i];\r",
											"        let apartmentRoomSuiteNumber = apartmentRoomSuiteNumberItem.apartmentRoomSuiteNumber;\r",
											"        let addressTypeDescriptor = apartmentRoomSuiteNumberItem.addressTypeDescriptor;\r",
											"        if (apartmentRoomSuiteNumber === expectedApartmentRoomSuiteNumber && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundApartmentRoomSuiteNumber = true;\r",
											"        }\r",
											"    pm.expect(foundApartmentRoomSuiteNumber, `'${expectedApartmentRoomSuiteNumber}' with '${expectedAddressTypeDescriptor}' were not found in the apartmentRoomSuiteNumber property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.apartmentRoomSuiteNumber))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: nameOfCounty value for the Parent is \" + expectedNameOfCounty, () => {\r",
											"    let foundNameOfCounty = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let nameOfCountyItem = addressesArray[i];\r",
											"        let nameOfCounty = nameOfCountyItem.nameOfCounty;\r",
											"        let addressTypeDescriptor = nameOfCountyItem.addressTypeDescriptor;\r",
											"        if (nameOfCounty === expectedNameOfCounty && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundNameOfCounty = true;\r",
											"        }\r",
											"    pm.expect(foundNameOfCounty, `'${expectedNameOfCounty}' with '${expectedAddressTypeDescriptor}' was not found in the nameOfCounty property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.nameOfCounty))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 1 POST: doNotPublishIndicator value for the Parent is \" + expectedDoNotPublishIndicator, () => {\r",
											"    let foundDoNotPublishIndicator = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let doNotPublishIndicatorItem = addressesArray[i];\r",
											"        let doNotPublishIndicator = doNotPublishIndicatorItem.doNotPublishIndicator;\r",
											"        let addressTypeDescriptor = doNotPublishIndicatorItem.addressTypeDescriptor;\r",
											"        if (doNotPublishIndicator === expectedDoNotPublishIndicator && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundDoNotPublishIndicator = true;\r",
											"        }\r",
											"    pm.expect(foundDoNotPublishIndicator, `'${expectedDoNotPublishIndicator}' with '${expectedAddressTypeDescriptor}' was not found in the doNotPublishIndicator property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.doNotPublishIndicator))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"14 - Scenario 1 POST: electronicMailAddress value for the Parent is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailAddress = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property from electronicMails for Parents. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 1 POST: electronicMailTypeDescriptor value for the Parent is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor) && electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 1 POST: primaryEmailAddressIndicator value for the Parent is \" + expectedPrimaryEmailAddressIndicator, () => {\r",
											"    let foundPrimaryEmailAddressIndicator = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let primaryEmailAddressIndicatorItem = electronicMailsArray[i];\r",
											"        let primaryEmailAddressIndicator = primaryEmailAddressIndicatorItem.primaryEmailAddressIndicator;\r",
											"        let electronicMailAddress = primaryEmailAddressIndicatorItem.electronicMailAddress;\r",
											"        if ((primaryEmailAddressIndicator === expectedPrimaryEmailAddressIndicator) && (electronicMailAddress === expectedElectronicMailAddress)) {\r",
											"            foundPrimaryEmailAddressIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryEmailAddressIndicator, `'${expectedPrimaryEmailAddressIndicator}' with '${expectedElectronicMailAddress}' was not found in the primaryEmailAddressIndicator property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.primaryEmailAddressIndicator))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Parents and getting the ID of the parent\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/parents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestParent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestParentDate = latestParent ? latestParent._lastModifiedDate : null;\r",
											"        console.log('latestParentDate', latestParentDate);\r",
											"\r",
											"        pm.environment.set(\"s1ParentId\", latestParent.id);\r",
											"        console.log('s1ParentId', pm.environment.get(\"s1ParentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/parents/{{s1ParentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"parents",
										"{{s1ParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Parent Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Parent Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEmergencyContactStatus = true;\r",
											"let expectedPrimaryContactStatus = true;\r",
											"let expectedRelationDescriptor = \"Father\";\r",
											"\r",
											"let parentUniqueIdSystemValue = pm.environment.get(\"parentUniqueIdSystemValue\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValue === \"\" || parentUniqueIdSystemValue === null) {\r",
											"    expectedParentUniqueId = \"333333\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: parentUniqueId value for Student Parent Association is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentReference.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property from parentReference for Student Parent Association. Retrieved value is '${response.parentReference.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: studentUniqueId value for Student Parent Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Parent Association. Retrieved value is '${response.studentReference.studentUniqueId}.'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: emergencyContactStatus value for Student Parent Association is \" + expectedEmergencyContactStatus, () => {\r",
											"    pm.expect(response.emergencyContactStatus, `'${expectedEmergencyContactStatus}' was not found in the emergencyContactStatus property for Student Parent Association. Retrieved value is '${response.emergencyContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: primaryContactStatus value for Student Parent Association is \" + expectedPrimaryContactStatus, () => {\r",
											"    pm.expect(response.primaryContactStatus, `'${expectedPrimaryContactStatus}' was not found in the primaryContactStatus property for Student Parent Association. Retrieved value is '${response.primaryContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: relationDescriptor value for Student Parent Association is \" + expectedRelationDescriptor, () => {\r",
											"    pm.expect(response.relationDescriptor, `'${expectedRelationDescriptor}' was not found in the relationDescriptor property for Student Parent Association. Retrieved value is '${response.relationDescriptor}.'`).to.contain(expectedRelationDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Parent Association and getting the ID of the student parent association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentParentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentParentAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentParentAssociationsDate = latestStudentParentAssociation ? latestStudentParentAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentParentAssociationsDate', latestStudentParentAssociationsDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentParentAssociationId\", latestStudentParentAssociation.id);\r",
											"        console.log('s1StudentParentAssociationId', pm.environment.get(\"s1StudentParentAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentParentAssociations/{{s1StudentParentAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentParentAssociations",
										"{{s1StudentParentAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Parent request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedFirstName = \"Alexis\";\r",
											"let expectedLastSurname = \"Johnson\";\r",
											"let expectedSexDescriptor = \"Female\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"456 Cedar Street\";\r",
											"let expectedNameOfCounty = \"WILLISTON\";\r",
											"let expectedElectronicMailAddress = \"alexisjohnson@email.com\t\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Home/Personal\";\r",
											"\r",
											"let parentUniqueIdSystemValueS2 = pm.environment.get(\"parentUniqueIdSystemValueS2\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS2 === \"\" || parentUniqueIdSystemValueS2 === null) {\r",
											"    expectedParentUniqueId = \"444444\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: parentUniqueId value for Parent is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property for the Parent. Retrieved value is '${response.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: firstName value for Parent is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `'${expectedFirstName}' was not found in the firstName property for the Parent. Retrieved value is '${response.firstName}.'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: lastSurname value for Parent is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `'${expectedLastSurname}' was not found in the lastSurname property for the Parent. Retrieved value is '${response.lastSurname}.'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: lastSurname value for Parent is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Parent. Retrieved value is '${response.sexDescriptor}.'`).to.include(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: addressTypeDescriptor value for the Parent is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: city value for the Parent is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: postalCode value for the Parent is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: stateAbbreviationDescriptor value for the Parent is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: streetNumberName value for the Parent is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: nameOfCounty value for the Parent is \" + expectedNameOfCounty, () => {\r",
											"    let foundNameOfCounty = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let nameOfCountyItem = addressesArray[i];\r",
											"        let nameOfCounty = nameOfCountyItem.nameOfCounty;\r",
											"        let addressTypeDescriptor = nameOfCountyItem.addressTypeDescriptor;\r",
											"        if (nameOfCounty === expectedNameOfCounty && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundNameOfCounty = true;\r",
											"        }\r",
											"    pm.expect(foundNameOfCounty, `'${expectedNameOfCounty}' with '${expectedAddressTypeDescriptor}' was not found in the nameOfCounty property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.nameOfCounty))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: electronicMailAddress value for the Parent is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailAddress = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property from electronicMails for Parents. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 2 POST: electronicMailTypeDescriptor value for the Parent is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor) && electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Parents and getting the ID of the parent\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/parents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestParent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestParentDate = latestParent ? latestParent._lastModifiedDate : null;\r",
											"        console.log('latestParentDate', latestParentDate);\r",
											"\r",
											"        pm.environment.set(\"s2ParentId\", latestParent.id);\r",
											"        console.log('s2ParentId', pm.environment.get(\"s2ParentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/parents/{{s2ParentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"parents",
										"{{s2ParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Parent Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Parent Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedEmergencyContactStatus = true;\r",
											"let expectedPrimaryContactStatus = true;\r",
											"let expectedRelationDescriptor = \"Mother\";\r",
											"\r",
											"let parentUniqueIdSystemValueS2 = pm.environment.get(\"parentUniqueIdSystemValueS2\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS2 === \"\" || parentUniqueIdSystemValueS2 === null) {\r",
											"    expectedParentUniqueId = \"444444\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: parentUniqueId value for Student Parent Association is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentReference.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property from parentReference for Student Parent Association. Retrieved value is '${response.parentReference.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: studentUniqueId value for Student Parent Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Parent Association. Retrieved value is '${response.studentReference.studentUniqueId}.'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: emergencyContactStatus value for Student Parent Association is \" + expectedEmergencyContactStatus, () => {\r",
											"    pm.expect(response.emergencyContactStatus, `'${expectedEmergencyContactStatus}' was not found in the emergencyContactStatus property for Student Parent Association. Retrieved value is '${response.emergencyContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: primaryContactStatus value for Student Parent Association is \" + expectedPrimaryContactStatus, () => {\r",
											"    pm.expect(response.primaryContactStatus, `'${expectedPrimaryContactStatus}' was not found in the primaryContactStatus property for Student Parent Association. Retrieved value is '${response.primaryContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: relationDescriptor value for Student Parent Association is \" + expectedRelationDescriptor, () => {\r",
											"    pm.expect(response.relationDescriptor, `'${expectedRelationDescriptor}' was not found in the relationDescriptor property for Student Parent Association. Retrieved value is '${response.relationDescriptor}.'`).to.contain(expectedRelationDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Parent Association and getting the ID of the student parent association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentParentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentParentAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentParentAssociationsDate = latestStudentParentAssociation ? latestStudentParentAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentParentAssociationsDate', latestStudentParentAssociationsDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentParentAssociationId\", latestStudentParentAssociation.id);\r",
											"        console.log('s2StudentParentAssociationId', pm.environment.get(\"s2StudentParentAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentParentAssociations/{{s2StudentParentAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentParentAssociations",
										"{{s2StudentParentAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Parent request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedFirstName = \"Michael\";\r",
											"let expectedLastSurname = \"Jones\";\r",
											"let expectedSexDescriptor = \"Male\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"654 Mission Hills\";\r",
											"let expectedApartmentRoomSuiteNumber = \"100\";\r",
											"let expectedNameOfCounty = \"WILLISTON\";\r",
											"let expectedDoNotPublishIndicator = true;\r",
											"let expectedElectronicMailAddress = \"mJones@email.com\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Home/Personal\";\r",
											"let expectedPrimaryEmailAddressIndicator = true;\r",
											"\r",
											"let parentUniqueIdSystemValueS3 = pm.environment.get(\"parentUniqueIdSystemValueS3\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS3 === \"\" || parentUniqueIdSystemValueS3 === null) {\r",
											"    expectedParentUniqueId = \"333333\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: parentUniqueId value for Parent is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property for the Parent. Retrieved value is '${response.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: firstName value for Parent is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `'${expectedFirstName}' was not found in the firstName property for the Parent. Retrieved value is '${response.firstName}.'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: lastSurname value for Parent is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `'${expectedLastSurname}' was not found in the lastSurname property for the Parent. Retrieved value is '${response.lastSurname}.'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: lastSurname value for Parent is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Parent. Retrieved value is '${response.sexDescriptor}.'`).to.include(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: addressTypeDescriptor value for the Parent is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: city value for the Parent is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: postalCode value for the Parent is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: stateAbbreviationDescriptor value for the Parent is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: streetNumberName value for the Parent is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: apartmentRoomSuiteNumber value for the Parent is \" + expectedApartmentRoomSuiteNumber, () => {\r",
											"    let foundApartmentRoomSuiteNumber = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let apartmentRoomSuiteNumberItem = addressesArray[i];\r",
											"        let apartmentRoomSuiteNumber = apartmentRoomSuiteNumberItem.apartmentRoomSuiteNumber;\r",
											"        let addressTypeDescriptor = apartmentRoomSuiteNumberItem.addressTypeDescriptor;\r",
											"        if (apartmentRoomSuiteNumber === expectedApartmentRoomSuiteNumber && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundApartmentRoomSuiteNumber = true;\r",
											"        }\r",
											"    pm.expect(foundApartmentRoomSuiteNumber, `'${expectedApartmentRoomSuiteNumber}' with '${expectedAddressTypeDescriptor}' were not found in the apartmentRoomSuiteNumber property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.apartmentRoomSuiteNumber))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 PUT: nameOfCounty value for the Parent is \" + expectedNameOfCounty, () => {\r",
											"    let foundNameOfCounty = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let nameOfCountyItem = addressesArray[i];\r",
											"        let nameOfCounty = nameOfCountyItem.nameOfCounty;\r",
											"        let addressTypeDescriptor = nameOfCountyItem.addressTypeDescriptor;\r",
											"        if (nameOfCounty === expectedNameOfCounty && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundNameOfCounty = true;\r",
											"        }\r",
											"    pm.expect(foundNameOfCounty, `'${expectedNameOfCounty}' with '${expectedAddressTypeDescriptor}' was not found in the nameOfCounty property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.nameOfCounty))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 3 PUT: doNotPublishIndicator value for the Parent is \" + expectedDoNotPublishIndicator, () => {\r",
											"    let foundDoNotPublishIndicator = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let doNotPublishIndicatorItem = addressesArray[i];\r",
											"        let doNotPublishIndicator = doNotPublishIndicatorItem.doNotPublishIndicator;\r",
											"        let addressTypeDescriptor = doNotPublishIndicatorItem.addressTypeDescriptor;\r",
											"        if (doNotPublishIndicator === expectedDoNotPublishIndicator && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundDoNotPublishIndicator = true;\r",
											"        }\r",
											"    pm.expect(foundDoNotPublishIndicator, `'${expectedDoNotPublishIndicator}' with '${expectedAddressTypeDescriptor}' was not found in the doNotPublishIndicator property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.doNotPublishIndicator))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look at the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"14 - Scenario 3 PUT: electronicMailAddress value for the Parent is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailAddress = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property from electronicMails for Parents. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 3 PUT: electronicMailTypeDescriptor value for the Parent is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor) && electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 3 PUT: primaryEmailAddressIndicator value for the Parent is \" + expectedPrimaryEmailAddressIndicator, () => {\r",
											"    let foundPrimaryEmailAddressIndicator = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let primaryEmailAddressIndicatorItem = electronicMailsArray[i];\r",
											"        let primaryEmailAddressIndicator = primaryEmailAddressIndicatorItem.primaryEmailAddressIndicator;\r",
											"        let electronicMailAddress = primaryEmailAddressIndicatorItem.electronicMailAddress;\r",
											"        if ((primaryEmailAddressIndicator === expectedPrimaryEmailAddressIndicator) && (electronicMailAddress === expectedElectronicMailAddress)) {\r",
											"            foundPrimaryEmailAddressIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryEmailAddressIndicator, `'${expectedPrimaryEmailAddressIndicator}' with '${expectedElectronicMailAddress}' was not found in the primaryEmailAddressIndicator property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.primaryEmailAddressIndicator))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Parents and getting the ID of the parent\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/parents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestParent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestParentDate = latestParent ? latestParent._lastModifiedDate : null;\r",
											"        console.log('latestParentDate', latestParentDate);\r",
											"\r",
											"        pm.environment.set(\"s3ParentId\", latestParent.id);\r",
											"        console.log('s3ParentId', pm.environment.get(\"s3ParentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/parents/{{s3ParentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"parents",
										"{{s3ParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Parent Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Parent Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedEmergencyContactStatus = true;\r",
											"let expectedPrimaryContactStatus = false;\r",
											"let expectedRelationDescriptor = \"Father\";\r",
											"\r",
											"let parentUniqueIdSystemValueS3 = pm.environment.get(\"parentUniqueIdSystemValueS3\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS3 === \"\" || parentUniqueIdSystemValueS3 === null) {\r",
											"    expectedParentUniqueId = \"333333\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: parentUniqueId value for Student Parent Association is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentReference.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property from parentReference for Student Parent Association. Retrieved value is '${response.parentReference.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: studentUniqueId value for Student Parent Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Parent Association. Retrieved value is '${response.studentReference.studentUniqueId}.'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: emergencyContactStatus value for Student Parent Association is \" + expectedEmergencyContactStatus, () => {\r",
											"    pm.expect(response.emergencyContactStatus, `'${expectedEmergencyContactStatus}' was not found in the emergencyContactStatus property for Student Parent Association. Retrieved value is '${response.emergencyContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: primaryContactStatus value for Student Parent Association is \" + expectedPrimaryContactStatus, () => {\r",
											"    pm.expect(response.primaryContactStatus, `'${expectedPrimaryContactStatus}' was not found in the primaryContactStatus property for Student Parent Association. Retrieved value is '${response.primaryContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: relationDescriptor value for Student Parent Association is \" + expectedRelationDescriptor, () => {\r",
											"    pm.expect(response.relationDescriptor, `'${expectedRelationDescriptor}' was not found in the relationDescriptor property for Student Parent Association. Retrieved value is '${response.relationDescriptor}.'`).to.contain(expectedRelationDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Parent Association and getting the ID of the student parent association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentParentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentParentAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentParentAssociationsDate = latestStudentParentAssociation ? latestStudentParentAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentParentAssociationsDate', latestStudentParentAssociationsDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentParentAssociationId\", latestStudentParentAssociation.id);\r",
											"        console.log('s3StudentParentAssociationId', pm.environment.get(\"s3StudentParentAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentParentAssociations/{{s3StudentParentAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentParentAssociations",
										"{{s3StudentParentAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Parent request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedFirstName = \"Alexis\";\r",
											"let expectedLastSurname = \"Johnson\";\r",
											"let expectedSexDescriptor = \"Female\";\r",
											"let expectedAddressTypeDescriptor = \"Home\";\r",
											"let expectedCity = \"Grand Bend\";\r",
											"let expectedPostalCode = 78834;\r",
											"let expectedStateAbbreviationDescriptor = \"TX\";\r",
											"let expectedStreetNumberName = \"456 Cedar Bend\";\r",
											"let expectedNameOfCounty = \"WILLISTON\";\r",
											"let expectedElectronicMailAddress = \"alexisjohnson@email.com\t\";\r",
											"let expectedElectronicMailTypeDescriptor = \"Home/Personal\";\r",
											"\r",
											"let parentUniqueIdSystemValueS4 = pm.environment.get(\"parentUniqueIdSystemValueS4\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS4 === \"\" || parentUniqueIdSystemValueS4 === null) {\r",
											"    expectedParentUniqueId = \"444444\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: parentUniqueId value for Parent is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property for the Parent. Retrieved value is '${response.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: firstName value for Parent is \" + expectedFirstName, () => {\r",
											"    pm.expect(response.firstName, `'${expectedFirstName}' was not found in the firstName property for the Parent. Retrieved value is '${response.firstName}.'`).to.eql(expectedFirstName);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: lastSurname value for Parent is \" + expectedLastSurname, () => {\r",
											"    pm.expect(response.lastSurname, `'${expectedLastSurname}' was not found in the lastSurname property for the Parent. Retrieved value is '${response.lastSurname}.'`).to.eql(expectedLastSurname);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: lastSurname value for Parent is \" + expectedSexDescriptor, () => {\r",
											"    pm.expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Parent. Retrieved value is '${response.sexDescriptor}.'`).to.include(expectedSexDescriptor);\r",
											"});\r",
											"\r",
											"let addressesArray = response.addresses;\r",
											"pm.expect(addressesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: addressTypeDescriptor value for the Parent is \" + expectedAddressTypeDescriptor, () => {\r",
											"    let foundAddressTypeDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let addressTypeDescriptorItem = addressesArray[i];\r",
											"        let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;\r",
											"        if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundAddressTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: city value for the Parent is \" + expectedCity, () => {\r",
											"    let foundCity = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let cityItem = addressesArray[i];\r",
											"        let city = cityItem.city;\r",
											"        let addressTypeDescriptor = cityItem.addressTypeDescriptor;\r",
											"        if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundCity = true;\r",
											"        }\r",
											"    pm.expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: postalCode value for the Parent is \" + expectedPostalCode, () => {\r",
											"    let foundPostalCode = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let postalCodeItem = addressesArray[i];\r",
											"        let postalCode = postalCodeItem.postalCode;\r",
											"        let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;\r",
											"        if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundPostalCode = true;\r",
											"        }\r",
											"    pm.expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: stateAbbreviationDescriptor value for the Parent is \" + expectedStateAbbreviationDescriptor, () => {\r",
											"    let foundstateAbbreviationDescriptor = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let stateAbbreviationDescriptorItem = addressesArray[i];\r",
											"        let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;\r",
											"        let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;\r",
											"        if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundstateAbbreviationDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property from addresses for Parents. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: streetNumberName value for the Parent is \" + expectedStreetNumberName, () => {\r",
											"    let foundStreetNumberName = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let streetNumberNameItem = addressesArray[i];\r",
											"        let streetNumberName = streetNumberNameItem.streetNumberName;\r",
											"        let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;\r",
											"        if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundStreetNumberName = true;\r",
											"        }\r",
											"    pm.expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 4 PUT: nameOfCounty value for the Parent is \" + expectedNameOfCounty, () => {\r",
											"    let foundNameOfCounty = false;\r",
											"    for (let i = 0; i < addressesArray.length; i++) {\r",
											"        let nameOfCountyItem = addressesArray[i];\r",
											"        let nameOfCounty = nameOfCountyItem.nameOfCounty;\r",
											"        let addressTypeDescriptor = nameOfCountyItem.addressTypeDescriptor;\r",
											"        if (nameOfCounty === expectedNameOfCounty && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {\r",
											"            foundNameOfCounty = true;\r",
											"        }\r",
											"    pm.expect(foundNameOfCounty, `'${expectedNameOfCounty}' with '${expectedAddressTypeDescriptor}' was not found in the nameOfCounty property from addresses for Parenst. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.nameOfCounty))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   \r",
											"    }\r",
											"});\r",
											"\r",
											"let electronicMailsArray = response.electronicMails;\r",
											"pm.expect(electronicMailsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"12 - Scenario 4 PUT: electronicMailAddress value for the Parent is \" + expectedElectronicMailAddress, () => {\r",
											"    let foundElectronicMailAddress = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailAddressItem = electronicMailsArray[i];\r",
											"        let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;\r",
											"        if (electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailAddress = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property from electronicMails for Parents. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true;    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 4 PUT: electronicMailTypeDescriptor value for the Parent is \" + expectedElectronicMailTypeDescriptor, () => {\r",
											"    let foundElectronicMailTypeDescriptor = false;\r",
											"    for (let i = 0; i < electronicMailsArray.length; i++) {\r",
											"        let electronicMailTypeDescriptorItem = electronicMailsArray[i];\r",
											"        let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptor;\r",
											"        let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;\r",
											"        if (electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor) && electronicMailAddress === expectedElectronicMailAddress) {\r",
											"            foundElectronicMailTypeDescriptor = true;\r",
											"        }\r",
											"    pm.expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property from electronicMails for Parents. Retrieved values are '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information`).to.be.true;    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Parents and getting the ID of the parent\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/parents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestParent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestParentDate = latestParent ? latestParent._lastModifiedDate : null;\r",
											"        console.log('latestParentDate', latestParentDate);\r",
											"\r",
											"        pm.environment.set(\"s4ParentId\", latestParent.id);\r",
											"        console.log('s4ParentId', pm.environment.get(\"s4ParentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/parents/{{s4ParentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"parents",
										"{{s4ParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Student Parent Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student Parent Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedParentUniqueId;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedEmergencyContactStatus = false;\r",
											"let expectedPrimaryContactStatus = true;\r",
											"let expectedRelationDescriptor = \"Mother\";\r",
											"\r",
											"let parentUniqueIdSystemValueS4 = pm.environment.get(\"parentUniqueIdSystemValueS4\");\r",
											"expectedParentUniqueId = \"\";\r",
											"if (parentUniqueIdSystemValueS4 === \"\" || parentUniqueIdSystemValueS4 === null) {\r",
											"    expectedParentUniqueId = \"444444\";\r",
											"} else {\r",
											"    expectedParentUniqueId = parentUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: parentUniqueId value for Student Parent Association is \" + expectedParentUniqueId, () => {\r",
											"    pm.expect(response.parentReference.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property from parentReference for Student Parent Association. Retrieved value is '${response.parentReference.parentUniqueId}.'`).to.eql(expectedParentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: studentUniqueId value for Student Parent Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Parent Association. Retrieved value is '${response.studentReference.studentUniqueId}.'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: emergencyContactStatus value for Student Parent Association is \" + expectedEmergencyContactStatus, () => {\r",
											"    pm.expect(response.emergencyContactStatus, `'${expectedEmergencyContactStatus}' was not found in the emergencyContactStatus property for Student Parent Association. Retrieved value is '${response.emergencyContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: primaryContactStatus value for Student Parent Association is \" + expectedPrimaryContactStatus, () => {\r",
											"    pm.expect(response.primaryContactStatus, `'${expectedPrimaryContactStatus}' was not found in the primaryContactStatus property for Student Parent Association. Retrieved value is '${response.primaryContactStatus}.'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: relationDescriptor value for Student Parent Association is \" + expectedRelationDescriptor, () => {\r",
											"    pm.expect(response.relationDescriptor, `'${expectedRelationDescriptor}' was not found in the relationDescriptor property for Student Parent Association. Retrieved value is '${response.relationDescriptor}.'`).to.contain(expectedRelationDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Parent Association and getting the ID of the student parent association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentParentAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentParentAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentParentAssociationsDate = latestStudentParentAssociation ? latestStudentParentAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentParentAssociationsDate', latestStudentParentAssociationsDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentParentAssociationId\", latestStudentParentAssociation.id);\r",
											"        console.log('s4StudentParentAssociationId', pm.environment.get(\"s4StudentParentAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentParentAssociations/{{s4StudentParentAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentParentAssociations",
										"{{s4StudentParentAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "08-StudentCohort",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Cohort request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedCohortTypeDescriptor = \"Study Hall\";\r",
											"let expectedCohortDescription = \"Cohort 1 Description\";\r",
											"let expectedCohortScopeDescriptor = \"District\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Cohort is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Cohort. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValue = pm.environment.get(\"cohortIdentifierSystemValue\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValue === \"\" || cohortIdentifierSystemValue === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: cohortIdentifier value for Cohort is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the cohortIdentifier property for Cohort. Retrieved value is '${response.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: cohortTypeDescriptor value for Cohort is: \" + expectedCohortTypeDescriptor, () => {\r",
											"    pm.expect(response.cohortTypeDescriptor, `'${expectedCohortTypeDescriptor}' value was not found in the cohortTypeDescriptor property for Cohort. Retrieved value is '${response.cohortTypeDescriptor}'.`).to.contain(expectedCohortTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: cohortDescription value for Cohort is: \" + expectedCohortDescription, () => {\r",
											"    pm.expect(response.cohortDescription, `'${expectedCohortDescription}' value was not found in the cohortDescription property for Cohort. Retrieved value is '${response.cohortDescription}'.`).to.eql(expectedCohortDescription);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: cohortScopeDescriptor value for Cohort is: \" + expectedCohortScopeDescriptor, () => {\r",
											"    pm.expect(response.cohortScopeDescriptor, `'${expectedCohortScopeDescriptor}' value was not found in the cohortScopeDescriptor property for Cohort. Retrieved value is '${response.cohortScopeDescriptor}'.`).to.contain(expectedCohortScopeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Cohorts and getting the ID of the cohort\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/cohorts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCohort = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCohortDate = latestCohort ? latestCohort._lastModifiedDate : null;\r",
											"        console.log('latestCohortDate', latestCohortDate);\r",
											"\r",
											"        pm.environment.set(\"s1CohortId\", latestCohort.id);\r",
											"        console.log('s1CohortId', pm.environment.get(\"s1CohortId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/cohorts/{{s1CohortId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"cohorts",
										"{{s1CohortId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Staff Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Staff Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"let expectedStaffUniqueId;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Staff Cohort Association is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValue = pm.environment.get(\"cohortIdentifierSystemValue\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValue === \"\" || cohortIdentifierSystemValue === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: cohortIdentifier value from cohortReference for Staff Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: beginDate value for Staff Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Staff Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValue = pm.environment.get(\"staffUniqueIdSystemValue\");\r",
											"expectedStaffUniqueId = \"\";\r",
											"if (staffUniqueIdSystemValue === \"\" || staffUniqueIdSystemValue === null) {\r",
											"    expectedStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    expectedStaffUniqueId = staffUniqueIdSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: staffUniqueId value from staffReference for Staff Cohort Association is: \" + expectedStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${expectedStaffUniqueId}' value was not found in the staffUniqueId property from staffReference for Staff Cohort Association. Retrieved value is '${response.staffReference.staffUniqueId}'.`).to.eql(expectedStaffUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStaffCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStaffCohortAssociationDate = latestStaffCohortAssociation ? latestStaffCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStaffCohortAssociationDate', latestStaffCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StaffCohortAssociationId\", latestStaffCohortAssociation.id);\r",
											"        console.log('s1StaffCohortAssociationId', pm.environment.get(\"s1StaffCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffCohortAssociations/{{s1StaffCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffCohortAssociations",
										"{{s1StaffCohortAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value from cohortReference for Student Cohort Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`)\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValue = pm.environment.get(\"cohortIdentifierSystemValue\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValue === \"\" || cohortIdentifierSystemValue === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: cohortIdentifier value from cohortReference for Student Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: studentUniqueId value from studentReference for Student Cohort Association is: \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student Cohort Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: beginDate value for Student Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentCohortAssociationDate = latestStudentCohortAssociation ? latestStudentCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentCohortAssociationDate', latestStudentCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentCohortAssociationId\", latestStudentCohortAssociation.id);\r",
											"        console.log('s1StudentCohortAssociationId', pm.environment.get(\"s1StudentCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentCohortAssociations/{{s1StudentCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentCohortAssociations",
										"{{s1StudentCohortAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Cohort request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedCohortTypeDescriptor = \"Study Hall\";\r",
											"let expectedCohortDescription = \"Cohort 2 Description\";\r",
											"let expectedCohortScopeDescriptor = \"District\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value from educationOrganizationReference for Cohort is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Cohort. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS2 = pm.environment.get(\"cohortIdentifierSystemValueS2\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS2 === \"\" || cohortIdentifierSystemValueS2 === null) {\r",
											"    expectedCohortIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: cohortIdentifier value for Cohort is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the cohortIdentifier property for Cohort. Retrieved value is '${response.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: cohortTypeDescriptor value for Cohort is: \" + expectedCohortTypeDescriptor, () => {\r",
											"    pm.expect(response.cohortTypeDescriptor, `'${expectedCohortTypeDescriptor}' value was not found in the cohortTypeDescriptor property for Cohort. Retrieved value is '${response.cohortTypeDescriptor}'.`).to.contain(expectedCohortTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: cohortDescription value for Cohort is: \" + expectedCohortDescription, () => {\r",
											"    pm.expect(response.cohortDescription, `'${expectedCohortDescription}' value was not found in the cohortDescription property for Cohort. Retrieved value is '${response.cohortDescription}'.`).to.eql(expectedCohortDescription);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: cohortScopeDescriptor value for Cohort is: \" + expectedCohortScopeDescriptor, () => {\r",
											"    pm.expect(response.cohortScopeDescriptor, `'${expectedCohortScopeDescriptor}' value was not found in the cohortScopeDescriptor property for Cohort. Retrieved value is '${response.cohortScopeDescriptor}'.`).to.contain(expectedCohortScopeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Cohorts and getting the ID of the cohort\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/cohorts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCohort = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCohortDate = latestCohort ? latestCohort._lastModifiedDate : null;\r",
											"        console.log('latestCohortDate', latestCohortDate);\r",
											"\r",
											"        pm.environment.set(\"s2CohortId\", latestCohort.id);\r",
											"        console.log('s2CohortId', pm.environment.get(\"s2CohortId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/cohorts/{{s2CohortId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"cohorts",
										"{{s2CohortId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Staff Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Staff Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"let expectedStaffUniqueId;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value from educationOrganizationReference for Staff Cohort Association is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS2 = pm.environment.get(\"cohortIdentifierSystemValueS2\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS2 === \"\" || cohortIdentifierSystemValueS2 === null) {\r",
											"    expectedCohortIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: cohortIdentifier value from cohortReference for Staff Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: beginDate value for Staff Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Staff Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS2 = pm.environment.get(\"staffUniqueIdSystemValueS2\");\r",
											"expectedStaffUniqueId = \"\";\r",
											"if (staffUniqueIdSystemValueS2 === \"\" || staffUniqueIdSystemValueS2 === null) {\r",
											"    expectedStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    expectedStaffUniqueId = staffUniqueIdSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: staffUniqueId value from staffReference for Staff Cohort Association is: \" + expectedStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${expectedStaffUniqueId}' value was not found in the staffUniqueId property from staffReference for Staff Cohort Association. Retrieved value is '${response.staffReference.staffUniqueId}'.`).to.eql(expectedStaffUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStaffCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStaffCohortAssociationDate = latestStaffCohortAssociation ? latestStaffCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStaffCohortAssociationDate', latestStaffCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StaffCohortAssociationId\", latestStaffCohortAssociation.id);\r",
											"        console.log('s2StaffCohortAssociationId', pm.environment.get(\"s2StaffCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffCohortAssociations/{{s2StaffCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffCohortAssociations",
										"{{s2StaffCohortAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value from cohortReference for Student Cohort Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`)\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS2 = pm.environment.get(\"cohortIdentifierSystemValueS2\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS2 === \"\" || cohortIdentifierSystemValueS2 === null) {\r",
											"    expectedCohortIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: cohortIdentifier value from cohortReference for Student Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: studentUniqueId value from studentReference for Student Cohort Association is: \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student Cohort Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: beginDate value for Student Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentCohortAssociationDate = latestStudentCohortAssociation ? latestStudentCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentCohortAssociationDate', latestStudentCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentCohortAssociationId\", latestStudentCohortAssociation.id);\r",
											"        console.log('s2StudentCohortAssociationId', pm.environment.get(\"s2StudentCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentCohortAssociations/{{s2StudentCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentCohortAssociations",
										"{{s2StudentCohortAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Cohort request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedCohortTypeDescriptor = \"Field Trip\";\r",
											"let expectedCohortDescription = \"Cohort 1 Description\";\r",
											"let expectedCohortScopeDescriptor = \"District\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value from educationOrganizationReference for Cohort is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Cohort. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValue = pm.environment.get(\"cohortIdentifierSystemValue\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValue === \"\" || cohortIdentifierSystemValue === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: cohortIdentifier value for Cohort is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the cohortIdentifier property for Cohort. Retrieved value is '${response.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: cohortTypeDescriptor value for Cohort is: \" + expectedCohortTypeDescriptor, () => {\r",
											"    pm.expect(response.cohortTypeDescriptor, `'${expectedCohortTypeDescriptor}' value was not found in the cohortTypeDescriptor property for Cohort. Retrieved value is '${response.cohortTypeDescriptor}'.`).to.contain(expectedCohortTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: cohortDescription value for Cohort is: \" + expectedCohortDescription, () => {\r",
											"    pm.expect(response.cohortDescription, `'${expectedCohortDescription}' value was not found in the cohortDescription property for Cohort. Retrieved value is '${response.cohortDescription}'.`).to.eql(expectedCohortDescription);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: cohortScopeDescriptor value for Cohort is: \" + expectedCohortScopeDescriptor, () => {\r",
											"    pm.expect(response.cohortScopeDescriptor, `'${expectedCohortScopeDescriptor}' value was not found in the cohortScopeDescriptor property for Cohort. Retrieved value is '${response.cohortScopeDescriptor}'.`).to.contain(expectedCohortScopeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Cohorts and getting the ID of the cohort\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/cohorts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCohort = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCohortDate = latestCohort ? latestCohort._lastModifiedDate : null;\r",
											"        console.log('latestCohortDate', latestCohortDate);\r",
											"\r",
											"        pm.environment.set(\"s3CohortId\", latestCohort.id);\r",
											"        console.log('s3CohortId', pm.environment.get(\"s3CohortId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/cohorts/{{s3CohortId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"cohorts",
										"{{s3CohortId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT- Get Staff Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Staff Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"let expectedEndDate = `${currentYear}-12-20`;\r",
											"let expectedStaffUniqueId;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value from educationOrganizationReference for Staff Cohort Association is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS3 = pm.environment.get(\"cohortIdentifierSystemValueS3\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS3 === \"\" || cohortIdentifierSystemValueS3 === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: cohortIdentifier value from cohortReference for Staff Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: beginDate value for Staff Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Staff Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: endDate value for Staff Cohort Association is: \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Staff Cohort Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS3 = pm.environment.get(\"staffUniqueIdSystemValueS3\");\r",
											"expectedStaffUniqueId = \"\";\r",
											"if (staffUniqueIdSystemValueS3 === \"\" || staffUniqueIdSystemValueS3 === null) {\r",
											"    expectedStaffUniqueId = \"207220\";\r",
											"} else {\r",
											"    expectedStaffUniqueId = staffUniqueIdSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: staffUniqueId value from staffReference for Staff Cohort Association is: \" + expectedStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${expectedStaffUniqueId}' value was not found in the staffUniqueId property from staffReference for Staff Cohort Association. Retrieved value is '${response.staffReference.staffUniqueId}'.`).to.eql(expectedStaffUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStaffCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStaffCohortAssociationDate = latestStaffCohortAssociation ? latestStaffCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStaffCohortAssociationDate', latestStaffCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StaffCohortAssociationId\", latestStaffCohortAssociation.id);\r",
											"        console.log('s3StaffCohortAssociationId', pm.environment.get(\"s3StaffCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffCohortAssociations/{{s3StaffCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffCohortAssociations",
										"{{s3StaffCohortAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"let expectedEndDate = `${currentYear}-09-21`;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value from cohortReference for Student Cohort Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`)\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS3 = pm.environment.get(\"cohortIdentifierSystemValueS3\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS3 === \"\" || cohortIdentifierSystemValueS3 === null) {\r",
											"    expectedCohortIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: cohortIdentifier value from cohortReference for Student Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Cohort Association is: \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student Cohort Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: beginDate value for Student Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: endDate value for Student Cohort Association is: \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Student Cohort Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentCohortAssociationDate = latestStudentCohortAssociation ? latestStudentCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentCohortAssociationDate', latestStudentCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentCohortAssociationId\", latestStudentCohortAssociation.id);\r",
											"        console.log('s3StudentCohortAssociationId', pm.environment.get(\"s3StudentCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentCohortAssociations/{{s3StudentCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentCohortAssociations",
										"{{s3StudentCohortAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Cohort request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedCohortTypeDescriptor = \"Extracurricular Activity\";\r",
											"let expectedCohortDescription = \"Cohort 2 Description\";\r",
											"let expectedCohortScopeDescriptor = \"District\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: educationOrganizationId value from educationOrganizationReference for Cohort is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Cohort. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS4 = pm.environment.get(\"cohortIdentifierSystemValueS4\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS4 === \"\" || cohortIdentifierSystemValueS4 === null) {\r",
											"    expectedCohortIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: cohortIdentifier value for Cohort is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the cohortIdentifier property for Cohort. Retrieved value is '${response.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: cohortTypeDescriptor value for Cohort is: \" + expectedCohortTypeDescriptor, () => {\r",
											"    pm.expect(response.cohortTypeDescriptor, `'${expectedCohortTypeDescriptor}' value was not found in the cohortTypeDescriptor property for Cohort. Retrieved value is '${response.cohortTypeDescriptor}'.`).to.contain(expectedCohortTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: cohortDescription value for Cohort is: \" + expectedCohortDescription, () => {\r",
											"    pm.expect(response.cohortDescription, `'${expectedCohortDescription}' value was not found in the cohortDescription property for Cohort. Retrieved value is '${response.cohortDescription}'.`).to.eql(expectedCohortDescription);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: cohortScopeDescriptor value for Cohort is: \" + expectedCohortScopeDescriptor, () => {\r",
											"    pm.expect(response.cohortScopeDescriptor, `'${expectedCohortScopeDescriptor}' value was not found in the cohortScopeDescriptor property for Cohort. Retrieved value is '${response.cohortScopeDescriptor}'.`).to.contain(expectedCohortScopeDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Cohorts and getting the ID of the cohort\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/cohorts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCohort = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCohortDate = latestCohort ? latestCohort._lastModifiedDate : null;\r",
											"        console.log('latestCohortDate', latestCohortDate);\r",
											"\r",
											"        pm.environment.set(\"s4CohortId\", latestCohort.id);\r",
											"        console.log('s4CohortId', pm.environment.get(\"s4CohortId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/cohorts/{{s4CohortId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"cohorts",
										"{{s4CohortId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT- Get Staff Cohort Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Staff Cohort Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCohortIdentifier;\r",
											"let expectedBeginDate = `${currentYear}-09-14`;\r",
											"let expectedEndDate = `${currentYear}-12-20`;\r",
											"let expectedStaffUniqueId;\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: educationOrganizationId value from educationOrganizationReference for Staff Cohort Association is: \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"let cohortIdentifierSystemValueS4 = pm.environment.get(\"cohortIdentifierSystemValueS4\");\r",
											"expectedCohortIdentifier = \"\";\r",
											"if (cohortIdentifierSystemValueS4 === \"\" || cohortIdentifierSystemValueS4 === null) {\r",
											"    expectedCohortIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedCohortIdentifier = cohortIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: cohortIdentifier value from cohortReference for Staff Cohort Association is: \" + expectedCohortIdentifier, () => {\r",
											"    pm.expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: beginDate value for Staff Cohort Association is: \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Staff Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: endDate value for Staff Cohort Association is: \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Staff Cohort Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"let staffUniqueIdSystemValueS4 = pm.environment.get(\"staffUniqueIdSystemValueS4\");\r",
											"expectedStaffUniqueId = \"\";\r",
											"if (staffUniqueIdSystemValueS4 === \"\" || staffUniqueIdSystemValueS4 === null) {\r",
											"    expectedStaffUniqueId = \"207269\";\r",
											"} else {\r",
											"    expectedStaffUniqueId = staffUniqueIdSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: staffUniqueId value from staffReference for Staff Cohort Association is: \" + expectedStaffUniqueId, () => {\r",
											"    pm.expect(response.staffReference.staffUniqueId, `'${expectedStaffUniqueId}' value was not found in the staffUniqueId property from staffReference for Staff Cohort Association. Retrieved value is '${response.staffReference.staffUniqueId}'.`).to.eql(expectedStaffUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Staff Cohort Association and getting the ID of the staff cohort association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/staffCohortAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStaffCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStaffCohortAssociationDate = latestStaffCohortAssociation ? latestStaffCohortAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStaffCohortAssociationDate', latestStaffCohortAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s4StaffCohortAssociationId\", latestStaffCohortAssociation.id);\r",
											"        console.log('s4StaffCohortAssociationId', pm.environment.get(\"s4StaffCohortAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/staffCohortAssociations/{{s4StaffCohortAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"staffCohortAssociations",
										"{{s4StaffCohortAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": [
						{
							"name": "Scenario 5 DELETE - Get Cohort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s4DeletedCohortId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/cohorts/{{s4DeletedCohortId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"cohorts",
										"{{s4DeletedCohortId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "09-StudentDiscipline",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Discipline Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Discipline Action request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedDisciplineActionIdentifier = \"11\";\r",
											"let expectedDisciplineDescriptor = \"Out of School Suspension\";\r",
											"let expectedDisciplineDate = `${currentYear}-09-30`;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedActualDisciplineActionLength = 2;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedIepPlacementMeetingIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: disciplineActionIdentifier value for Discipline Action is \" + expectedDisciplineActionIdentifier, () => {\r",
											"    pm.expect(response.disciplineActionIdentifier, `'${expectedDisciplineActionIdentifier}' value was not found in the disciplineActionIdentifier property for Discipline Action. Retrieved value is '${response.disciplineActionIdentifier}'.`).to.eql(expectedDisciplineActionIdentifier);\r",
											"});\r",
											"\r",
											"let disciplinesArray = response.disciplines;\r",
											"pm.expect(disciplinesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: expectedDisciplineDescriptor value for Discipline Action is \" + expectedDisciplineDescriptor, () => {\r",
											"    let foundDisciplineDescriptor = false;\r",
											"    for (let i = 0; i < disciplinesArray.length; i++) { \r",
											"        let disciplineDescriptorItem = disciplinesArray[i];\r",
											"        let disciplineDescriptor = disciplineDescriptorItem.disciplineDescriptor;\r",
											"        if (disciplineDescriptor.includes(expectedDisciplineDescriptor)) {\r",
											"            foundDisciplineDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundDisciplineDescriptor, `'${expectedDisciplineDescriptor}' value was not found in the disciplineDescriptor property for Discipline Action. Retrieved value is '${JSON.stringify(disciplinesArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: disciplineDate value for Discipline Action is \" + expectedDisciplineDate, () => {\r",
											"    pm.expect(response.disciplineDate, `'${expectedDisciplineDate}' was not found in the disciplineDate property for Discipline Action. Retrieved value is '${response.disciplineDate}'`).to.eql(expectedDisciplineDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: studentUniqueId value for Discipline Action is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Discipline Action. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: actualDisciplineActionLength value for Discipline Action is \" + expectedActualDisciplineActionLength, () => {\r",
											"    pm.expect(response.actualDisciplineActionLength, `'${expectedActualDisciplineActionLength}' was not found in the actualDisciplineActionLength property for Discipline Action. Retrieved value is '${response.actualDisciplineActionLength}'`).to.eql(expectedActualDisciplineActionLength);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: schoolId value from responsibilitySchoolReference for Discipline Action is: \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.responsibilitySchoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from responsibilitySchoolReference for Discipline Action. Retrieved value is '${response.responsibilitySchoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: iepPlacementMeetingIndicator value for Discipline Action is \" + expectedIepPlacementMeetingIndicator, () => {\r",
											"    pm.expect(response.iepPlacementMeetingIndicator, `'${expectedIepPlacementMeetingIndicator}' was not found in the iepPlacementMeetingIndicator property for Discipline Action. Retrieved value is '${response.iepPlacementMeetingIndicator}'`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Action and getting the ID of the discipline action\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineActions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineAction = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineActionDate = latestDisciplineAction ? latestDisciplineAction._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineActionDate', latestDisciplineActionDate);\r",
											"\r",
											"        pm.environment.set(\"s1DisciplineActionId\", latestDisciplineAction.id);\r",
											"        console.log('s1DisciplineActionId', pm.environment.get(\"s1DisciplineActionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineActions/{{s1DisciplineActionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineActions",
										"{{s1DisciplineActionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Discipline Incident",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Discipline Incident request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedIncidentDate = `${currentYear}-09-25`;\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedBehaviorDescriptor = \"School Code of Conduct\";\r",
											"let expectedIncidentLocationDescriptor = \"School bus\";\r",
											"let expectedReporterDescriptionDescriptor = \"Staff\";\r",
											"let expectedReporterName = \"Loyo, John\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: incidentDate value for Discipline Incident is \" + expectedIncidentDate, () => {\r",
											"    pm.expect(response.incidentDate, `'${expectedIncidentDate}' value was not found in the incidentDate property for Discipline Incident. Retrieved value is '${response.incidentDate}'.`).to.eql(expectedIncidentDate);\r",
											"});\r",
											"\r",
											"let incidentIdentifierSystemValue = pm.environment.get(\"incidentIdentifierSystemValue\");\r",
											"expectedIncidentIdentifier = \"\";\r",
											"if (incidentIdentifierSystemValue === \"\" || incidentIdentifierSystemValue === null) {\r",
											"    expectedIncidentIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: incidentIdentifier value for Discipline Incident is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.incidentIdentifier, `'${expectedIncidentIdentifier}' value was not found in the incidentIdentifier property for Discipline Incident. Retrieved value is '${response.incidentIdentifier}'.`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolId value from schoolReference for Discipline Incident is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from schoolReference for Discipline Incident. Retrieved value is '${response.schoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"let behaviorsArray = response.behaviors;\r",
											"pm.expect(behaviorsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: behaviorDescriptor value for Discipline Incident is \" + expectedBehaviorDescriptor, () => {\r",
											"    let foundBehaviorDescriptor = false;\r",
											"    for (let i = 0; i < behaviorsArray.length; i++) { \r",
											"        let behaviorDescriptorItem = behaviorsArray[i];\r",
											"        let behaviorDescriptor = behaviorDescriptorItem.behaviorDescriptor;\r",
											"        if (behaviorDescriptor.includes(expectedBehaviorDescriptor)) {\r",
											"            foundBehaviorDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundBehaviorDescriptor, `'${expectedBehaviorDescriptor}' value was not found in the behaviorDescriptor property for Discipline Incident. Retrieved value is '${JSON.stringify(behaviorsArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: incidentLocationDescriptor value for Discipline Incident is \" + expectedIncidentLocationDescriptor, () => {\r",
											"    pm.expect(response.incidentLocationDescriptor, `'${expectedIncidentLocationDescriptor}' value was not found in the incidentLocationDescriptor property for Discipline Incident. Retrieved value is '${response.incidentLocationDescriptor}'.`).to.contain(expectedIncidentLocationDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: reporterDescriptionDescriptor value for Discipline Incident is \" + expectedReporterDescriptionDescriptor, () => {\r",
											"    pm.expect(response.reporterDescriptionDescriptor, `'${expectedReporterDescriptionDescriptor}' value was not found in the reporterDescriptionDescriptor property for Discipline Incident. Retrieved value is '${response.reporterDescriptionDescriptor}'.`).to.contain(expectedReporterDescriptionDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: reporterName value for Discipline Incident is \" + expectedReporterName, () => {\r",
											"    pm.expect(response.reporterName, `'${expectedReporterName}' value was not found in the reporterName property for Discipline Incident. Retrieved value is '${response.reporterName}'.`).to.eql(expectedReporterName);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Incident and getting the ID of the discipline incident\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineIncidents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineIncident = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineIncidentDate = latestDisciplineIncident ? latestDisciplineIncident._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineIncidentDate', latestDisciplineIncidentDate);\r",
											"\r",
											"        pm.environment.set(\"s1DisciplineIncidentId\", latestDisciplineIncident.id);\r",
											"        console.log('s1DisciplineIncidentId', pm.environment.get(\"s1DisciplineIncidentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineIncidents/{{s1DisciplineIncidentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineIncidents",
										"{{s1DisciplineIncidentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Discipline Incident Behavior Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Discipline Incident Behavior Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedBehaviorDescriptor = \"School Code of Conduct\";\r",
											"let expectedStudentParticipationCodeDescriptor = \"Perpetrator\"; // studentParticipationCodeDescriptor attibute is not present in the endpoint\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"\r",
											"let incidentIdentifierSystemValue = pm.environment.get(\"incidentIdentifierSystemValue\");\r",
											"\r",
											"if (incidentIdentifierSystemValue === \"\" || incidentIdentifierSystemValue === null) {\r",
											"    expectedIncidentIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: incidentIdentifier value from disciplineIncidentReference for Student Discipline Incident Behavior Association is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.disciplineIncidentReference.incidentIdentifier, `'${expectedIncidentIdentifier}' was not found in the incidentIdentifier property from disciplineIncidentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.disciplineIncidentReference.incidentIdentifier}'`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from disciplineIncidentReference for Student Discipline Incident Behavior Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.disciplineIncidentReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from disciplineIncidentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.disciplineIncidentReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: behaviorDescriptor value for Student Discipline Incident Behavior Association is \" + expectedBehaviorDescriptor, () => {\r",
											"    pm.expect(response.behaviorDescriptor, `'${expectedBehaviorDescriptor}' was not found in the behaviorDescriptor property for Student Discipline Incident Behavior Association. Retrieved value is '${response.behaviorDescriptor}'`).to.include(expectedBehaviorDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: studentUniqueId value from studentReference for Student Discipline Incident Behavior Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Discipline Incident Behavior Association and getting the ID of student discipline incident behavior association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentDisciplineIncidentBehaviorAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentDisciplineIncidentBehaviorAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDisciplineIncidentBehaviorAssociationDate = latestStudentDisciplineIncidentBehaviorAssociation ? latestStudentDisciplineIncidentBehaviorAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentDisciplineIncidentBehaviorAssociationDate', latestStudentDisciplineIncidentBehaviorAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentDisciplineIncidentBehaviorAssociationId\", latestStudentDisciplineIncidentBehaviorAssociation.id);\r",
											"        console.log('s1StudentDisciplineIncidentBehaviorAssociationId', pm.environment.get(\"s1StudentDisciplineIncidentBehaviorAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentDisciplineIncidentBehaviorAssociations/{{s1StudentDisciplineIncidentBehaviorAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentDisciplineIncidentBehaviorAssociations",
										"{{s1StudentDisciplineIncidentBehaviorAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Discipline Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Discipline Action request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedDisciplineActionIdentifier = \"22\";\r",
											"let expectedDisciplineDescriptor = \"In School Suspension\";\r",
											"let expectedDisciplineDate = `${currentYear}-09-30`;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedActualDisciplineActionLength = 5;\r",
											"let expectedSchoolId = 255901107;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: disciplineActionIdentifier value for Discipline Action is \" + expectedDisciplineActionIdentifier, () => {\r",
											"    pm.expect(response.disciplineActionIdentifier, `'${expectedDisciplineActionIdentifier}' value was not found in the disciplineActionIdentifier property for Discipline Action. Retrieved value is '${response.disciplineActionIdentifier}'.`).to.eql(expectedDisciplineActionIdentifier);\r",
											"});\r",
											"\r",
											"let disciplinesArray = response.disciplines;\r",
											"pm.expect(disciplinesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: expectedDisciplineDescriptor value for Discipline Action is \" + expectedDisciplineDescriptor, () => {\r",
											"    let foundDisciplineDescriptor = false;\r",
											"    for (let i = 0; i < disciplinesArray.length; i++) { \r",
											"        let disciplineDescriptorItem = disciplinesArray[i];\r",
											"        let disciplineDescriptor = disciplineDescriptorItem.disciplineDescriptor;\r",
											"        if (disciplineDescriptor.includes(expectedDisciplineDescriptor)) {\r",
											"            foundDisciplineDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundDisciplineDescriptor, `'${expectedDisciplineDescriptor}' value was not found in the disciplineDescriptor property for Discipline Action. Retrieved value is '${JSON.stringify(disciplinesArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: disciplineDate value for Discipline Action is \" + expectedDisciplineDate, () => {\r",
											"    pm.expect(response.disciplineDate, `'${expectedDisciplineDate}' was not found in the disciplineDate property for Discipline Action. Retrieved value is '${response.disciplineDate}'`).to.eql(expectedDisciplineDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: studentUniqueId value for Discipline Action is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Discipline Action. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: actualDisciplineActionLength value for Discipline Action is \" + expectedActualDisciplineActionLength, () => {\r",
											"    pm.expect(response.actualDisciplineActionLength, `'${expectedActualDisciplineActionLength}' was not found in the actualDisciplineActionLength property for Discipline Action. Retrieved value is '${response.actualDisciplineActionLength}'`).to.eql(expectedActualDisciplineActionLength);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: schoolId value from responsibilitySchoolReference for Discipline Action is: \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.responsibilitySchoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from responsibilitySchoolReference for Discipline Action. Retrieved value is '${response.responsibilitySchoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Action and getting the ID of the discipline action\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineActions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineAction = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineActionDate = latestDisciplineAction ? latestDisciplineAction._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineActionDate', latestDisciplineActionDate);\r",
											"\r",
											"        pm.environment.set(\"s2DisciplineActionId\", latestDisciplineAction.id);\r",
											"        console.log('s2DisciplineActionId', pm.environment.get(\"s2DisciplineActionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineActions/{{s2DisciplineActionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineActions",
										"{{s2DisciplineActionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Discipline Incident",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Discipline Incident request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedIncidentDate = `${currentYear}-09-25`;\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedBehaviorDescriptor = \"State Offense\";\r",
											"let expectedIncidentLocationDescriptor = \"Library/media center\";\r",
											"let expectedReporterDescriptionDescriptor = \"Staff\";\r",
											"let expectedReporterName = \"Smith, Jane\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: incidentDate value for Discipline Incident is \" + expectedIncidentDate, () => {\r",
											"    pm.expect(response.incidentDate, `'${expectedIncidentDate}' value was not found in the incidentDate property for Discipline Incident. Retrieved value is '${response.incidentDate}'.`).to.eql(expectedIncidentDate);\r",
											"});\r",
											"\r",
											"let incidentIdentifierSystemValueS2 = pm.environment.get(\"incidentIdentifierSystemValueS2\");\r",
											"expectedIncidentIdentifier = \"\";\r",
											"if (incidentIdentifierSystemValueS2 === \"\" || incidentIdentifierSystemValueS2 === null) {\r",
											"    expectedIncidentIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: incidentIdentifier value for Discipline Incident is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.incidentIdentifier, `'${expectedIncidentIdentifier}' value was not found in the incidentIdentifier property for Discipline Incident. Retrieved value is '${response.incidentIdentifier}'.`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolId value from schoolReference for Discipline Incident is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from schoolReference for Discipline Incident. Retrieved value is '${response.schoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"let behaviorsArray = response.behaviors;\r",
											"pm.expect(behaviorsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: behaviorDescriptor value for Discipline Incident is \" + expectedBehaviorDescriptor, () => {\r",
											"    let foundBehaviorDescriptor = false;\r",
											"    for (let i = 0; i < behaviorsArray.length; i++) { \r",
											"        let behaviorDescriptorItem = behaviorsArray[i];\r",
											"        let behaviorDescriptor = behaviorDescriptorItem.behaviorDescriptor;\r",
											"        if (behaviorDescriptor.includes(expectedBehaviorDescriptor)) {\r",
											"            foundBehaviorDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundBehaviorDescriptor, `'${expectedBehaviorDescriptor}' value was not found in the behaviorDescriptor property for Discipline Incident. Retrieved value is '${JSON.stringify(behaviorsArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: incidentLocationDescriptor value for Discipline Incident is \" + expectedIncidentLocationDescriptor, () => {\r",
											"    pm.expect(response.incidentLocationDescriptor, `'${expectedIncidentLocationDescriptor}' value was not found in the incidentLocationDescriptor property for Discipline Incident. Retrieved value is '${response.incidentLocationDescriptor}'.`).to.contain(expectedIncidentLocationDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: reporterDescriptionDescriptor value for Discipline Incident is \" + expectedReporterDescriptionDescriptor, () => {\r",
											"    pm.expect(response.reporterDescriptionDescriptor, `'${expectedReporterDescriptionDescriptor}' value was not found in the reporterDescriptionDescriptor property for Discipline Incident. Retrieved value is '${response.reporterDescriptionDescriptor}'.`).to.contain(expectedReporterDescriptionDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: reporterName value for Discipline Incident is \" + expectedReporterName, () => {\r",
											"    pm.expect(response.reporterName, `'${expectedReporterName}' value was not found in the reporterName property for Discipline Incident. Retrieved value is '${response.reporterName}'.`).to.eql(expectedReporterName);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Incident and getting the ID of the discipline incident\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineIncidents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineIncident = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineIncidentDate = latestDisciplineIncident ? latestDisciplineIncident._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineIncidentDate', latestDisciplineIncidentDate);\r",
											"\r",
											"        pm.environment.set(\"s2DisciplineIncidentId\", latestDisciplineIncident.id);\r",
											"        console.log('s2DisciplineIncidentId', pm.environment.get(\"s2DisciplineIncidentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineIncidents/{{s2DisciplineIncidentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineIncidents",
										"{{s2DisciplineIncidentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Discipline Incident Behavior Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Discipline Incident Behavior Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedBehaviorDescriptor = \"State Offense\";\r",
											"let expectedStudentParticipationCodeDescriptor = \"Perpetrator\"; // studentParticipationCodeDescriptor attibute is not present in the endpoint\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"\r",
											"let incidentIdentifierSystemValueS2 = pm.environment.get(\"incidentIdentifierSystemValueS2\");\r",
											"\r",
											"if (incidentIdentifierSystemValueS2 === \"\" || incidentIdentifierSystemValueS2 === null) {\r",
											"    expectedIncidentIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: incidentIdentifier value from disciplineIncidentReference for Student Discipline Incident Behavior Association is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.disciplineIncidentReference.incidentIdentifier, `'${expectedIncidentIdentifier}' was not found in the incidentIdentifier property from disciplineIncidentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.disciplineIncidentReference.incidentIdentifier}'`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from disciplineIncidentReference for Student Discipline Incident Behavior Association is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.disciplineIncidentReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from disciplineIncidentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.disciplineIncidentReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: behaviorDescriptor value for Student Discipline Incident Behavior Association is \" + expectedBehaviorDescriptor, () => {\r",
											"    pm.expect(response.behaviorDescriptor, `'${expectedBehaviorDescriptor}' was not found in the behaviorDescriptor property for Student Discipline Incident Behavior Association. Retrieved value is '${response.behaviorDescriptor}'`).to.include(expectedBehaviorDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: studentUniqueId value from studentReference for Student Discipline Incident Behavior Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Discipline Incident Behavior Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Discipline Incident Behavior Association and getting the ID of student discipline incident behavior association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentDisciplineIncidentBehaviorAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentDisciplineIncidentBehaviorAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentDisciplineIncidentBehaviorAssociationDate = latestStudentDisciplineIncidentBehaviorAssociation ? latestStudentDisciplineIncidentBehaviorAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentDisciplineIncidentBehaviorAssociationDate', latestStudentDisciplineIncidentBehaviorAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentDisciplineIncidentBehaviorAssociationId\", latestStudentDisciplineIncidentBehaviorAssociation.id);\r",
											"        console.log('s2StudentDisciplineIncidentBehaviorAssociationId', pm.environment.get(\"s2StudentDisciplineIncidentBehaviorAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentDisciplineIncidentBehaviorAssociations/{{s2StudentDisciplineIncidentBehaviorAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentDisciplineIncidentBehaviorAssociations",
										"{{s2StudentDisciplineIncidentBehaviorAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Discipline Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Discipline Action request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedDisciplineActionIdentifier = \"11\t\";\r",
											"let expectedDisciplineDescriptor = \"In School Suspension\";\r",
											"let expectedDisciplineDate = `${currentYear}-09-30`;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedActualDisciplineActionLength = 2;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedIepPlacementMeetingIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: disciplineActionIdentifier value for Discipline Action is \" + expectedDisciplineActionIdentifier, () => {\r",
											"    pm.expect(response.disciplineActionIdentifier, `'${expectedDisciplineActionIdentifier}' value was not found in the disciplineActionIdentifier property for Discipline Action. Retrieved value is '${response.disciplineActionIdentifier}'.`).to.eql(expectedDisciplineActionIdentifier);\r",
											"});\r",
											"\r",
											"let disciplinesArray = response.disciplines;\r",
											"pm.expect(disciplinesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: expectedDisciplineDescriptor value for Discipline Action is \" + expectedDisciplineDescriptor, () => {\r",
											"    let foundDisciplineDescriptor = false;\r",
											"    for (let i = 0; i < disciplinesArray.length; i++) { \r",
											"        let disciplineDescriptorItem = disciplinesArray[i];\r",
											"        let disciplineDescriptor = disciplineDescriptorItem.disciplineDescriptor;\r",
											"        if (disciplineDescriptor.includes(expectedDisciplineDescriptor)) {\r",
											"            foundDisciplineDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundDisciplineDescriptor, `'${expectedDisciplineDescriptor}' value was not found in the disciplineDescriptor property for Discipline Action. Retrieved value is '${JSON.stringify(disciplinesArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: disciplineDate value for Discipline Action is \" + expectedDisciplineDate, () => {\r",
											"    pm.expect(response.disciplineDate, `'${expectedDisciplineDate}' was not found in the disciplineDate property for Discipline Action. Retrieved value is '${response.disciplineDate}'`).to.eql(expectedDisciplineDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: studentUniqueId value for Discipline Action is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Discipline Action. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: actualDisciplineActionLength value for Discipline Action is \" + expectedActualDisciplineActionLength, () => {\r",
											"    pm.expect(response.actualDisciplineActionLength, `'${expectedActualDisciplineActionLength}' was not found in the actualDisciplineActionLength property for Discipline Action. Retrieved value is '${response.actualDisciplineActionLength}'`).to.eql(expectedActualDisciplineActionLength);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: schoolId value from responsibilitySchoolReference for Discipline Action is: \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.responsibilitySchoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from responsibilitySchoolReference for Discipline Action. Retrieved value is '${response.responsibilitySchoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: iepPlacementMeetingIndicator value for Discipline Action is \" + expectedIepPlacementMeetingIndicator, () => {\r",
											"    pm.expect(response.iepPlacementMeetingIndicator, `'${expectedIepPlacementMeetingIndicator}' was not found in the iepPlacementMeetingIndicator property for Discipline Action. Retrieved value is '${response.iepPlacementMeetingIndicator}'`).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Action and getting the ID of the discipline action\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineActions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineAction = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineActionDate = latestDisciplineAction ? latestDisciplineAction._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineActionDate', latestDisciplineActionDate);\r",
											"\r",
											"        pm.environment.set(\"s3DisciplineActionId\", latestDisciplineAction.id);\r",
											"        console.log('s3DisciplineActionId', pm.environment.get(\"s3DisciplineActionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineActions/{{s3DisciplineActionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineActions",
										"{{s3DisciplineActionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Discipline Incident",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Discipline Incident request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedIncidentDate = `${currentYear}-09-25`;\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedBehaviorDescriptor = \"School Code of Conduct\";\r",
											"let expectedIncidentLocationDescriptor = \"School bus\";\r",
											"let expectedReporterDescriptionDescriptor = \"Staff\";\r",
											"let expectedReporterName = \"Villa, Mark\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: incidentDate value for Discipline Incident is \" + expectedIncidentDate, () => {\r",
											"    pm.expect(response.incidentDate, `'${expectedIncidentDate}' value was not found in the incidentDate property for Discipline Incident. Retrieved value is '${response.incidentDate}'.`).to.eql(expectedIncidentDate);\r",
											"});\r",
											"\r",
											"let incidentIdentifierSystemValueS3 = pm.environment.get(\"incidentIdentifierSystemValueS3\");\r",
											"expectedIncidentIdentifier = \"\";\r",
											"if (incidentIdentifierSystemValueS3 === \"\" || incidentIdentifierSystemValueS3 === null) {\r",
											"    expectedIncidentIdentifier = \"1\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: incidentIdentifier value for Discipline Incident is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.incidentIdentifier, `'${expectedIncidentIdentifier}' value was not found in the incidentIdentifier property for Discipline Incident. Retrieved value is '${response.incidentIdentifier}'.`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolId value from schoolReference for Discipline Incident is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from schoolReference for Discipline Incident. Retrieved value is '${response.schoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"let behaviorsArray = response.behaviors;\r",
											"pm.expect(behaviorsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: behaviorDescriptor value for Discipline Incident is \" + expectedBehaviorDescriptor, () => {\r",
											"    let foundBehaviorDescriptor = false;\r",
											"    for (let i = 0; i < behaviorsArray.length; i++) { \r",
											"        let behaviorDescriptorItem = behaviorsArray[i];\r",
											"        let behaviorDescriptor = behaviorDescriptorItem.behaviorDescriptor;\r",
											"        if (behaviorDescriptor.includes(expectedBehaviorDescriptor)) {\r",
											"            foundBehaviorDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundBehaviorDescriptor, `'${expectedBehaviorDescriptor}' value was not found in the behaviorDescriptor property for Discipline Incident. Retrieved value is '${JSON.stringify(behaviorsArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: incidentLocationDescriptor value for Discipline Incident is \" + expectedIncidentLocationDescriptor, () => {\r",
											"    pm.expect(response.incidentLocationDescriptor, `'${expectedIncidentLocationDescriptor}' value was not found in the incidentLocationDescriptor property for Discipline Incident. Retrieved value is '${response.incidentLocationDescriptor}'.`).to.contain(expectedIncidentLocationDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: reporterDescriptionDescriptor value for Discipline Incident is \" + expectedReporterDescriptionDescriptor, () => {\r",
											"    pm.expect(response.reporterDescriptionDescriptor, `'${expectedReporterDescriptionDescriptor}' value was not found in the reporterDescriptionDescriptor property for Discipline Incident. Retrieved value is '${response.reporterDescriptionDescriptor}'.`).to.contain(expectedReporterDescriptionDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: reporterName value for Discipline Incident is \" + expectedReporterName, () => {\r",
											"    pm.expect(response.reporterName, `'${expectedReporterName}' value was not found in the reporterName property for Discipline Incident. Retrieved value is '${response.reporterName}'.`).to.eql(expectedReporterName);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Incident and getting the ID of the discipline incident\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineIncidents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineIncident = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineIncidentDate = latestDisciplineIncident ? latestDisciplineIncident._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineIncidentDate', latestDisciplineIncidentDate);\r",
											"\r",
											"        pm.environment.set(\"s3DisciplineIncidentId\", latestDisciplineIncident.id);\r",
											"        console.log('s3DisciplineIncidentId', pm.environment.get(\"s3DisciplineIncidentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineIncidents/{{s3DisciplineIncidentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineIncidents",
										"{{s3DisciplineIncidentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Discipline Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Discipline Action request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedDisciplineActionIdentifier = \"22\";\r",
											"let expectedDisciplineDescriptor = \"Community Service\";\r",
											"let expectedDisciplineDate = `${currentYear}-09-30`;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedActualDisciplineActionLength = 5;\r",
											"let expectedSchoolId = 255901107;\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: disciplineActionIdentifier value for Discipline Action is \" + expectedDisciplineActionIdentifier, () => {\r",
											"    pm.expect(response.disciplineActionIdentifier, `'${expectedDisciplineActionIdentifier}' value was not found in the disciplineActionIdentifier property for Discipline Action. Retrieved value is '${response.disciplineActionIdentifier}'.`).to.eql(expectedDisciplineActionIdentifier);\r",
											"});\r",
											"\r",
											"let disciplinesArray = response.disciplines;\r",
											"pm.expect(disciplinesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: expectedDisciplineDescriptor value for Discipline Action is \" + expectedDisciplineDescriptor, () => {\r",
											"    let foundDisciplineDescriptor = false;\r",
											"    for (let i = 0; i < disciplinesArray.length; i++) { \r",
											"        let disciplineDescriptorItem = disciplinesArray[i];\r",
											"        let disciplineDescriptor = disciplineDescriptorItem.disciplineDescriptor;\r",
											"        if (disciplineDescriptor.includes(expectedDisciplineDescriptor)) {\r",
											"            foundDisciplineDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundDisciplineDescriptor, `'${expectedDisciplineDescriptor}' value was not found in the disciplineDescriptor property for Discipline Action. Retrieved value is '${JSON.stringify(disciplinesArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: disciplineDate value for Discipline Action is \" + expectedDisciplineDate, () => {\r",
											"    pm.expect(response.disciplineDate, `'${expectedDisciplineDate}' was not found in the disciplineDate property for Discipline Action. Retrieved value is '${response.disciplineDate}'`).to.eql(expectedDisciplineDate);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: studentUniqueId value for Discipline Action is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Discipline Action. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: actualDisciplineActionLength value for Discipline Action is \" + expectedActualDisciplineActionLength, () => {\r",
											"    pm.expect(response.actualDisciplineActionLength, `'${expectedActualDisciplineActionLength}' was not found in the actualDisciplineActionLength property for Discipline Action. Retrieved value is '${response.actualDisciplineActionLength}'`).to.eql(expectedActualDisciplineActionLength);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: schoolId value from responsibilitySchoolReference for Discipline Action is: \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.responsibilitySchoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from responsibilitySchoolReference for Discipline Action. Retrieved value is '${response.responsibilitySchoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Action and getting the ID of the discipline action\r",
											"pm.sendRequest({    \r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineActions`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineAction = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineActionDate = latestDisciplineAction ? latestDisciplineAction._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineActionDate', latestDisciplineActionDate);\r",
											"\r",
											"        pm.environment.set(\"s4DisciplineActionId\", latestDisciplineAction.id);\r",
											"        console.log('s4DisciplineActionId', pm.environment.get(\"s4DisciplineActionId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineActions/{{s2DisciplineActionId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineActions",
										"{{s2DisciplineActionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Discipline Incident",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Discipline Incident request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedIncidentDate = `${currentYear}-09-25`;\r",
											"let expectedIncidentIdentifier;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedBehaviorDescriptor = \"State Offense\";\r",
											"let expectedIncidentLocationDescriptor = \"Classroom \";\r",
											"let expectedReporterDescriptionDescriptor = \"Staff\";\r",
											"let expectedReporterName = \"Smith, Jane\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: incidentDate value for Discipline Incident is \" + expectedIncidentDate, () => {\r",
											"    pm.expect(response.incidentDate, `'${expectedIncidentDate}' value was not found in the incidentDate property for Discipline Incident. Retrieved value is '${response.incidentDate}'.`).to.eql(expectedIncidentDate);\r",
											"});\r",
											"\r",
											"let incidentIdentifierSystemValueS4 = pm.environment.get(\"incidentIdentifierSystemValueS4\");\r",
											"expectedIncidentIdentifier = \"\";\r",
											"if (incidentIdentifierSystemValueS4 === \"\" || incidentIdentifierSystemValueS4 === null) {\r",
											"    expectedIncidentIdentifier = \"2\";\r",
											"} else {\r",
											"    expectedIncidentIdentifier = incidentIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: incidentIdentifier value for Discipline Incident is \" + expectedIncidentIdentifier, () => {\r",
											"    pm.expect(response.incidentIdentifier, `'${expectedIncidentIdentifier}' value was not found in the incidentIdentifier property for Discipline Incident. Retrieved value is '${response.incidentIdentifier}'.`).to.eql(expectedIncidentIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolId value from schoolReference for Discipline Incident is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' value was not found in the schoolId property from schoolReference for Discipline Incident. Retrieved value is '${response.schoolReference.schoolId}'.`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"let behaviorsArray = response.behaviors;\r",
											"pm.expect(behaviorsArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: behaviorDescriptor value for Discipline Incident is \" + expectedBehaviorDescriptor, () => {\r",
											"    let foundBehaviorDescriptor = false;\r",
											"    for (let i = 0; i < behaviorsArray.length; i++) { \r",
											"        let behaviorDescriptorItem = behaviorsArray[i];\r",
											"        let behaviorDescriptor = behaviorDescriptorItem.behaviorDescriptor;\r",
											"        if (behaviorDescriptor.includes(expectedBehaviorDescriptor)) {\r",
											"            foundBehaviorDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundBehaviorDescriptor, `'${expectedBehaviorDescriptor}' value was not found in the behaviorDescriptor property for Discipline Incident. Retrieved value is '${JSON.stringify(behaviorsArray)}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: incidentLocationDescriptor value for Discipline Incident is \" + expectedIncidentLocationDescriptor, () => {\r",
											"    pm.expect(response.incidentLocationDescriptor, `'${expectedIncidentLocationDescriptor}' value was not found in the incidentLocationDescriptor property for Discipline Incident. Retrieved value is '${response.incidentLocationDescriptor}'.`).to.contain(expectedIncidentLocationDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: reporterDescriptionDescriptor value for Discipline Incident is \" + expectedReporterDescriptionDescriptor, () => {\r",
											"    pm.expect(response.reporterDescriptionDescriptor, `'${expectedReporterDescriptionDescriptor}' value was not found in the reporterDescriptionDescriptor property for Discipline Incident. Retrieved value is '${response.reporterDescriptionDescriptor}'.`).to.contain(expectedReporterDescriptionDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: reporterName value for Discipline Incident is \" + expectedReporterName, () => {\r",
											"    pm.expect(response.reporterName, `'${expectedReporterName}' value was not found in the reporterName property for Discipline Incident. Retrieved value is '${response.reporterName}'.`).to.eql(expectedReporterName);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Discipline Incident and getting the ID of the discipline incident\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/disciplineIncidents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestDisciplineIncident = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestDisciplineIncidentDate = latestDisciplineIncident ? latestDisciplineIncident._lastModifiedDate : null;\r",
											"        console.log('latestDisciplineIncidentDate', latestDisciplineIncidentDate);\r",
											"\r",
											"        pm.environment.set(\"s4DisciplineIncidentId\", latestDisciplineIncident.id);\r",
											"        console.log('s4DisciplineIncidentId', pm.environment.get(\"s4DisciplineIncidentId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/disciplineIncidents/{{s4DisciplineIncidentId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"disciplineIncidents",
										"{{s4DisciplineIncidentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": []
				}
			]
		},
		{
			"name": "10-StudentProgram",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - GET Student CTE Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student CTE Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Career and Technical Education\";\r",
											"let expectedProgramTypeDescriptor = \"Career and Technical Education\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedNonTraditionalGenderStatus = true;\r",
											"let expectedPrivateCTEProgram = false;\r",
											"let expectedTechnicalSkillsAssessmentDescriptor = \"Passed\";\r",
											"let expectedCteProgramServiceDescriptor = \"Information Technology\";\r",
											"let expectedCipCode = \"11.0103\";\r",
											"let expectedServiceBeginDate = `${currentYear}-08-23`;\r",
											"let expectedPrimaryIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student CTE Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student CTE Program Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student CTE Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Student CTE Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student CTE Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' value was not found in the programName property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.programName}'.`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value from programReference for Student CTE Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' value was not found in the programTypeDescriptor property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'.`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: educationOrganizationId value from programReference for Student CTE Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' value was not found in the educationOrganizationId property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student CTE Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student CTE Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: nonTraditionalGenderStatus value for Student CTE Program Association is \" + expectedNonTraditionalGenderStatus, () => {\r",
											"    pm.expect(response.nonTraditionalGenderStatus, `'${expectedNonTraditionalGenderStatus}' value was not found in the nonTraditionalGenderStatus property for Student CTE Program Association. Retrieved value is '${response.nonTraditionalGenderStatus}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: privateCTEProgram value for Student CTE Program Association is \" + expectedPrivateCTEProgram, () => {\r",
											"    pm.expect(response.nonTraditionalGenderStatus, `'${expectedPrivateCTEProgram}' value was not found in the privateCTEProgram property for Student CTE Program Association. Retrieved value is '${response.privateCTEProgram}'.`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: technicalSkillsAssessmentDescriptor value for Student CTE Program Association is \" + expectedTechnicalSkillsAssessmentDescriptor, () => {\r",
											"    pm.expect(response.technicalSkillsAssessmentDescriptor, `'${expectedTechnicalSkillsAssessmentDescriptor}' value was not found in the technicalSkillsAssessmentDescriptor property  for Student CTE Program Association. Retrieved value is '${response.technicalSkillsAssessmentDescriptor}'.`).to.contain(expectedTechnicalSkillsAssessmentDescriptor);\r",
											"});\r",
											"\r",
											"let cteProgramServicesArray = response.cteProgramServices;\r",
											"pm.expect(cteProgramServicesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: cteProgramServiceDescriptor value from cteProgramServices for Student CTE Program Association is \" + expectedCteProgramServiceDescriptor, () => {\r",
											"    let foundCteProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let cteProgramServiceDescriptorItem = cteProgramServicesArray[i];\r",
											"        let cteProgramServiceDescriptor = cteProgramServiceDescriptorItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor)) { \r",
											"            foundCteProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundCteProgramServiceDescriptor, `'${expectedCteProgramServiceDescriptor}' was not found in the cteProgramServiceDescriptor property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: cipCode value from cteProgramServices for Student CTE Program Association is \" + expectedCipCode, () => {\r",
											"    let foundCipCode = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let cipCodeItem = cteProgramServicesArray[i];\r",
											"        let cipCode = cipCodeItem.cipCode;\r",
											"        let cteProgramServiceDescriptor = cipCodeItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && cipCode === expectedCipCode) { \r",
											"            foundCipCode = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundCipCode, `'${expectedCteProgramServiceDescriptor}' with '${expectedCipCode}' was not found in the cipCode property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.cipCode))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 1 POST: serviceBeginDate value from cteProgramServices for Student CTE Program Association is \" + expectedServiceBeginDate, () => {\r",
											"    let foundServiceBeginDate = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let serviceBeginDateItem = cteProgramServicesArray[i];\r",
											"        let serviceBeginDate = serviceBeginDateItem.serviceBeginDate;\r",
											"        let cteProgramServiceDescriptor = serviceBeginDateItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && serviceBeginDate === expectedServiceBeginDate) { \r",
											"            foundServiceBeginDate = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundServiceBeginDate, `'${expectedCteProgramServiceDescriptor}' with '${expectedServiceBeginDate}' was not found in the serviceBeginDate property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.serviceBeginDate))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 1 POST: primaryIndicator value from cteProgramServices for Student CTE Program Association is \" + expectedPrimaryIndicator, () => {\r",
											"    let foundPrimaryIndicator = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let primaryIndicatorItem = cteProgramServicesArray[i];\r",
											"        let primaryIndicator = primaryIndicatorItem.primaryIndicator;\r",
											"        let cteProgramServiceDescriptor = primaryIndicatorItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && primaryIndicator === expectedPrimaryIndicator) { \r",
											"            foundPrimaryIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryIndicator, `'${expectedCteProgramServiceDescriptor}' with '${expectedPrimaryIndicator}' was not found in the primaryIndicator property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.primaryIndicator))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student CTE Program Association and getting the ID of the student CTE program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentCTEProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentCTEProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentCTEProgramAssociationDate = latestStudentCTEProgramAssociation ? latestStudentCTEProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentCTEProgramAssociationDate', latestStudentCTEProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentCTEProgramAssociationId\", latestStudentCTEProgramAssociation.id);\r",
											"        console.log('s1StudentCTEProgramAssociationId', pm.environment.get(\"s1StudentCTEProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentCTEProgramAssociations/{{s1StudentCTEProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentCTEProgramAssociations",
										"{{s1StudentCTEProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Homeless Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Homeless Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Homeless\";\r",
											"let expectedProgramTypeDescriptor = \"Homeless\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedHomelessPrimaryNighttimeResidenceDescriptor = \"Shelters\";\r",
											"let expectedHomelessUnaccompaniedYouth = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student Homeless Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Homeless Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Homeless Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Homeless Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student Homeless Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value from programReference for Student Homeless Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: educationOrganizationId value from programReference for Student Homeless Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the programName property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Homeless Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Homeless Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: homelessPrimaryNighttimeResidenceDescriptor value for Student Homeless Program Association is \" + expectedHomelessPrimaryNighttimeResidenceDescriptor, () => {\r",
											"    pm.expect(response.homelessPrimaryNighttimeResidenceDescriptor, `'${expectedHomelessPrimaryNighttimeResidenceDescriptor}' was not found in the homelessPrimaryNighttimeResidenceDescriptor property for Student Homeless Program Association. Retrieved value is '${response.homelessPrimaryNighttimeResidenceDescriptor}'`).to.contain(expectedHomelessPrimaryNighttimeResidenceDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: homelessUnaccompaniedYouth value for Student Homeless Program Association is \" + expectedHomelessUnaccompaniedYouth, () => {\r",
											"    pm.expect(response.homelessUnaccompaniedYouth, `'${expectedHomelessPrimaryNighttimeResidenceDescriptor}' was not found in the homelessUnaccompaniedYouth property for Student Homeless Program Association. Retrieved value is '${response.homelessUnaccompaniedYouth}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Homeless Program Association and getting the ID of the student homeless program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentHomelessProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentHomelessProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentHomelessProgramAssociationDate = latestStudentHomelessProgramAssociation ? latestStudentHomelessProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentHomelessProgramAssociationDate', latestStudentHomelessProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentHomelessProgramAssociationId\", latestStudentHomelessProgramAssociation.id);\r",
											"        console.log('s1StudentHomelessProgramAssociationId', pm.environment.get(\"s1StudentHomelessProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentHomelessProgramAssociations/{{s1StudentHomelessProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentHomelessProgramAssociations",
										"{{s1StudentHomelessProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Language Instruction Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Language Instruction Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"English as a Second Language (ESL)\";\r",
											"let expectedProgramTypeDescriptor = \"English as a Second Language (ESL)\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedParticipationDescriptor = \"Completed\";\r",
											"let expectedProficiencyDescriptor = \"Not Proficient\";\r",
											"let expectedMonitoredDescriptor = \"Year 1\";\r",
											"let expectedLanguageInstructionProgramServiceDescriptor = \"Structured English Immersion\";\r",
											"let expectedEnglishLearnerParticipation = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student Language Instruction Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Language Instruction Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Language Instruction Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Language Instruction Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student Language Instruction Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value from programReference for Student Language Instruction Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: educationOrganizationId value from programReference for Student Language Instruction Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Language Instruction Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Language Instruction Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"let englishLanguageProficiencyAssessmentsArray = response.englishLanguageProficiencyAssessments;\r",
											"pm.expect(englishLanguageProficiencyAssessmentsArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: schoolYear value from schoolYearTypeReference from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedSchoolYear, () => {\r",
											"    let foundSchoolYear = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let schoolYearItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let schoolYear = schoolYearItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear) {\r",
											"            foundSchoolYear = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundSchoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from schoolYearTypeReference from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: participationDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedParticipationDescriptor, () => {\r",
											"    let foundParticipationDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let participationDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let participationDescriptor = participationDescriptorItem.participationDescriptor;\r",
											"        let schoolYear = participationDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && participationDescriptor.includes(expectedParticipationDescriptor)) {\r",
											"            foundParticipationDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundParticipationDescriptor, `schoolYear '${currentYear}' with '${expectedParticipationDescriptor}' was not found in the participationDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.participationDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: proficiencyDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedProficiencyDescriptor, () => {\r",
											"    let foundProficiencyDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let proficiencyDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let proficiencyDescriptor = proficiencyDescriptorItem.proficiencyDescriptor;\r",
											"        let schoolYear = proficiencyDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && proficiencyDescriptor.includes(expectedProficiencyDescriptor)) {\r",
											"            foundProficiencyDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundProficiencyDescriptor, `schoolYear '${currentYear}' with '${expectedProficiencyDescriptor}' was not found in the proficiencyDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.proficiencyDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: monitoredDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedMonitoredDescriptor, () => {\r",
											"    let foundMonitoredDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let monitoredDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let monitoredDescriptor = monitoredDescriptorItem.monitoredDescriptor;\r",
											"        let schoolYear = monitoredDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && monitoredDescriptor.includes(expectedMonitoredDescriptor)) {\r",
											"            foundMonitoredDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundMonitoredDescriptor, `schoolYear '${currentYear}' with '${expectedMonitoredDescriptor}' was not found in the monitoredDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.monitoredDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"let languageInstructionProgramServicesArray = response.languageInstructionProgramServices;\r",
											"pm.expect(languageInstructionProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: languageInstructionProgramServiceDescriptor value from languageInstructionProgramServices for Student Language Instruction Program Association is \" + expectedLanguageInstructionProgramServiceDescriptor, () => {\r",
											"    let foundLanguageInstructionProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < languageInstructionProgramServicesArray.length; i++) {\r",
											"        let languageInstructionProgramServiceDescriptorItem = languageInstructionProgramServicesArray[i];\r",
											"        let languageInstructionProgramServiceDescriptor = languageInstructionProgramServiceDescriptorItem.languageInstructionProgramServiceDescriptor;\r",
											"        if (languageInstructionProgramServiceDescriptor.includes(expectedLanguageInstructionProgramServiceDescriptor)) {\r",
											"            foundLanguageInstructionProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundLanguageInstructionProgramServiceDescriptor, `'${expectedLanguageInstructionProgramServiceDescriptor}' was not found in the languageInstructionProgramServiceDescriptor property from languageInstructionProgramServices for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(languageInstructionProgramServicesArray.map(item => item.languageInstructionProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: englishLearnerParticipation value for Student Language Instruction Program Association is \" + expectedEnglishLearnerParticipation, () => {\r",
											"    pm.expect(response.englishLearnerParticipation, `'${expectedEnglishLearnerParticipation}' was not found in the englishLearnerParticipation property for Student Language Instruction Program Association. Retrieved value is '${response.englishLearnerParticipation}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Language Instruction Program Association and getting the ID of the student language instruction program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentLanguageInstructionProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentLanguageInstructionProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentLanguageInstructionProgramAssociationDate = latestStudentLanguageInstructionProgramAssociation ? latestStudentLanguageInstructionProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentLanguageInstructionProgramAssociationDate', latestStudentLanguageInstructionProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentLanguageInstructionProgramAssociationId\", latestStudentLanguageInstructionProgramAssociation.id);\r",
											"        console.log('s1StudentLanguageInstructionProgramAssociationId', pm.environment.get(\"s1StudentLanguageInstructionProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentLanguageInstructionProgramAssociations/{{s1StudentLanguageInstructionProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentLanguageInstructionProgramAssociations",
										"{{s1StudentLanguageInstructionProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Migrant Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Migrant Education Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Migrant Education\";\r",
											"let expectedProgramTypeDescriptor = \"Migrant Education\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedPriorityForServices = true;\r",
											"let expectedLastQualifyingMove = `${currentYear}-07-16`;\r",
											"let expectedMigrantEducationProgramServiceDescriptor = \"Instructional Services\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student Migrant Education Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Migrant Education Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Migrant Education Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Migrant Education Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student Migrant Education Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value from programReference for Student Migrant Education Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: educationOrganizationId value from programReference for Student Migrant Education Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Migrant Education Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Migrant Education Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: priorityForServices value for Student Migrant Education Program Association is \" + expectedPriorityForServices, () => {\r",
											"    pm.expect(response.priorityForServices, `'${expectedPriorityForServices}' was not found in the priorityForServices property for Student Migrant Education Program Association. Retrieved value is '${response.priorityForServices}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: lastQualifyingMove value for Student Migrant Education Program Association is \" + expectedLastQualifyingMove, () => {\r",
											"    pm.expect(response.lastQualifyingMove, `'${expectedLastQualifyingMove}' was not found in the lastQualifyingMove property for Student Migrant Education Program Association. Retrieved value is '${response.lastQualifyingMove}'`).to.eql(expectedLastQualifyingMove);\r",
											"});\r",
											"\r",
											"let migrantEducationProgramServicesArray = response.migrantEducationProgramServices;\r",
											"pm.expect(migrantEducationProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: migrantEducationProgramServiceDescriptor value from migrantEducationProgramServices for Student Migrant Education Program Association is \" + expectedMigrantEducationProgramServiceDescriptor, () => {\r",
											"    let foundMigrantEducationProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < migrantEducationProgramServicesArray.length; i++) {\r",
											"        let migrantEducationProgramServiceDescriptorItem = migrantEducationProgramServicesArray[i];\r",
											"        let migrantEducationProgramServiceDescriptor = migrantEducationProgramServiceDescriptorItem.migrantEducationProgramServiceDescriptor;\r",
											"        if (migrantEducationProgramServiceDescriptor.includes(expectedMigrantEducationProgramServiceDescriptor)) {\r",
											"            foundMigrantEducationProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundMigrantEducationProgramServiceDescriptor, `'${expectedMigrantEducationProgramServiceDescriptor}' was not found in the migrantEducationProgramServiceDescriptor property from migrantEducationProgramServices for Student Migrant Education Program Association. Retrieved value is '${JSON.stringify(migrantEducationProgramServicesArray.map(item => item.migrantEducationProgramServiceDescriptor))}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Migrant Program Association and getting the ID of the student migrant program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentMigrantEducationProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentMigrantEducationProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentMigrantEducationProgramAssociationDate = latestStudentMigrantEducationProgramAssociation ? latestStudentMigrantEducationProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentMigrantEducationProgramAssociationDate', latestStudentMigrantEducationProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentMigrantEducationProgramAssociationId\", latestStudentMigrantEducationProgramAssociation.id);\r",
											"        console.log('s1StudentMigrantEducationProgramAssociationId', pm.environment.get(\"s1StudentMigrantEducationProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentMigrantEducationProgramAssociations/{{s1StudentMigrantEducationProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentMigrantEducationProgramAssociations",
										"{{s1StudentMigrantEducationProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Neglected Or Delinquent Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Neglected Or Delinquent Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Neglected and Delinquent Program\";\r",
											"let expectedProgramTypeDescriptor = \"Neglected and Delinquent Program\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedNeglectedOrDelinquentProgramDescriptor = \"Neglected Programs\";\r",
											"let expectedNeglectedOrDelinquentProgramServiceDescriptor = \"Mentoring Programs\";\r",
											"let expectedServiceBeginDate = `${currentYear}-08-23`;\r",
											"let expectedPrimaryIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student Neglected Or Delinquent Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Neglected Or Delinquent Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programTypeDescriptor value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: educationOrganizationId value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Neglected Or Delinquent Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: neglectedOrDelinquentProgramDescriptor value for Student Neglected Or Delinquent Program Association is \" + expectedNeglectedOrDelinquentProgramDescriptor, () => {\r",
											"    pm.expect(response.neglectedOrDelinquentProgramDescriptor, `'${expectedNeglectedOrDelinquentProgramDescriptor}' was not found in the neglectedOrDelinquentProgramDescriptor property for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.neglectedOrDelinquentProgramDescriptor}'`).to.include(expectedNeglectedOrDelinquentProgramDescriptor);\r",
											"});\r",
											"\r",
											"let neglectedOrDelinquentProgramServicesArray = response.neglectedOrDelinquentProgramServices;\r",
											"pm.expect(neglectedOrDelinquentProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: neglectedOrDelinquentProgramServiceDescriptor value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedNeglectedOrDelinquentProgramServiceDescriptor, () => {\r",
											"    let foundNeglectedOrDelinquentProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let neglectedOrDelinquentProgramServiceDescriptorItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = neglectedOrDelinquentProgramServiceDescriptorItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundNeglectedOrDelinquentProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundNeglectedOrDelinquentProgramServiceDescriptor, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' was not found in the neglectedOrDelinquentProgramServiceDescriptor property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: serviceBeginDate value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedServiceBeginDate, () => {\r",
											"    let foundServiceBeginDate = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let serviceBeginDateItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let serviceBeginDate = serviceBeginDateItem.serviceBeginDate;\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = serviceBeginDateItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (serviceBeginDate === expectedServiceBeginDate && neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundServiceBeginDate = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundServiceBeginDate, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' neglectedOrDelinquentProgramServiceDescriptor with '${expectedServiceBeginDate}' was not found in the serviceBeginDate property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.serviceBeginDate))}' with '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: primaryIndicator value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedPrimaryIndicator, () => {\r",
											"    let foundPrimaryIndicator = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let foundPrimaryIndicatorItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let primaryIndicator = foundPrimaryIndicatorItem.primaryIndicator;\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = foundPrimaryIndicatorItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (primaryIndicator === expectedPrimaryIndicator && neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundPrimaryIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryIndicator, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' neglectedOrDelinquentProgramServiceDescriptor with '${expectedPrimaryIndicator}' was not found in the primaryIndicator property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.primaryIndicator))}' with '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Neglected or Delinquent Program Association and getting the ID of the student neglected or delinquent program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentNeglectedOrDelinquentProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentNeglectedOrDelinquentProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentNeglectedOrDelinquentProgramAssociationDate = latestStudentNeglectedOrDelinquentProgramAssociation ? latestStudentNeglectedOrDelinquentProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentNeglectedOrDelinquentProgramAssociationDate', latestStudentNeglectedOrDelinquentProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentNeglectedOrDelinquentProgramAssociationId\", latestStudentNeglectedOrDelinquentProgramAssociation.id);\r",
											"        console.log('s1StudentNeglectedOrDelinquentProgramAssociationId', pm.environment.get(\"s1StudentNeglectedOrDelinquentProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentNeglectedOrDelinquentProgramAssociations/{{s1StudentNeglectedOrDelinquentProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations",
										"{{s1StudentNeglectedOrDelinquentProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student School Food Services Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student School Food Services Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"let currentMonth = dateObject.getMonth() + 1;\r",
											"let currentDate = dateObject.getDate();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-${currentMonth}-${currentDate}`;\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramName = \"School Food Service\";\r",
											"let expectedProgramTypeDescriptor = \"Other\";\r",
											"let expectedSchoolFoodServiceProgramServiceDescriptor = \"Reduced Price Lunch\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student School Food Services Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student School Food Services Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student School Food Services Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student School Food Services Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: educationOrganizationId value from programReference for Student School Food Services Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: programName value from programReference for Student School Food Services Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: programTypeDescriptor value from programReference for Student School Food Services Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"let schoolFoodServiceProgramServicesArray = response.schoolFoodServiceProgramServices;\r",
											"pm.expect(schoolFoodServiceProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: schoolFoodServiceProgramServiceDescriptor value from schoolFoodServiceProgramServices for Student School Food Services Program Association is \" + expectedSchoolFoodServiceProgramServiceDescriptor, () => {\r",
											"    let foundSchoolFoodServiceProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < schoolFoodServiceProgramServicesArray.length; i++) {\r",
											"        let schoolFoodServiceProgramServiceDescriptorItem = schoolFoodServiceProgramServicesArray[i];\r",
											"        let schoolFoodServiceProgramServiceDescriptor = schoolFoodServiceProgramServiceDescriptorItem.schoolFoodServiceProgramServiceDescriptor;\r",
											"        if (schoolFoodServiceProgramServiceDescriptor.includes(expectedSchoolFoodServiceProgramServiceDescriptor)) {\r",
											"            foundSchoolFoodServiceProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundSchoolFoodServiceProgramServiceDescriptor, `'${expectedSchoolFoodServiceProgramServiceDescriptor}' was not found in the schoolFoodServiceProgramServiceDescriptor property from schoolFoodServiceProgramServices for Student School Food Services Program Association. Retrieved value is '${JSON.stringify(schoolFoodServiceProgramServicesArray.map(item => item.schoolFoodServiceProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: studentUniqueId value from studentReference for Student School Food Services Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Food Services Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Food Services Program Association and getting the ID of the student school food services program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolFoodServiceProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolFoodServiceProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolFoodServiceProgramAssociationDate = latestStudentSchoolFoodServiceProgramAssociation ? latestStudentSchoolFoodServiceProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolFoodServiceProgramAssociationDate', latestStudentSchoolFoodServiceProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentSchoolFoodServiceProgramAssociationId\", latestStudentSchoolFoodServiceProgramAssociation.id);\r",
											"        console.log('s1StudentSchoolFoodServiceProgramAssociationId', pm.environment.get(\"s1StudentSchoolFoodServiceProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolFoodServiceProgramAssociations/{{s1StudentSchoolFoodServiceProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolFoodServiceProgramAssociations",
										"{{s1StudentSchoolFoodServiceProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Title I Part A Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Title I Part A Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName\t= \"Title I Part A\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramTypeDescriptor = \"Title I Part A\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedTitleIPartAParticipantDescriptor = \"Public Targeted Assistance Program\";\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: beginDate value for Student Title I Part A Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Title I Part A Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: programName value from programReference for Student Title I Part A Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: educationOrganizationId value from programReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: programTypeDescriptor value from programReference for Student Title I Part A Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include\t(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Title I Part A Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Title I Part A Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: titleIPartAParticipantDescriptor value for Student Title I Part A Program Association is \" + expectedTitleIPartAParticipantDescriptor, () => {\r",
											"    pm.expect(response.titleIPartAParticipantDescriptor, `'${expectedTitleIPartAParticipantDescriptor}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.titleIPartAParticipantDescriptor}'`).to.include(expectedTitleIPartAParticipantDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Title I Part A Program Association and getting the ID of the student title I part A program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentTitleIPartAProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociationDate = latestStudentTitleIPartAProgramAssociation ? latestStudentTitleIPartAProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentTitleIPartAProgramAssociationDate', latestStudentTitleIPartAProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentTitleIPartAProgramAssociationId\", latestStudentTitleIPartAProgramAssociation.id);\r",
											"        console.log('s1StudentTitleIPartAProgramAssociationId', pm.environment.get(\"s1StudentTitleIPartAProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentTitleIPartAProgramAssociations/{{s1StudentTitleIPartAProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentTitleIPartAProgramAssociations",
										"{{s1StudentTitleIPartAProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 PUT - Get Student CTE Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student CTE Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Career and Technical Education\";\r",
											"let expectedProgramTypeDescriptor = \"Career and Technical Education\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedEndDate = `${currentYear}-10-02`;\r",
											"let expectedNonTraditionalGenderStatus = true;\r",
											"let expectedPrivateCTEProgram = false;\r",
											"let expectedTechnicalSkillsAssessmentDescriptor = \"Passed\";\r",
											"let expectedCteProgramServiceDescriptor = \"Information Technology\";\r",
											"let expectedCipCode = \"11.0103\";\r",
											"let expectedServiceBeginDate = `${currentYear}-08-23`;\r",
											"let expectedServiceEndDate = `${currentYear}-10-02`;\r",
											"let expectedPrimaryIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student CTE Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student CTE Program Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student CTE Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from educationOrganizationReference for Student CTE Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: programName value from programReference for Student CTE Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' value was not found in the programName property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.programName}'.`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student CTE Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' value was not found in the programTypeDescriptor property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'.`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: educationOrganizationId value from programReference for Student CTE Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' value was not found in the educationOrganizationId property from programReference for Student CTE Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: studentUniqueId value from studentReference for Student CTE Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student CTE Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: endDate value for Student CTE Program Association is \" + expectedEndDate, () => {\r",
											"    pm.expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Student CTE Program Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: nonTraditionalGenderStatus value for Student CTE Program Association is \" + expectedNonTraditionalGenderStatus, () => {\r",
											"    pm.expect(response.nonTraditionalGenderStatus, `'${expectedNonTraditionalGenderStatus}' value was not found in the nonTraditionalGenderStatus property for Student CTE Program Association. Retrieved value is '${response.nonTraditionalGenderStatus}'.`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 PUT: privateCTEProgram value for Student CTE Program Association is \" + expectedPrivateCTEProgram, () => {\r",
											"    pm.expect(response.nonTraditionalGenderStatus, `'${expectedPrivateCTEProgram}' value was not found in the privateCTEProgram property for Student CTE Program Association. Retrieved value is '${response.privateCTEProgram}'.`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 PUT: technicalSkillsAssessmentDescriptor value for Student CTE Program Association is \" + expectedTechnicalSkillsAssessmentDescriptor, () => {\r",
											"    pm.expect(response.technicalSkillsAssessmentDescriptor, `'${expectedTechnicalSkillsAssessmentDescriptor}' value was not found in the technicalSkillsAssessmentDescriptor property  for Student CTE Program Association. Retrieved value is '${response.technicalSkillsAssessmentDescriptor}'.`).to.contain(expectedTechnicalSkillsAssessmentDescriptor);\r",
											"});\r",
											"\r",
											"let cteProgramServicesArray = response.cteProgramServices;\r",
											"pm.expect(cteProgramServicesArray).to.be.an(\"array\");\r",
											"\r",
											"pm.test(\"12 - Scenario 2 PUT: cteProgramServiceDescriptor value from cteProgramServices for Student CTE Program Association is \" + expectedCteProgramServiceDescriptor, () => {\r",
											"    let foundCteProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let cteProgramServiceDescriptorItem = cteProgramServicesArray[i];\r",
											"        let cteProgramServiceDescriptor = cteProgramServiceDescriptorItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor)) { \r",
											"            foundCteProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundCteProgramServiceDescriptor, `'${expectedCteProgramServiceDescriptor}' was not found in the cteProgramServiceDescriptor property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"13 - Scenario 2 PUT: cipCode value from cteProgramServices for Student CTE Program Association is \" + expectedCipCode, () => {\r",
											"    let foundCipCode = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let cipCodeItem = cteProgramServicesArray[i];\r",
											"        let cipCode = cipCodeItem.cipCode;\r",
											"        let cteProgramServiceDescriptor = cipCodeItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && cipCode === expectedCipCode) { \r",
											"            foundCipCode = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundCipCode, `'${expectedCteProgramServiceDescriptor}' with '${expectedCipCode}' was not found in the cipCode property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.cipCode))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 2 PUT: serviceBeginDate value from cteProgramServices for Student CTE Program Association is \" + expectedServiceBeginDate, () => {\r",
											"    let foundServiceBeginDate = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let serviceBeginDateItem = cteProgramServicesArray[i];\r",
											"        let serviceBeginDate = serviceBeginDateItem.serviceBeginDate;\r",
											"        let cteProgramServiceDescriptor = serviceBeginDateItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && serviceBeginDate === expectedServiceBeginDate) { \r",
											"            foundServiceBeginDate = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundServiceBeginDate, `'${expectedCteProgramServiceDescriptor}' with '${expectedServiceBeginDate}' was not found in the serviceBeginDate property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.serviceBeginDate))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 2 PUT: serviceEndDate value from cteProgramServices for Student CTE Program Association is \" + expectedServiceEndDate, () => {\r",
											"    let foundServiceEndDate = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let serviceEndDateItem = cteProgramServicesArray[i];\r",
											"        let serviceEndDate = serviceEndDateItem.serviceEndDate;\r",
											"        let cteProgramServiceDescriptor = serviceEndDateItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && serviceEndDate === expectedServiceEndDate) { \r",
											"            foundServiceEndDate = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundServiceEndDate, `'${expectedCteProgramServiceDescriptor}' with '${expectedServiceEndDate}' was not found in the serviceEndDate property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.serviceEndDate))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 2 PUT: primaryIndicator value from cteProgramServices for Student CTE Program Association is \" + expectedPrimaryIndicator, () => {\r",
											"    let foundPrimaryIndicator = false;\r",
											"    for (let i = 0; i < cteProgramServicesArray.length; i++) {\r",
											"        let primaryIndicatorItem = cteProgramServicesArray[i];\r",
											"        let primaryIndicator = primaryIndicatorItem.primaryIndicator;\r",
											"        let cteProgramServiceDescriptor = primaryIndicatorItem.cteProgramServiceDescriptor;\r",
											"        if (cteProgramServiceDescriptor.includes(expectedCteProgramServiceDescriptor) && primaryIndicator === expectedPrimaryIndicator) { \r",
											"            foundPrimaryIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryIndicator, `'${expectedCteProgramServiceDescriptor}' with '${expectedPrimaryIndicator}' was not found in the primaryIndicator property from cteProgramServices for Student CTE Program Association. Retrieved value is '${JSON.stringify(cteProgramServicesArray.map(item => item.primaryIndicator))}' with '${JSON.stringify(cteProgramServicesArray.map(item => item.cteProgramServiceDescriptor))}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student CTE Program Association and getting the ID of the student CTE program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentCTEProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentCTEProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentCTEProgramAssociationDate = latestStudentCTEProgramAssociation ? latestStudentCTEProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentCTEProgramAssociationDate', latestStudentCTEProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentCTEProgramAssociationId\", latestStudentCTEProgramAssociation.id);\r",
											"        console.log('s2StudentCTEProgramAssociationId', pm.environment.get(\"s2StudentCTEProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentCTEProgramAssociations/{{s2StudentCTEProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentCTEProgramAssociations",
										"{{s2StudentCTEProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 PUT - Get Student Homeless Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student Homeless Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Homeless\";\r",
											"let expectedProgramTypeDescriptor = \"Homeless\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedHomelessPrimaryNighttimeResidenceDescriptor = \"Doubled-up\";\r",
											"let expectedHomelessUnaccompaniedYouth = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student Homeless Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Homeless Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student Homeless Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Homeless Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: programName value from programReference for Student Homeless Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student Homeless Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: educationOrganizationId value from programReference for Student Homeless Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the programName property from programReference for Student Homeless Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: studentUniqueId value from studentReference for Student Homeless Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Homeless Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: homelessPrimaryNighttimeResidenceDescriptor value for Student Homeless Program Association is \" + expectedHomelessPrimaryNighttimeResidenceDescriptor, () => {\r",
											"    pm.expect(response.homelessPrimaryNighttimeResidenceDescriptor, `'${expectedHomelessPrimaryNighttimeResidenceDescriptor}' was not found in the homelessPrimaryNighttimeResidenceDescriptor property for Student Homeless Program Association. Retrieved value is '${response.homelessPrimaryNighttimeResidenceDescriptor}'`).to.contain(expectedHomelessPrimaryNighttimeResidenceDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: homelessUnaccompaniedYouth value for Student Homeless Program Association is \" + expectedHomelessUnaccompaniedYouth, () => {\r",
											"    pm.expect(response.homelessUnaccompaniedYouth, `'${expectedHomelessPrimaryNighttimeResidenceDescriptor}' was not found in the homelessUnaccompaniedYouth property for Student Homeless Program Association. Retrieved value is '${response.homelessUnaccompaniedYouth}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Homeless Program Association and getting the ID of the student homeless program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentHomelessProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentHomelessProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentHomelessProgramAssociationDate = latestStudentHomelessProgramAssociation ? latestStudentHomelessProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentHomelessProgramAssociationDate', latestStudentHomelessProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentHomelessProgramAssociationId\", latestStudentHomelessProgramAssociation.id);\r",
											"        console.log('s2StudentHomelessProgramAssociationId', pm.environment.get(\"s2StudentHomelessProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentHomelessProgramAssociations/{{s2StudentHomelessProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentHomelessProgramAssociations",
										"{{s2StudentHomelessProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 PUT - Get Student Language Instruction Program Association Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student Language Instruction Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"English as a Second Language (ESL)\";\r",
											"let expectedProgramTypeDescriptor = \"English as a Second Language (ESL)\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedParticipationDescriptor = \"Completed\";\r",
											"let expectedProficiencyDescriptor = \"Proficient\";\r",
											"let expectedMonitoredDescriptor = \"Year 1\";\r",
											"let expectedLanguageInstructionProgramServiceDescriptor = \"Structured English Immersion\";\r",
											"let expectedEnglishLearnerParticipation = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student Language Instruction Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Language Instruction Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student Language Instruction Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Language Instruction Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: programName value from programReference for Student Language Instruction Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student Language Instruction Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.contain(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: educationOrganizationId value from programReference for Student Language Instruction Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Language Instruction Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: studentUniqueId value from studentReference for Student Language Instruction Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Language Instruction Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"let englishLanguageProficiencyAssessmentsArray = response.englishLanguageProficiencyAssessments;\r",
											"pm.expect(englishLanguageProficiencyAssessmentsArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: schoolYear value from schoolYearTypeReference from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedSchoolYear, () => {\r",
											"    let foundSchoolYear = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let schoolYearItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let schoolYear = schoolYearItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear) {\r",
											"            foundSchoolYear = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundSchoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from schoolYearTypeReference from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: participationDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedParticipationDescriptor, () => {\r",
											"    let foundParticipationDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let participationDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let participationDescriptor = participationDescriptorItem.participationDescriptor;\r",
											"        let schoolYear = participationDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && participationDescriptor.includes(expectedParticipationDescriptor)) {\r",
											"            foundParticipationDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundParticipationDescriptor, `schoolYear '${currentYear}' with '${expectedParticipationDescriptor}' was not found in the participationDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.participationDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 PUT: proficiencyDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedProficiencyDescriptor, () => {\r",
											"    let foundProficiencyDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let proficiencyDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let proficiencyDescriptor = proficiencyDescriptorItem.proficiencyDescriptor;\r",
											"        let schoolYear = proficiencyDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && proficiencyDescriptor.includes(expectedProficiencyDescriptor)) {\r",
											"            foundProficiencyDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundProficiencyDescriptor, `schoolYear '${currentYear}' with '${expectedProficiencyDescriptor}' was not found in the proficiencyDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.proficiencyDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 PUT: monitoredDescriptor value from englishLanguageProficiencyAssessments for Student Language Instruction Program Association is \" + expectedMonitoredDescriptor, () => {\r",
											"    let foundMonitoredDescriptor = false;\r",
											"    for (let i = 0; i < englishLanguageProficiencyAssessmentsArray.length; i++) {\r",
											"        let monitoredDescriptorItem = englishLanguageProficiencyAssessmentsArray[i];\r",
											"        let monitoredDescriptor = monitoredDescriptorItem.monitoredDescriptor;\r",
											"        let schoolYear = monitoredDescriptorItem.schoolYearTypeReference.schoolYear;\r",
											"        if (schoolYear === expectedSchoolYear && monitoredDescriptor.includes(expectedMonitoredDescriptor)) {\r",
											"            foundMonitoredDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundMonitoredDescriptor, `schoolYear '${currentYear}' with '${expectedMonitoredDescriptor}' was not found in the monitoredDescriptor property from englishLanguageProficiencyAssessments for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.schoolYearTypeReference.schoolYear))}' with '${JSON.stringify(englishLanguageProficiencyAssessmentsArray.map(item => item.monitoredDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"let languageInstructionProgramServicesArray = response.languageInstructionProgramServices;\r",
											"pm.expect(languageInstructionProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"12 - Scenario 2 PUT: languageInstructionProgramServiceDescriptor value from languageInstructionProgramServices for Student Language Instruction Program Association is \" + expectedLanguageInstructionProgramServiceDescriptor, () => {\r",
											"    let foundLanguageInstructionProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < languageInstructionProgramServicesArray.length; i++) {\r",
											"        let languageInstructionProgramServiceDescriptorItem = languageInstructionProgramServicesArray[i];\r",
											"        let languageInstructionProgramServiceDescriptor = languageInstructionProgramServiceDescriptorItem.languageInstructionProgramServiceDescriptor;\r",
											"        if (languageInstructionProgramServiceDescriptor.includes(expectedLanguageInstructionProgramServiceDescriptor)) {\r",
											"            foundLanguageInstructionProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundLanguageInstructionProgramServiceDescriptor, `'${expectedLanguageInstructionProgramServiceDescriptor}' was not found in the languageInstructionProgramServiceDescriptor property from languageInstructionProgramServices for Student Language Instruction Program Association. Retrieved value is '${JSON.stringify(languageInstructionProgramServicesArray.map(item => item.languageInstructionProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: englishLearnerParticipation value for Student Language Instruction Program Association is \" + expectedEnglishLearnerParticipation, () => {\r",
											"    pm.expect(response.englishLearnerParticipation, `'${expectedEnglishLearnerParticipation}' was not found in the englishLearnerParticipation property for Student Language Instruction Program Association. Retrieved value is '${response.englishLearnerParticipation}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Language Instruction Program Association and getting the ID of the student language instruction program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentLanguageInstructionProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentLanguageInstructionProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentLanguageInstructionProgramAssociationDate = latestStudentLanguageInstructionProgramAssociation ? latestStudentLanguageInstructionProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentLanguageInstructionProgramAssociationDate', latestStudentLanguageInstructionProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentLanguageInstructionProgramAssociationId\", latestStudentLanguageInstructionProgramAssociation.id);\r",
											"        console.log('s2StudentLanguageInstructionProgramAssociationId', pm.environment.get(\"s2StudentLanguageInstructionProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentLanguageInstructionProgramAssociations/{{s2StudentLanguageInstructionProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentLanguageInstructionProgramAssociations",
										"{{s2StudentLanguageInstructionProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 PUT- Get Student Migrant Program Association Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student Migrant Education Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Migrant Education\";\r",
											"let expectedProgramTypeDescriptor = \"Migrant Education\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedPriorityForServices = false;\r",
											"let expectedLastQualifyingMove = `${currentYear}-07-16`;\r",
											"let expectedMigrantEducationProgramServiceDescriptor = \"Instructional Services\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student Migrant Education Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Migrant Education Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student Migrant Education Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Migrant Education Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: programName value from programReference for Student Migrant Education Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student Migrant Education Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: educationOrganizationId value from programReference for Student Migrant Education Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Migrant Education Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: studentUniqueId value from studentReference for Student Migrant Education Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Migrant Education Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: priorityForServices value for Student Migrant Education Program Association is \" + expectedPriorityForServices, () => {\r",
											"    pm.expect(response.priorityForServices, `'${expectedPriorityForServices}' was not found in the priorityForServices property for Student Migrant Education Program Association. Retrieved value is '${response.priorityForServices}'`).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: lastQualifyingMove value for Student Migrant Education Program Association is \" + expectedLastQualifyingMove, () => {\r",
											"    pm.expect(response.lastQualifyingMove, `'${expectedLastQualifyingMove}' was not found in the lastQualifyingMove property for Student Migrant Education Program Association. Retrieved value is '${response.lastQualifyingMove}'`).to.eql(expectedLastQualifyingMove);\r",
											"});\r",
											"\r",
											"let migrantEducationProgramServicesArray = response.migrantEducationProgramServices;\r",
											"pm.expect(migrantEducationProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"10 - Scenario 2 PUT: migrantEducationProgramServiceDescriptor value from migrantEducationProgramServices for Student Migrant Education Program Association is \" + expectedMigrantEducationProgramServiceDescriptor, () => {\r",
											"    let foundMigrantEducationProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < migrantEducationProgramServicesArray.length; i++) {\r",
											"        let migrantEducationProgramServiceDescriptorItem = migrantEducationProgramServicesArray[i];\r",
											"        let migrantEducationProgramServiceDescriptor = migrantEducationProgramServiceDescriptorItem.migrantEducationProgramServiceDescriptor;\r",
											"        if (migrantEducationProgramServiceDescriptor.includes(expectedMigrantEducationProgramServiceDescriptor)) {\r",
											"            foundMigrantEducationProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundMigrantEducationProgramServiceDescriptor, `'${expectedMigrantEducationProgramServiceDescriptor}' was not found in the migrantEducationProgramServiceDescriptor property from migrantEducationProgramServices for Student Migrant Education Program Association. Retrieved value is '${JSON.stringify(migrantEducationProgramServicesArray.map(item => item.migrantEducationProgramServiceDescriptor))}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Migrant Education Program Association and getting the ID of the student migrant education program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentMigrantEducationProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentMigrantEducationProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentMigrantEducationProgramAssociationDate = latestStudentMigrantEducationProgramAssociation ? latestStudentMigrantEducationProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentMigrantEducationProgramAssociationDate', latestStudentMigrantEducationProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentMigrantEducationProgramAssociationId\", latestStudentMigrantEducationProgramAssociation.id);\r",
											"        console.log('s2StudentMigrantEducationProgramAssociationId', pm.environment.get(\"s2StudentMigrantEducationProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentMigrantEducationProgramAssociations/{{s2StudentMigrantEducationProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentMigrantEducationProgramAssociations",
										"{{s2StudentMigrantEducationProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 PUT - Get Student Neglected Or Delinquent Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student Neglected Or Delinquent Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName = \"Neglected and Delinquent Program\";\r",
											"let expectedProgramTypeDescriptor = \"Neglected and Delinquent Program\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedNeglectedOrDelinquentProgramDescriptor = \"Neglected Programs\";\r",
											"let expectedNeglectedOrDelinquentProgramServiceDescriptor = \"Dropout Prevention Programs\";\r",
											"let expectedServiceBeginDate = `${currentYear}-08-23`;\r",
											"let expectedPrimaryIndicator = true;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student Neglected Or Delinquent Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student Neglected Or Delinquent Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: programName value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: educationOrganizationId value from programReference for Student Neglected Or Delinquent Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: studentUniqueId value from studentReference for Student Neglected Or Delinquent Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: neglectedOrDelinquentProgramDescriptor value for Student Neglected Or Delinquent Program Association is \" + expectedNeglectedOrDelinquentProgramDescriptor, () => {\r",
											"    pm.expect(response.neglectedOrDelinquentProgramDescriptor, `'${expectedNeglectedOrDelinquentProgramDescriptor}' was not found in the neglectedOrDelinquentProgramDescriptor property for Student Neglected Or Delinquent Program Association. Retrieved value is '${response.neglectedOrDelinquentProgramDescriptor}'`).to.include(expectedNeglectedOrDelinquentProgramDescriptor);\r",
											"});\r",
											"\r",
											"let neglectedOrDelinquentProgramServicesArray = response.neglectedOrDelinquentProgramServices;\r",
											"pm.expect(neglectedOrDelinquentProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: neglectedOrDelinquentProgramServiceDescriptor value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedNeglectedOrDelinquentProgramServiceDescriptor, () => {\r",
											"    let foundNeglectedOrDelinquentProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let neglectedOrDelinquentProgramServiceDescriptorItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = neglectedOrDelinquentProgramServiceDescriptorItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundNeglectedOrDelinquentProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundNeglectedOrDelinquentProgramServiceDescriptor, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' was not found in the neglectedOrDelinquentProgramServiceDescriptor property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 PUT: serviceBeginDate value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedServiceBeginDate, () => {\r",
											"    let foundServiceBeginDate = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let serviceBeginDateItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let serviceBeginDate = serviceBeginDateItem.serviceBeginDate;\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = serviceBeginDateItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (serviceBeginDate === expectedServiceBeginDate && neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundServiceBeginDate = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundServiceBeginDate, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' neglectedOrDelinquentProgramServiceDescriptor with '${expectedServiceBeginDate}' was not found in the serviceBeginDate property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.serviceBeginDate))}' with '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 PUT: primaryIndicator value from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association is \" + expectedPrimaryIndicator, () => {\r",
											"    let foundPrimaryIndicator = false;\r",
											"    for (let i = 0; i < neglectedOrDelinquentProgramServicesArray.length; i++) {\r",
											"        let foundPrimaryIndicatorItem = neglectedOrDelinquentProgramServicesArray[i];\r",
											"        let primaryIndicator = foundPrimaryIndicatorItem.primaryIndicator;\r",
											"        let neglectedOrDelinquentProgramServiceDescriptor = foundPrimaryIndicatorItem.neglectedOrDelinquentProgramServiceDescriptor;\r",
											"        if (primaryIndicator === expectedPrimaryIndicator && neglectedOrDelinquentProgramServiceDescriptor.includes(expectedNeglectedOrDelinquentProgramServiceDescriptor)) { \r",
											"            foundPrimaryIndicator = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundPrimaryIndicator, `'${expectedNeglectedOrDelinquentProgramServiceDescriptor}' neglectedOrDelinquentProgramServiceDescriptor with '${expectedPrimaryIndicator}' was not found in the primaryIndicator property from neglectedOrDelinquentProgramServices for Student Neglected Or Delinquent Program Association. Retrieved value is '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.primaryIndicator))}' with '${JSON.stringify(neglectedOrDelinquentProgramServicesArray.map(item => item.neglectedOrDelinquentProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Neglected or Delinquent Program Association and getting the ID of the student neglected or delinquent program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentNeglectedOrDelinquentProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentNeglectedOrDelinquentProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentNeglectedOrDelinquentProgramAssociationDate = latestStudentNeglectedOrDelinquentProgramAssociation ? latestStudentNeglectedOrDelinquentProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentNeglectedOrDelinquentProgramAssociationDate', latestStudentNeglectedOrDelinquentProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentNeglectedOrDelinquentProgramAssociationId\", latestStudentNeglectedOrDelinquentProgramAssociation.id);\r",
											"        console.log('s2StudentNeglectedOrDelinquentProgramAssociationId', pm.environment.get(\"s2StudentNeglectedOrDelinquentProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentNeglectedOrDelinquentProgramAssociations/{{s2StudentNeglectedOrDelinquentProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentNeglectedOrDelinquentProgramAssociations",
										"{{s2StudentNeglectedOrDelinquentProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 PUT - Get Student School Food Services Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Student School Food Services Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"let currentMonth = dateObject.getMonth() + 1;\r",
											"let currentDate = dateObject.getDate();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-${currentMonth}-${currentDate}`;\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramName = \"School Food Service\";\r",
											"let expectedProgramTypeDescriptor = \"Other\";\r",
											"let expectedSchoolFoodServiceProgramServiceDescriptor = \"Free Lunch\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: beginDate value for Student School Food Services Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student School Food Services Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationReference for Student School Food Services Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student School Food Services Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: educationOrganizationId value from programReference for Student School Food Services Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: programName value from programReference for Student School Food Services Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: programTypeDescriptor value from programReference for Student School Food Services Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student School Food Services Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"let schoolFoodServiceProgramServicesArray = response.schoolFoodServiceProgramServices;\r",
											"pm.expect(schoolFoodServiceProgramServicesArray).to.be.an(\"Array\");\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: schoolFoodServiceProgramServiceDescriptor value from schoolFoodServiceProgramServices for Student School Food Services Program Association is \" + expectedSchoolFoodServiceProgramServiceDescriptor, () => {\r",
											"    let foundSchoolFoodServiceProgramServiceDescriptor = false;\r",
											"    for (let i = 0; i < schoolFoodServiceProgramServicesArray.length; i++) {\r",
											"        let schoolFoodServiceProgramServiceDescriptorItem = schoolFoodServiceProgramServicesArray[i];\r",
											"        let schoolFoodServiceProgramServiceDescriptor = schoolFoodServiceProgramServiceDescriptorItem.schoolFoodServiceProgramServiceDescriptor;\r",
											"        if (schoolFoodServiceProgramServiceDescriptor.includes(expectedSchoolFoodServiceProgramServiceDescriptor)) {\r",
											"            foundSchoolFoodServiceProgramServiceDescriptor = true;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(foundSchoolFoodServiceProgramServiceDescriptor, `'${expectedSchoolFoodServiceProgramServiceDescriptor}' was not found in the schoolFoodServiceProgramServiceDescriptor property from schoolFoodServiceProgramServices for Student School Food Services Program Association. Retrieved value is '${JSON.stringify(schoolFoodServiceProgramServicesArray.map(item => item.schoolFoodServiceProgramServiceDescriptor))}'`).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: studentUniqueId value from studentReference for Student School Food Services Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Food Services Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Food Services Program Association and getting the ID of the student school food services program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolFoodServiceProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolFoodServiceProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolFoodServiceProgramAssociationDate = latestStudentSchoolFoodServiceProgramAssociation ? latestStudentSchoolFoodServiceProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolFoodServiceProgramAssociationDate', latestStudentSchoolFoodServiceProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentSchoolFoodServiceProgramAssociationId\", latestStudentSchoolFoodServiceProgramAssociation.id);\r",
											"        console.log('s2StudentSchoolFoodServiceProgramAssociationId', pm.environment.get(\"s2StudentSchoolFoodServiceProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolFoodServiceProgramAssociations/{{s2StudentSchoolFoodServiceProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolFoodServiceProgramAssociations",
										"{{s2StudentSchoolFoodServiceProgramAssociationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Title I Part A Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Title I Part A Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName\t= \"Title I Part A\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramTypeDescriptor = \"Title I Part A\";\r",
											"let expectedStudentUniqueId = \"\t222222\";\r",
											"let expectedTitleIPartAParticipantDescriptor = \"Public Targeted Assistance Program\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: beginDate value for Student Title I Part A Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: educationOrganizationId value from educationOrganizationReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Title I Part A Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: programName value from programReference for Student Title I Part A Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: educationOrganizationId value from programReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: programTypeDescriptor value from programReference for Student Title I Part A Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include\t(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: studentUniqueId value from studentReference for Student Title I Part A Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Title I Part A Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: titleIPartAParticipantDescriptor value for Student Title I Part A Program Association is \" + expectedTitleIPartAParticipantDescriptor, () => {\r",
											"    pm.expect(response.titleIPartAParticipantDescriptor, `'${expectedTitleIPartAParticipantDescriptor}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.titleIPartAParticipantDescriptor}'`).to.include(expectedTitleIPartAParticipantDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Title I Part A Program Association and getting the ID of the student title I part A program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentTitleIPartAProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociationDate = latestStudentTitleIPartAProgramAssociation ? latestStudentTitleIPartAProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentTitleIPartAProgramAssociationDate', latestStudentTitleIPartAProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentTitleIPartAProgramAssociationId\", latestStudentTitleIPartAProgramAssociation.id);\r",
											"        console.log('s2StudentTitleIPartAProgramAssociationId', pm.environment.get(\"s2StudentTitleIPartAProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentTitleIPartAProgramAssociations/{{s2StudentTitleIPartAProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentTitleIPartAProgramAssociations",
										"{{s2StudentTitleIPartAProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Student Title I Part A Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Title I Part A Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName\t= \"Title I Part A\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramTypeDescriptor = \"Title I Part A\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedTitleIPartAParticipantDescriptor = \"Public Schoolwide Program\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: beginDate value for Student Title I Part A Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: educationOrganizationId value from educationOrganizationReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Title I Part A Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: programName value from programReference for Student Title I Part A Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: educationOrganizationId value from programReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: programTypeDescriptor value from programReference for Student Title I Part A Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include\t(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Title I Part A Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Title I Part A Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: titleIPartAParticipantDescriptor value for Student Title I Part A Program Association is \" + expectedTitleIPartAParticipantDescriptor, () => {\r",
											"    pm.expect(response.titleIPartAParticipantDescriptor, `'${expectedTitleIPartAParticipantDescriptor}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.titleIPartAParticipantDescriptor}'`).to.include(expectedTitleIPartAParticipantDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Title I Part A Program Association and getting the ID of the student title I part A program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentTitleIPartAProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociationDate = latestStudentTitleIPartAProgramAssociation ? latestStudentTitleIPartAProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentTitleIPartAProgramAssociationDate', latestStudentTitleIPartAProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentTitleIPartAProgramAssociationId\", latestStudentTitleIPartAProgramAssociation.id);\r",
											"        console.log('s3StudentTitleIPartAProgramAssociationId', pm.environment.get(\"s3StudentTitleIPartAProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentTitleIPartAProgramAssociations/{{s3StudentTitleIPartAProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentTitleIPartAProgramAssociations",
										"{{s3StudentTitleIPartAProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Student Title I Part A Program Association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student Title I Part A Program Association request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedEducationOrganizationId = 255901;\r",
											"let expectedProgramName\t= \"Title I Part A\";\r",
											"let expectedEducationOrganizationIdPR = 255901;\r",
											"let expectedProgramTypeDescriptor = \"Title I Part A\";\r",
											"let expectedStudentUniqueId = \"\t222222\";\r",
											"let expectedTitleIPartAParticipantDescriptor = \"Was not served\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: beginDate value for Student Title I Part A Program Association is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: educationOrganizationId value from educationOrganizationReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Title I Part A Program Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: programName value from programReference for Student Title I Part A Program Association is \" + expectedProgramName, () => {\r",
											"    pm.expect(response.programReference.programName, `'${expectedProgramName}' was not found in the programName property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedProgramName);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: educationOrganizationId value from programReference for Student Title I Part A Program Association is \" + expectedEducationOrganizationIdPR, () => {\r",
											"    pm.expect(response.programReference.educationOrganizationId, `'${expectedEducationOrganizationIdPR}' was not found in the educationOrganizationId property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programName}'`).to.eql(expectedEducationOrganizationIdPR);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: programTypeDescriptor value from programReference for Student Title I Part A Program Association is \" + expectedProgramTypeDescriptor, () => {\r",
											"    pm.expect(response.programReference.programTypeDescriptor, `'${expectedProgramTypeDescriptor}' was not found in the programTypeDescriptor property from programReference for Student Title I Part A Program Association. Retrieved value is '${response.programReference.programTypeDescriptor}'`).to.include\t(expectedProgramTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: studentUniqueId value from studentReference for Student Title I Part A Program Association is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Title I Part A Program Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: titleIPartAParticipantDescriptor value for Student Title I Part A Program Association is \" + expectedTitleIPartAParticipantDescriptor, () => {\r",
											"    pm.expect(response.titleIPartAParticipantDescriptor, `'${expectedTitleIPartAParticipantDescriptor}' was not found in the beginDate property for Student Title I Part A Program Association. Retrieved value is '${response.titleIPartAParticipantDescriptor}'`).to.include(expectedTitleIPartAParticipantDescriptor);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Title I Part A Program Association and getting the ID of the student title I part A program association\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentTitleIPartAProgramAssociations`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociation = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentTitleIPartAProgramAssociationDate = latestStudentTitleIPartAProgramAssociation ? latestStudentTitleIPartAProgramAssociation._lastModifiedDate : null;\r",
											"        console.log('latestStudentTitleIPartAProgramAssociationDate', latestStudentTitleIPartAProgramAssociationDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentTitleIPartAProgramAssociationId\", latestStudentTitleIPartAProgramAssociation.id);\r",
											"        console.log('s4StudentTitleIPartAProgramAssociationId', pm.environment.get(\"s4StudentTitleIPartAProgramAssociationId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentTitleIPartAProgramAssociations/{{s4StudentTitleIPartAProgramAssociationId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentTitleIPartAProgramAssociations",
										"{{s4StudentTitleIPartAProgramAssociationId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "11-StudentAttendance",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Student School Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student School Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolIdSR = 255901107;\r",
											"let expectedSchoolYear = `${currentYear}`;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Tardy\";\r",
											"let expectedEventDate = `${currentYear}-09-16`;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: schoolId value from schoolReference for Student School Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from schoolReference for Student School Attendance Event. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from sessionReference for Student School Attendance Event is \" + expectedSchoolIdSR, () => {\r",
											"    pm.expect(response.sessionReference.schoolId, `'${expectedSchoolIdSR}' was not found in the schoolId property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(expectedSchoolIdSR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolYear value from sessionReference for Student School Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sessionName value from sessionReference for Student School Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sessionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: studentUniqueId value from studentReference for Student School Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: attendanceEventCategoryDescriptor value for Student School Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor property for Student School Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Attendance Events and getting the ID of the student school attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAttendanceEventDate = latestStudentSchoolAttendanceEvent ? latestStudentSchoolAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAttendanceEventDate', latestStudentSchoolAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentSchoolAttendanceEventId\", latestStudentSchoolAttendanceEvent.id);\r",
											"        console.log('s1StudentSchoolAttendanceEventId', pm.environment.get(\"s1StudentSchoolAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAttendanceEvents/{{s1StudentSchoolAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAttendanceEvents",
										"{{s1StudentSchoolAttendanceEventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Section Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Section Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolYear = 2017;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Tardy\";\r",
											"let expectedEventDate = `${currentYear}-09-16`;\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    expectedLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: expectedLocalCourseCode value from sectionReference for Student Section Attendance Event is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolId value from sectionReference for Student Section Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: schoolYear value from sectionReference for Student Section Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    expectedSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: sectionIdentifier value from sectionReference for Student Section Attendance Event is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: sessionName value from sectionReference for Student Section Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: studentUniqueId value from studentReference for Student Section Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from studentReference for Student Section Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: attendanceEventCategoryDescriptor value for Student Section Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor for Student Section Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: eventDate value for Student Section Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Attendance Events and getting the ID of the student section attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAttendanceEventDate = latestStudentSectionAttendanceEvent ? latestStudentSectionAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAttendanceEventDate', latestStudentSectionAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentSectionAttendanceEventId\", latestStudentSectionAttendanceEvent.id);\r",
											"        console.log('s1StudentSectionAttendanceEventId', pm.environment.get(\"s1StudentSectionAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAttendanceEvents/{{s1StudentSectionAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAttendanceEvents",
										"{{s1StudentSectionAttendanceEventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 1 POST - Get Student School Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student School Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedSchoolIdSR = 255901001;\r",
											"let expectedSchoolYear = `${currentYear}`;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Unexcused Absence\";\r",
											"let expectedEventDate = `${currentYear}-10-05`;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: schoolId value from schoolReference for Student School Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from schoolReference for Student School Attendance Event. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value from sessionReference for Student School Attendance Event is \" + expectedSchoolIdSR, () => {\r",
											"    pm.expect(response.sessionReference.schoolId, `'${expectedSchoolIdSR}' was not found in the schoolId property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(expectedSchoolIdSR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolYear value from sessionReference for Student School Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sessionName value from sessionReference for Student School Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sessionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: studentUniqueId value from studentReference for Student School Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: attendanceEventCategoryDescriptor value for Student School Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor property for Student School Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Attendance Events and getting the ID of the student school attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAttendanceEventDate = latestStudentSchoolAttendanceEvent ? latestStudentSchoolAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAttendanceEventDate', latestStudentSchoolAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentSchoolAttendanceEventId\", latestStudentSchoolAttendanceEvent.id);\r",
											"        console.log('s2StudentSchoolAttendanceEventId', pm.environment.get(\"s2StudentSchoolAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAttendanceEvents/{{s2StudentSchoolAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAttendanceEvents",
										"{{s2StudentSchoolAttendanceEventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Section Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Section Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901001\t;\r",
											"let expectedSchoolYear = 2017;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Unexcused Absence\";\r",
											"let expectedEventDate = `${currentYear}-10-05`;\r",
											"\r",
											"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
											"\r",
											"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
											"    expectedLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: expectedLocalCourseCode value from sectionReference for Student Section Attendance Event is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolId value from sectionReference for Student Section Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: schoolYear value from sectionReference for Student Section Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS2 = pm.environment.get(\"sectionIdentifierSystemValueS2\");\r",
											"\r",
											"if (sectionIdentifierSystemValueS2 === \"\" || sectionIdentifierSystemValueS2 === null) {\r",
											"    expectedSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: sectionIdentifier value from sectionReference for Student Section Attendance Event is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: sessionName value from sectionReference for Student Section Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: studentUniqueId value from studentReference for Student Section Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from studentReference for Student Section Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: attendanceEventCategoryDescriptor value for Student Section Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor for Student Section Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: eventDate value for Student Section Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Attendance Events and getting the ID of the student section attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAttendanceEventDate = latestStudentSectionAttendanceEvent ? latestStudentSectionAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAttendanceEventDate', latestStudentSectionAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentSectionAttendanceEventId\", latestStudentSectionAttendanceEvent.id);\r",
											"        console.log('s2StudentSectionAttendanceEventId', pm.environment.get(\"s2StudentSectionAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAttendanceEvents/{{s2StudentSectionAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAttendanceEvents",
										"{{s2StudentSectionAttendanceEventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Student School Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student School Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolIdSR = 255901107;\r",
											"let expectedSchoolYear = `${currentYear}`;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Tardy\";\r",
											"let expectedEventDate = `${currentYear}-09-16`;\r",
											"let expectedAttendanceEventReason = \"Late\";\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: schoolId value from schoolReference for Student School Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from schoolReference for Student School Attendance Event. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value from sessionReference for Student School Attendance Event is \" + expectedSchoolIdSR, () => {\r",
											"    pm.expect(response.sessionReference.schoolId, `'${expectedSchoolIdSR}' was not found in the schoolId property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(expectedSchoolIdSR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolYear value from sessionReference for Student School Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sessionName value from sessionReference for Student School Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sessionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: studentUniqueId value from studentReference for Student School Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: attendanceEventCategoryDescriptor value for Student School Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor property for Student School Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: attendanceEventReason value for Student School Attendance Event is \" + expectedAttendanceEventReason, () => {\r",
											"    pm.expect(response.attendanceEventReason, `'${expectedAttendanceEventReason}' was not found in the attendanceEventReason property for Student School Attendance Event. Retrieved value is '${response.attendanceEventReason}'`).to.eql(expectedAttendanceEventReason);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Attendance Events and getting the ID of the student school attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAttendanceEventDate = latestStudentSchoolAttendanceEvent ? latestStudentSchoolAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAttendanceEventDate', latestStudentSchoolAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentSchoolAttendanceEventId\", latestStudentSchoolAttendanceEvent.id);\r",
											"        console.log('s3StudentSchoolAttendanceEventId', pm.environment.get(\"s3StudentSchoolAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAttendanceEvents/{{s3StudentSchoolAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAttendanceEvents",
										"{{s3StudentSchoolAttendanceEventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Section Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Section Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedSchoolYear = 2017;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Tardy\";\r",
											"let expectedEventDate = `${currentYear}-09-16`;\r",
											"let expectedAttendanceEventReason = \"Late\";\r",
											"\r",
											"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
											"\r",
											"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
											"    expectedLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: expectedLocalCourseCode value from sectionReference for Student Section Attendance Event is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolId value from sectionReference for Student Section Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: schoolYear value from sectionReference for Student Section Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
											"\r",
											"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
											"    expectedSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: sectionIdentifier value from sectionReference for Student Section Attendance Event is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: sessionName value from sectionReference for Student Section Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Section Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from studentReference for Student Section Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: attendanceEventCategoryDescriptor value for Student Section Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor for Student Section Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: eventDate value for Student Section Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: attendanceEventReason value for Student Section Attendance Event is \" + expectedAttendanceEventReason, () => {\r",
											"    pm.expect(response.attendanceEventReason, `'${expectedAttendanceEventReason}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.attendanceEventReason}'`).to.eql(expectedAttendanceEventReason);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Attendance Events and getting the ID of the student section attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAttendanceEventDate = latestStudentSectionAttendanceEvent ? latestStudentSectionAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAttendanceEventDate', latestStudentSectionAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentSectionAttendanceEventId\", latestStudentSectionAttendanceEvent.id);\r",
											"        console.log('s3StudentSectionAttendanceEventId', pm.environment.get(\"s3StudentSectionAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAttendanceEvents/{{s3StudentSectionAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAttendanceEvents",
										"{{s3StudentSectionAttendanceEventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Student School Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student School Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedSchoolIdSR = 255901001;\r",
											"let expectedSchoolYear = `${currentYear}`;\r",
											"let expectedSessionName = \"\t2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Unexcused Absence\";\r",
											"let expectedEventDate = `${currentYear}-10-05`;\r",
											"let expectedAttendanceEventReason = \"No Note\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: schoolId value from schoolReference for Student School Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.schoolReference.schoolId, `${expectedSchoolId}' was not found in the schoolId property from schoolReference for Student School Attendance Event. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value from sessionReference for Student School Attendance Event is \" + expectedSchoolIdSR, () => {\r",
											"    pm.expect(response.sessionReference.schoolId, `'${expectedSchoolIdSR}' was not found in the schoolId property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolId}'`).to.eql(expectedSchoolIdSR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolYear value from sessionReference for Student School Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sessionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sessionName value from sessionReference for Student School Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sessionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sessionReference for Student School Attendance Event. Retrieved value is '${response.sessionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: studentUniqueId value from studentReference for Student School Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student School Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: attendanceEventCategoryDescriptor value for Student School Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor property for Student School Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: eventDate value for Student School Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate property for Student School Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: attendanceEventReason value for Student School Attendance Event is \" + expectedAttendanceEventReason, () => {\r",
											"    pm.expect(response.attendanceEventReason, `'${expectedAttendanceEventReason}' was not found in the attendanceEventReason property for Student School Attendance Event. Retrieved value is '${response.attendanceEventReason}'`).to.eql(expectedAttendanceEventReason);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student School Attendance Events and getting the ID of the student school attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSchoolAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSchoolAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSchoolAttendanceEventDate = latestStudentSchoolAttendanceEvent ? latestStudentSchoolAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSchoolAttendanceEventDate', latestStudentSchoolAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentSchoolAttendanceEventId\", latestStudentSchoolAttendanceEvent.id);\r",
											"        console.log('s4StudentSchoolAttendanceEventId', pm.environment.get(\"s4StudentSchoolAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAttendanceEvents/{{s4StudentSchoolAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAttendanceEvents",
										"{{s4StudentSchoolAttendanceEventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 4 PUT - Get Student Section Attendance Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Student Section Attendance Event request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedSchoolYear = 2017;\r",
											"let expectedSectionIdentifier;\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedAttendanceEventCategoryDescriptor = \"Unexcused Absence\";\r",
											"let expectedEventDate = `${currentYear}-10-05`;\r",
											"let expectedAttendanceEventReason = \"No Note\";\r",
											"\r",
											"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
											"\r",
											"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
											"    expectedLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: expectedLocalCourseCode value from sectionReference for Student Section Attendance Event is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: schoolId value from sectionReference for Student Section Attendance Event is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: schoolYear value from sectionReference for Student Section Attendance Event is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS4 = pm.environment.get(\"sectionIdentifierSystemValueS4\");\r",
											"\r",
											"if (sectionIdentifierSystemValueS4 === \"\" || sectionIdentifierSystemValueS4 === null) {\r",
											"    expectedSectionIdentifier = \"ALG12017RM901\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: sectionIdentifier value from sectionReference for Student Section Attendance Event is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: sessionName value from sectionReference for Student Section Attendance Event is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName from sectionReference for Student Section Attendance Event. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: studentUniqueId value from studentReference for Student Section Attendance Event is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId from studentReference for Student Section Attendance Event. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: attendanceEventCategoryDescriptor value for Student Section Attendance Event is \" + expectedAttendanceEventCategoryDescriptor, () => {\r",
											"    pm.expect(response.attendanceEventCategoryDescriptor, `'${expectedAttendanceEventCategoryDescriptor}' was not found in the attendanceEventCategoryDescriptor for Student Section Attendance Event. Retrieved value is '${response.attendanceEventCategoryDescriptor}'`).to.include(expectedAttendanceEventCategoryDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: eventDate value for Student Section Attendance Event is \" + expectedEventDate, () => {\r",
											"    pm.expect(response.eventDate, `'${expectedEventDate}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.eventDate}'`).to.eql(expectedEventDate);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: attendanceEventReason value for Student Section Attendance Event is \" + expectedAttendanceEventReason, () => {\r",
											"    pm.expect(response.attendanceEventReason, `'${expectedAttendanceEventReason}' was not found in the eventDate for Student Section Attendance Event. Retrieved value is '${response.attendanceEventReason}'`).to.eql(expectedAttendanceEventReason);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Section Attendance Events and getting the ID of the student section attendance event\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentSectionAttendanceEvents`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentSectionAttendanceEvent = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentSectionAttendanceEventDate = latestStudentSectionAttendanceEvent ? latestStudentSectionAttendanceEvent._lastModifiedDate : null;\r",
											"        console.log('latestStudentSectionAttendanceEventDate', latestStudentSectionAttendanceEventDate);\r",
											"\r",
											"        pm.environment.set(\"s4StudentSectionAttendanceEventId\", latestStudentSectionAttendanceEvent.id);\r",
											"        console.log('s4StudentSectionAttendanceEventId', pm.environment.get(\"s4StudentSectionAttendanceEventId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAttendanceEvents/{{s4StudentSectionAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAttendanceEvents",
										"{{s4StudentSectionAttendanceEventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": [
						{
							"name": "Scenario 5 DELETE - Get Student School Attendance Events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s5DeletedStudentSchoolAttendanceEventId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSchoolAttendanceEvents/{{s5DeletedStudentSchoolAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSchoolAttendanceEvents",
										"{{s5DeletedStudentSchoolAttendanceEventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 5 DELETE - Get Student Section Attendance Events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s5DeletedStudentSectionAttendanceEventId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentSectionAttendanceEvents/{{s5DeletedStudentSectionAttendanceEventId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentSectionAttendanceEvents",
										"{{s5DeletedStudentSectionAttendanceEventId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "12-StudentGrade",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Grade request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedGradeTypeDescriptor = \"Grading Period\";\r",
											"let expectedLetterGradeEarned = \"B\";\r",
											"let expectedNumericGradeEarned = 80;\r",
											"let expectedCurrentGradeIndicator = false;\r",
											"let expectedCurrentGradeAsOfDate = \"-12-16\";\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedGradingPeriodDescriptor\t= \"First Six Weeks\";\r",
											"let expectedPeriodSequence = 1;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolIdSSAR = 255901107;\r",
											"let expectedSchoolYearSSAR = currentYear;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedSectionIdentifier;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: gradeTypeDescriptor value for Grade is \" + expectedGradeTypeDescriptor, () => {\r",
											"    pm.expect(response.gradeTypeDescriptor, `'${expectedGradeTypeDescriptor}' was not found in the gradeTypeDescriptor property for Grade. Retrieved value is '${response.gradeTypeDescriptor}'`).to.include(expectedGradeTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: letterGradeEarned value for Grade is \" + expectedLetterGradeEarned, () => {\r",
											"    pm.expect(response.letterGradeEarned, `'${expectedLetterGradeEarned}' was not found in the letterGradeEarned property for Grade. Retrieved value is '${response.letterGradeEarned}'`).to.eql(expectedLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: numericGradeEarned value for Grade is \" + expectedNumericGradeEarned, () => {\r",
											"    pm.expect(response.numericGradeEarned, `'${expectedNumericGradeEarned}' was not found in the numericGradeEarned property for Grade. Retrieved value is '${response.numericGradeEarned}'`).to.eql(expectedNumericGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: currentGradeIndicator value for Grade is \" + expectedCurrentGradeIndicator, () => {\r",
											"    pm.expect(response.currentGradeIndicator, `'${expectedCurrentGradeIndicator}' was not found in the currentGradeIndicator property for Grade. Retrieved value is '${response.currentGradeIndicator}'`).to.eql(expectedCurrentGradeIndicator);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: currentGradeAsOfDate value for Grade is \" + expectedCurrentGradeAsOfDate, () => {\r",
											"    pm.expect(response.currentGradeAsOfDate, `'${expectedCurrentGradeAsOfDate}' was not found in the currentGradeAsOfDate property for Grade. Retrieved value is '${response.currentGradeAsOfDate}'`).to.include(expectedCurrentGradeAsOfDate);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: schoolId value from gradingPeriodReference for Grade is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: gradingPeriodDescriptor value from gradingPeriodReference for Grade is \" + expectedGradingPeriodDescriptor, () => {\r",
											"    pm.expect(response.gradingPeriodReference.gradingPeriodDescriptor, `'${expectedGradingPeriodDescriptor}' was not found in the gradingPeriodDescriptor property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.gradingPeriodDescriptor}'`).to.include(expectedGradingPeriodDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: periodSequence value from gradingPeriodReference for Grade is \" + expectedPeriodSequence, () => {\r",
											"    pm.expect(response.gradingPeriodReference.periodSequence, `'${expectedPeriodSequence}' was not found in the periodSequence property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.periodSequence}'`).to.eql(expectedPeriodSequence);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: schoolYear value from gradingPeriodReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValue = pm.environment.get(\"localCourseCodeSystemValue\");\r",
											"\r",
											"if (localCourseCodeSystemValue === \"\" || localCourseCodeSystemValue === null) {\r",
											"    expectedLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"13 - Scenario 1 POST: localCourseCode value from studentSectionAssociationReference for Grade is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 1 POST: schoolId value from studentSectionAssociationReference for Grade is \" + expectedSchoolIdSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolId, `'${expectedSchoolIdSSAR}' was not found in the schoolId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolId}'`).to.eql(expectedSchoolIdSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 1 POST: schoolYear value from studentSectionAssociationReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 1 POST: studentUniqueId value from studentSectionAssociationReference for Grade is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 1 POST: sessionName value from studentSectionAssociationReference for Grade is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValue = pm.environment.get(\"sectionIdentifierSystemValue\");\r",
											"\r",
											"if (sectionIdentifierSystemValue === \"\" || sectionIdentifierSystemValue === null) {\r",
											"    expectedSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"18 - Scenario 1 POST: sectionIdentifier value from studentSectionAssociationReference for Grade is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Grades and getting the ID of the grade\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/grades`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGrade = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradeDate = latestGrade ? latestGrade._lastModifiedDate : null;\r",
											"        console.log('latestGradeDate', latestGradeDate);\r",
											"\r",
											"        pm.environment.set(\"s1GradeId\", latestGrade.id);\r",
											"        console.log('s1GradeId', pm.environment.get(\"s1GradeId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/grades/{{s1GradeId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"grades",
										"{{s1GradeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 2 POST - Get Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Grade request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedGradeTypeDescriptor = \"Grading Period\";\r",
											"let expectedLetterGradeEarned = \"A\";\r",
											"let expectedNumericGradeEarned = 94;\r",
											"let expectedCurrentGradeIndicator = true;\r",
											"let expectedCurrentGradeAsOfDate = \"-12-16\";\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedGradingPeriodDescriptor\t= \"First Six Weeks\";\r",
											"let expectedPeriodSequence = 1;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolIdSSAR = 255901001;\r",
											"let expectedSchoolYearSSAR = currentYear;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedSectionIdentifier = \"ALG12017RM901\";\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: gradeTypeDescriptor value for Grade is \" + expectedGradeTypeDescriptor, () => {\r",
											"    pm.expect(response.gradeTypeDescriptor, `'${expectedGradeTypeDescriptor}' was not found in the gradeTypeDescriptor property for Grade. Retrieved value is '${response.gradeTypeDescriptor}'`).to.include(expectedGradeTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: letterGradeEarned value for Grade is \" + expectedLetterGradeEarned, () => {\r",
											"    pm.expect(response.letterGradeEarned, `'${expectedLetterGradeEarned}' was not found in the letterGradeEarned property for Grade. Retrieved value is '${response.letterGradeEarned}'`).to.eql(expectedLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: numericGradeEarned value for Grade is \" + expectedNumericGradeEarned, () => {\r",
											"    pm.expect(response.numericGradeEarned, `'${expectedNumericGradeEarned}' was not found in the numericGradeEarned property for Grade. Retrieved value is '${response.numericGradeEarned}'`).to.eql(expectedNumericGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: currentGradeIndicator value for Grade is \" + expectedCurrentGradeIndicator, () => {\r",
											"    pm.expect(response.currentGradeIndicator, `'${expectedCurrentGradeIndicator}' was not found in the currentGradeIndicator property for Grade. Retrieved value is '${response.currentGradeIndicator}'`).to.eql(expectedCurrentGradeIndicator);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: currentGradeAsOfDate value for Grade is \" + expectedCurrentGradeAsOfDate, () => {\r",
											"    pm.expect(response.currentGradeAsOfDate, `'${expectedCurrentGradeAsOfDate}' was not found in the currentGradeAsOfDate property for Grade. Retrieved value is '${response.currentGradeAsOfDate}'`).to.include(expectedCurrentGradeAsOfDate);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: schoolId value from gradingPeriodReference for Grade is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: gradingPeriodDescriptor value from gradingPeriodReference for Grade is \" + expectedGradingPeriodDescriptor, () => {\r",
											"    pm.expect(response.gradingPeriodReference.gradingPeriodDescriptor, `'${expectedGradingPeriodDescriptor}' was not found in the gradingPeriodDescriptor property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.gradingPeriodDescriptor}'`).to.include(expectedGradingPeriodDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: periodSequence value from gradingPeriodReference for Grade is \" + expectedPeriodSequence, () => {\r",
											"    pm.expect(response.gradingPeriodReference.periodSequence, `'${expectedPeriodSequence}' was not found in the periodSequence property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.periodSequence}'`).to.eql(expectedPeriodSequence);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: schoolYear value from gradingPeriodReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 POST: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 2 POST: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS2 = pm.environment.get(\"localCourseCodeSystemValueS2\");\r",
											"\r",
											"if (localCourseCodeSystemValueS2 === \"\" || localCourseCodeSystemValueS2 === null) {\r",
											"    expectedLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"13 - Scenario 2 POST: localCourseCode value from studentSectionAssociationReference for Grade is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 2 POST: schoolId value from studentSectionAssociationReference for Grade is \" + expectedSchoolIdSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolId, `'${expectedSchoolIdSSAR}' was not found in the schoolId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolId}'`).to.eql(expectedSchoolIdSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 2 POST: schoolYear value from studentSectionAssociationReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 2 POST: studentUniqueId value from studentSectionAssociationReference for Grade is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 2 POST: sessionName value from studentSectionAssociationReference for Grade is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"18 - Scenario 2 POST: sectionIdentifier value from studentSectionAssociationReference for Grade is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Grades and getting the ID of the grade\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/grades`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGrade = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradeDate = latestGrade ? latestGrade._lastModifiedDate : null;\r",
											"        console.log('latestGradeDate', latestGradeDate);\r",
											"\r",
											"        pm.environment.set(\"s2GradeId\", latestGrade.id);\r",
											"        console.log('s2GradeId', pm.environment.get(\"s2GradeId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/grades/{{s2GradeId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"grades",
										"{{s2GradeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 PUT - Get Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Grade request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedGradeTypeDescriptor = \"Grading Period\";\r",
											"let expectedLetterGradeEarned = \"A\";\r",
											"let expectedNumericGradeEarned = 91;\r",
											"let expectedCurrentGradeIndicator = false;\r",
											"let expectedCurrentGradeAsOfDate = \"-12-16\";\r",
											"let expectedSchoolId = 255901107;\r",
											"let expectedGradingPeriodDescriptor\t= \"First Six Weeks\";\r",
											"let expectedPeriodSequence = 1;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolIdSSAR = 255901107;\r",
											"let expectedSchoolYearSSAR = currentYear;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedSectionIdentifier;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: gradeTypeDescriptor value for Grade is \" + expectedGradeTypeDescriptor, () => {\r",
											"    pm.expect(response.gradeTypeDescriptor, `'${expectedGradeTypeDescriptor}' was not found in the gradeTypeDescriptor property for Grade. Retrieved value is '${response.gradeTypeDescriptor}'`).to.include(expectedGradeTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: letterGradeEarned value for Grade is \" + expectedLetterGradeEarned, () => {\r",
											"    pm.expect(response.letterGradeEarned, `'${expectedLetterGradeEarned}' was not found in the letterGradeEarned property for Grade. Retrieved value is '${response.letterGradeEarned}'`).to.eql(expectedLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: numericGradeEarned value for Grade is \" + expectedNumericGradeEarned, () => {\r",
											"    pm.expect(response.numericGradeEarned, `'${expectedNumericGradeEarned}' was not found in the numericGradeEarned property for Grade. Retrieved value is '${response.numericGradeEarned}'`).to.eql(expectedNumericGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: currentGradeIndicator value for Grade is \" + expectedCurrentGradeIndicator, () => {\r",
											"    pm.expect(response.currentGradeIndicator, `'${expectedCurrentGradeIndicator}' was not found in the currentGradeIndicator property for Grade. Retrieved value is '${response.currentGradeIndicator}'`).to.eql(expectedCurrentGradeIndicator);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: currentGradeAsOfDate value for Grade is \" + expectedCurrentGradeAsOfDate, () => {\r",
											"    pm.expect(response.currentGradeAsOfDate, `'${expectedCurrentGradeAsOfDate}' was not found in the currentGradeAsOfDate property for Grade. Retrieved value is '${response.currentGradeAsOfDate}'`).to.include(expectedCurrentGradeAsOfDate);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: schoolId value from gradingPeriodReference for Grade is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: gradingPeriodDescriptor value from gradingPeriodReference for Grade is \" + expectedGradingPeriodDescriptor, () => {\r",
											"    pm.expect(response.gradingPeriodReference.gradingPeriodDescriptor, `'${expectedGradingPeriodDescriptor}' was not found in the gradingPeriodDescriptor property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.gradingPeriodDescriptor}'`).to.include(expectedGradingPeriodDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: periodSequence value from gradingPeriodReference for Grade is \" + expectedPeriodSequence, () => {\r",
											"    pm.expect(response.gradingPeriodReference.periodSequence, `'${expectedPeriodSequence}' was not found in the periodSequence property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.periodSequence}'`).to.eql(expectedPeriodSequence);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: schoolYear value from gradingPeriodReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 PUT: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 PUT: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS3 = pm.environment.get(\"localCourseCodeSystemValueS3\");\r",
											"\r",
											"if (localCourseCodeSystemValueS3 === \"\" || localCourseCodeSystemValueS3 === null) {\r",
											"    expectedLocalCourseCode = \"ELA-01\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"13 - Scenario 3 PUT: localCourseCode value from studentSectionAssociationReference for Grade is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 3 PUT: schoolId value from studentSectionAssociationReference for Grade is \" + expectedSchoolIdSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolId, `'${expectedSchoolIdSSAR}' was not found in the schoolId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolId}'`).to.eql(expectedSchoolIdSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 3 PUT: schoolYear value from studentSectionAssociationReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 3 PUT: studentUniqueId value from studentSectionAssociationReference for Grade is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 3 PUT: sessionName value from studentSectionAssociationReference for Grade is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"let sectionIdentifierSystemValueS3 = pm.environment.get(\"sectionIdentifierSystemValueS3\");\r",
											"\r",
											"if (sectionIdentifierSystemValueS3 === \"\" || sectionIdentifierSystemValueS3 === null) {\r",
											"    expectedSectionIdentifier = \"ELA012017RM555\";\r",
											"} else {\r",
											"    expectedSectionIdentifier = sectionIdentifierSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"18 - Scenario 3 PUT: sectionIdentifier value from studentSectionAssociationReference for Grade is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Grades and getting the ID of the grade\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/grades`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGrade = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradeDate = latestGrade ? latestGrade._lastModifiedDate : null;\r",
											"        console.log('latestGradeDate', latestGradeDate);\r",
											"\r",
											"        pm.environment.set(\"s3GradeId\", latestGrade.id);\r",
											"        console.log('s3GradeId', pm.environment.get(\"s3GradeId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/grades/{{s3GradeId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"grades",
										"{{s3GradeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4",
					"item": [
						{
							"name": "Scenario 4 PUT - Get Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 4 PUT: Test that Grade request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedGradeTypeDescriptor = \"Grading Period\";\r",
											"let expectedLetterGradeEarned = \"B\";\r",
											"let expectedNumericGradeEarned = 89;\r",
											"let expectedCurrentGradeIndicator = true;\r",
											"let expectedCurrentGradeAsOfDate = \"-12-16\";\r",
											"let expectedSchoolId = 255901001;\r",
											"let expectedGradingPeriodDescriptor\t= \"First Six Weeks\";\r",
											"let expectedPeriodSequence = 1;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedBeginDate = `${currentYear}-08-23`;\r",
											"let expectedLocalCourseCode;\r",
											"let expectedSchoolIdSSAR = 255901001;\r",
											"let expectedSchoolYearSSAR = currentYear;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedSessionName = \"2016-2017 Fall Semester\";\r",
											"let expectedSectionIdentifier = \"ALG12017RM901\";\r",
											"\r",
											"pm.test(\"02 - Scenario 4 PUT: gradeTypeDescriptor value for Grade is \" + expectedGradeTypeDescriptor, () => {\r",
											"    pm.expect(response.gradeTypeDescriptor, `'${expectedGradeTypeDescriptor}' was not found in the gradeTypeDescriptor property for Grade. Retrieved value is '${response.gradeTypeDescriptor}'`).to.include(expectedGradeTypeDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 4 PUT: letterGradeEarned value for Grade is \" + expectedLetterGradeEarned, () => {\r",
											"    pm.expect(response.letterGradeEarned, `'${expectedLetterGradeEarned}' was not found in the letterGradeEarned property for Grade. Retrieved value is '${response.letterGradeEarned}'`).to.eql(expectedLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 4 PUT: numericGradeEarned value for Grade is \" + expectedNumericGradeEarned, () => {\r",
											"    pm.expect(response.numericGradeEarned, `'${expectedNumericGradeEarned}' was not found in the numericGradeEarned property for Grade. Retrieved value is '${response.numericGradeEarned}'`).to.eql(expectedNumericGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 4 PUT: currentGradeIndicator value for Grade is \" + expectedCurrentGradeIndicator, () => {\r",
											"    pm.expect(response.currentGradeIndicator, `'${expectedCurrentGradeIndicator}' was not found in the currentGradeIndicator property for Grade. Retrieved value is '${response.currentGradeIndicator}'`).to.eql(expectedCurrentGradeIndicator);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 4 PUT: currentGradeAsOfDate value for Grade is \" + expectedCurrentGradeAsOfDate, () => {\r",
											"    pm.expect(response.currentGradeAsOfDate, `'${expectedCurrentGradeAsOfDate}' was not found in the currentGradeAsOfDate property for Grade. Retrieved value is '${response.currentGradeAsOfDate}'`).to.include(expectedCurrentGradeAsOfDate);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 4 PUT: schoolId value from gradingPeriodReference for Grade is \" + expectedSchoolId, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolId}'`).to.eql(expectedSchoolId);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 4 PUT: gradingPeriodDescriptor value from gradingPeriodReference for Grade is \" + expectedGradingPeriodDescriptor, () => {\r",
											"    pm.expect(response.gradingPeriodReference.gradingPeriodDescriptor, `'${expectedGradingPeriodDescriptor}' was not found in the gradingPeriodDescriptor property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.gradingPeriodDescriptor}'`).to.include(expectedGradingPeriodDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 4 PUT: periodSequence value from gradingPeriodReference for Grade is \" + expectedPeriodSequence, () => {\r",
											"    pm.expect(response.gradingPeriodReference.periodSequence, `'${expectedPeriodSequence}' was not found in the periodSequence property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.periodSequence}'`).to.eql(expectedPeriodSequence);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 4 PUT: schoolYear value from gradingPeriodReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.gradingPeriodReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from gradingPeriodReference for Grade. Retrieved value is '${response.gradingPeriodReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 4 PUT: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 4 PUT: beginDate value from studentSectionAssociationReference for Grade is \" + expectedBeginDate, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.beginDate, `'${expectedBeginDate}' was not found in the beginDate property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.beginDate}'`).to.eql(expectedBeginDate);\r",
											"});\r",
											"\r",
											"let localCourseCodeSystemValueS4 = pm.environment.get(\"localCourseCodeSystemValueS4\");\r",
											"\r",
											"if (localCourseCodeSystemValueS4 === \"\" || localCourseCodeSystemValueS4 === null) {\r",
											"    expectedLocalCourseCode = \"ALG-2\";\r",
											"} else {\r",
											"    expectedLocalCourseCode = localCourseCodeSystemValueS4;\r",
											"}\r",
											"\r",
											"pm.test(\"13 - Scenario 4 PUT: localCourseCode value from studentSectionAssociationReference for Grade is \" + expectedLocalCourseCode, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);\r",
											"});\r",
											"\r",
											"pm.test(\"14 - Scenario 4 PUT: schoolId value from studentSectionAssociationReference for Grade is \" + expectedSchoolIdSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolId, `'${expectedSchoolIdSSAR}' was not found in the schoolId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolId}'`).to.eql(expectedSchoolIdSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"15 - Scenario 4 PUT: schoolYear value from studentSectionAssociationReference for Grade is \" + expectedSchoolYearSSAR, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.schoolYear, `'${expectedSchoolYearSSAR}' was not found in the schoolYear property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.schoolYear}'`).to.eql(expectedSchoolYearSSAR);\r",
											"});\r",
											"\r",
											"pm.test(\"16 - Scenario 4 PUT: studentUniqueId value from studentSectionAssociationReference for Grade is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"17 - Scenario 4 PUT: sessionName value from studentSectionAssociationReference for Grade is \" + expectedSessionName, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sessionName}'`).to.eql(expectedSessionName);\r",
											"});\r",
											"\r",
											"pm.test(\"18 - Scenario 4 PUT: sectionIdentifier value from studentSectionAssociationReference for Grade is \" + expectedSectionIdentifier, () => {\r",
											"    pm.expect(response.studentSectionAssociationReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from studentSectionAssociationReference for Grade. Retrieved value is '${response.studentSectionAssociationReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Grades and getting the ID of the grade\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/grades`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestGrade = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestGradeDate = latestGrade ? latestGrade._lastModifiedDate : null;\r",
											"        console.log('latestGradeDate', latestGradeDate);\r",
											"\r",
											"        pm.environment.set(\"s4GradeId\", latestGrade.id);\r",
											"        console.log('s4GradeId', pm.environment.get(\"s4GradeId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/grades/{{s4GradeId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"grades",
										"{{s4GradeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5",
					"item": [
						{
							"name": "Scenario 5 DELETE - Get Student Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Record \" + pm.environment.get(\"s5DeletedStudentGradeId\") + \" does not exist (404 Not Found)\", function () {\r",
											"     pm.expect(pm.response.code, \"Expected a 404 status code for non-existent record\").to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify empty response for non-existent record\", function () {\r",
											"    pm.expect(pm.response.text(), \"Expected the response body to be empty for a non-existent record\").to.be.empty; // Verify the response body is empty    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/grades/{{s5DeletedStudentGradeId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"grades",
										"{{s5DeletedStudentGradeId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "13-StudentTranscript",
			"item": [
				{
					"name": "Scenario 1",
					"item": [
						{
							"name": "Scenario 1 POST - Get Course Transcript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Course Transcript request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCourseCode = \"ALG-01\";\r",
											"let expectedEducationOrganizationIdSARR = 255901001;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedTermDescriptor = \"Fall Semester\";\r",
											"let expectedCourseAttemptResultDescriptor = \"Pass\";\r",
											"let expectedAttemptedCredits = 3;\r",
											"let expectedEarnedCredits = 3;\r",
											"let expectedFinalLetterGradeEarned = \"A\";\r",
											"let expectedFinalNumericGradeEarned = 98;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value from educationOrganizationId for Student Transcript is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: courseCode value from educationOrganizationId for Student Transcript is \" + expectedEducationOrganizationIdSARR, () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'${expectedEducationOrganizationIdSARR}' was not found in the courseCode property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(expectedEducationOrganizationIdSARR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: educationOrganizationId value from studentAcademicRecordReference for Student Transcript is \" + expectedEducationOrganizationIdSARR, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.educationOrganizationId, `'${expectedEducationOrganizationIdSARR}' was not found in the educationOrganizationId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdSARR);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: schoolYear value from studentAcademicRecordReference for Student Transcript is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: studentUniqueId value from studentAcademicRecordReference for Student Transcript is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: termDescriptor value from studentAcademicRecordReference for Student Transcript is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 1 POST: courseAttemptResultDescriptor value for Student Transcript is \" + expectedCourseAttemptResultDescriptor, () => {\r",
											"    pm.expect(response.courseAttemptResultDescriptor, `'${expectedCourseAttemptResultDescriptor}' was not found in the courseAttemptResultDescriptor property for Course Transcript. Retrieved value is '${response.courseAttemptResultDescriptor}'`).to.include(expectedCourseAttemptResultDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 1 POST: attemptedCredits value for Student Transcript is \" + expectedAttemptedCredits, () => {\r",
											"    pm.expect(response.attemptedCredits, `'${expectedAttemptedCredits}' was not found in the attemptedCredits property for Course Transcript. Retrieved value is '${response.attemptedCredits}'`).to.eql(expectedAttemptedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 1 POST: earnedCredits value for Student Transcript is \" + expectedEarnedCredits, () => {\r",
											"    pm.expect(response.earnedCredits, `'${expectedEarnedCredits}' was not found in the earnedCredits property for Course Transcript. Retrieved value is '${response.earnedCredits}'`).to.eql(expectedEarnedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 1 POST: finalLetterGradeEarned value for Student Transcript is \" + expectedFinalLetterGradeEarned, () => {\r",
											"    pm.expect(response.finalLetterGradeEarned, `'${expectedFinalLetterGradeEarned}' was not found in the finalLetterGradeEarned property for Course Transcript. Retrieved value is '${response.finalLetterGradeEarned}'`).to.eql(expectedFinalLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 1 POST: finalNumericGradeEarned value for Student Transcript is \" + expectedFinalNumericGradeEarned, () => {\r",
											"    pm.expect(response.finalNumericGradeEarned, `'${expectedFinalNumericGradeEarned}' was not found in the finalNumericGradeEarned property for Course Transcript. Retrieved value is '${response.finalNumericGradeEarned}'`).to.eql(expectedFinalNumericGradeEarned);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Transcript and getting the ID of course transcript\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseTranscripts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseTranscript = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseTranscriptDate = latestCourseTranscript ? latestCourseTranscript._lastModifiedDate : null;\r",
											"        console.log('latestCourseTranscriptDate', latestCourseTranscriptDate);\r",
											"\r",
											"        pm.environment.set(\"s1CourseTranscriptId\", latestCourseTranscript.id);\r",
											"        console.log('s1CourseTranscriptId', pm.environment.get(\"s1CourseTranscriptId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseTranscripts/{{s1CourseTranscriptId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseTranscripts",
										"{{s1CourseTranscriptId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 1 POST - Get Student Academic Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 1 POST: Test that Student Academic Record request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901107;\r",
											"let expectedSchoolYear = currentYear - 5;\r",
											"let expectedStudentUniqueId = \"111111\";\r",
											"let expectedTermDescriptor = \"Fall Semester\";\r",
											"let expectedCumulativeAttemptedCredits;\r",
											"let expectedCumulativeEarnedCredits;\r",
											"\r",
											"pm.test(\"02 - Scenario 1 POST: educationOrganizationId value from educationOrganizationReference for Student Academic Record is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Academic Record. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 1 POST: schoolYear value from schoolYearTypeReference for Student Academic Record is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from schoolYearTypeReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 1 POST: studentUniqueId value from studentReference for Student Academic Record is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 1 POST: termDescriptor value for Student Academic Record is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property for Student Academic Record. Retrieved value is '${response.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"let cumulativeAttemptedCreditsSystemValue = pm.environment.get(\"cumulativeAttemptedCreditsSystemValue\");\r",
											"\r",
											"if (cumulativeAttemptedCreditsSystemValue === null || cumulativeAttemptedCreditsSystemValue === \"\") {\r",
											"    expectedCumulativeAttemptedCredits = 0;\r",
											"} else { \r",
											"    expectedCumulativeAttemptedCredits = cumulativeAttemptedCreditsSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 1 POST: cumulativeAttemptedCredits value for Student Academic Record is \" + expectedCumulativeAttemptedCredits, () => {\r",
											"    pm.expect(response.cumulativeAttemptedCredits, `'${expectedCumulativeAttemptedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeAttemptedCredits}'`).to.eql(expectedCumulativeAttemptedCredits);\r",
											"});\r",
											"\r",
											"let cumulativeEarnedCreditsSystemValue = pm.environment.get(\"cumulativeEarnedCreditsSystemValue\");\r",
											"\r",
											"if (cumulativeEarnedCreditsSystemValue === null || cumulativeEarnedCreditsSystemValue === \"\") {\r",
											"    expectedCumulativeEarnedCredits = 0;\r",
											"} else { \r",
											"    expectedCumulativeEarnedCredits = cumulativeEarnedCreditsSystemValue;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 1 POST: cumulativeEarnedCredits value for Student Academic Record is \" + expectedCumulativeEarnedCredits, () => {\r",
											"    pm.expect(response.cumulativeEarnedCredits, `'${expectedCumulativeEarnedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeEarnedCredits}'`).to.eql(expectedCumulativeEarnedCredits);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Academic Record and getting the ID of student academic record\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentAcademicRecords`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentAcademicRecord = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentAcademicRecordDate = latestStudentAcademicRecord ? latestStudentAcademicRecord._lastModifiedDate : null;\r",
											"        console.log('latestStudentAcademicRecordDate', latestStudentAcademicRecordDate);\r",
											"\r",
											"        pm.environment.set(\"s1StudentAcademicRecordId\", latestStudentAcademicRecord.id);\r",
											"        console.log('s1StudentAcademicRecordId', pm.environment.get(\"s1StudentAcademicRecordId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentAcademicRecords/{{s1StudentAcademicRecordId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentAcademicRecords",
										"{{s1StudentAcademicRecordId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2",
					"item": [
						{
							"name": "Scenario 1 POST - Get Course Transcript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 PUT: Test that Course Transcript request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCourseCode = \"ALG-01\";\r",
											"let expectedEducationOrganizationIdSARR = 255901001;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedTermDescriptor = \"Fall Semester\";\r",
											"let expectedCourseAttemptResultDescriptor = \"Pass\";\r",
											"let expectedAttemptedCredits = 3;\r",
											"let expectedEarnedCredits = 3;\r",
											"let expectedFinalLetterGradeEarned = \"A\";\r",
											"let expectedFinalNumericGradeEarned = 100;\r",
											"\r",
											"pm.test(\"02 - Scenario 2 PUT: educationOrganizationId value from educationOrganizationId for Student Transcript is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 PUT: courseCode value from educationOrganizationId for Student Transcript is \" + expectedEducationOrganizationIdSARR, () => {\r",
											"    pm.expect(response.courseReference.courseCode, `'${expectedEducationOrganizationIdSARR}' was not found in the courseCode property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(expectedEducationOrganizationIdSARR);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 PUT: educationOrganizationId value from studentAcademicRecordReference for Student Transcript is \" + expectedEducationOrganizationIdSARR, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.educationOrganizationId, `'${expectedEducationOrganizationIdSARR}' was not found in the educationOrganizationId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdSARR);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 PUT: schoolYear value from studentAcademicRecordReference for Student Transcript is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 2 PUT: studentUniqueId value from studentAcademicRecordReference for Student Transcript is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 2 PUT: termDescriptor value from studentAcademicRecordReference for Student Transcript is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 2 PUT: courseAttemptResultDescriptor value for Student Transcript is \" + expectedCourseAttemptResultDescriptor, () => {\r",
											"    pm.expect(response.courseAttemptResultDescriptor, `'${expectedCourseAttemptResultDescriptor}' was not found in the courseAttemptResultDescriptor property for Course Transcript. Retrieved value is '${response.courseAttemptResultDescriptor}'`).to.include(expectedCourseAttemptResultDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 2 PUT: attemptedCredits value for Student Transcript is \" + expectedAttemptedCredits, () => {\r",
											"    pm.expect(response.attemptedCredits, `'${expectedAttemptedCredits}' was not found in the attemptedCredits property for Course Transcript. Retrieved value is '${response.attemptedCredits}'`).to.eql(expectedAttemptedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 2 PUT: earnedCredits value for Student Transcript is \" + expectedEarnedCredits, () => {\r",
											"    pm.expect(response.earnedCredits, `'${expectedEarnedCredits}' was not found in the earnedCredits property for Course Transcript. Retrieved value is '${response.earnedCredits}'`).to.eql(expectedEarnedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 2 PUT: finalLetterGradeEarned value for Student Transcript is \" + expectedFinalLetterGradeEarned, () => {\r",
											"    pm.expect(response.finalLetterGradeEarned, `'${expectedFinalLetterGradeEarned}' was not found in the finalLetterGradeEarned property for Course Transcript. Retrieved value is '${response.finalLetterGradeEarned}'`).to.eql(expectedFinalLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 2 PUT: finalNumericGradeEarned value for Student Transcript is \" + expectedFinalNumericGradeEarned, () => {\r",
											"    pm.expect(response.finalNumericGradeEarned, `'${expectedFinalNumericGradeEarned}' was not found in the finalNumericGradeEarned property for Course Transcript. Retrieved value is '${response.finalNumericGradeEarned}'`).to.eql(expectedFinalNumericGradeEarned);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Transcript and getting the ID of course transcript\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseTranscripts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseTranscript = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseTranscriptDate = latestCourseTranscript ? latestCourseTranscript._lastModifiedDate : null;\r",
											"        console.log('latestCourseTranscriptDate', latestCourseTranscriptDate);\r",
											"\r",
											"        pm.environment.set(\"s2CourseTranscriptId\", latestCourseTranscript.id);\r",
											"        console.log('s2CourseTranscriptId', pm.environment.get(\"s2CourseTranscriptId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseTranscripts/{{s2CourseTranscriptId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseTranscripts",
										"{{s2CourseTranscriptId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 2 POST - Get Student Academic Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 2 POST: Test that Student Academic Record request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = currentYear - 5;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedTermDescriptor = \"Fall Semester\";\r",
											"let expectedCumulativeAttemptedCredits;\r",
											"let expectedCumulativeEarnedCredits;\r",
											"let expectedCumulativeGradePointAverage;\r",
											"let expectedSessionAttemptedCredits;\r",
											"let expectedSessionEarnedCredits;\r",
											"let expectedEducationOrganizationIdGPR = 255901001; //There is no graduation plan reference for the Student Academic Records endpoint\r",
											"let expectedGraduationSchoolYear = currentYear; //There is no graduation plan reference for the Student Academic Records endpoint\r",
											"let expectedGraduationPlanTypeDescriptor = \"Recommended\"; //There is no graduation plan reference for the Student Academic Records endpoint\r",
											"\r",
											"pm.test(\"02 - Scenario 2 POST: educationOrganizationId value from educationOrganizationReference for Student Academic Record is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Academic Record. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 2 POST: schoolYear value from schoolYearTypeReference for Student Academic Record is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from schoolYearTypeReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 2 POST: studentUniqueId value from studentReference for Student Academic Record is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 2 POST: termDescriptor value for Student Academic Record is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property for Student Academic Record. Retrieved value is '${response.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"let cumulativeAttemptedCreditsSystemValueS2 = pm.environment.get(\"cumulativeAttemptedCreditsSystemValueS2\");\r",
											"\r",
											"if (cumulativeAttemptedCreditsSystemValueS2 === null || cumulativeAttemptedCreditsSystemValueS2 === \"\") {\r",
											"    expectedCumulativeAttemptedCredits = 40;\r",
											"} else { \r",
											"    expectedCumulativeAttemptedCredits = cumulativeAttemptedCreditsSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 2 POST: cumulativeAttemptedCredits value for Student Academic Record is \" + expectedCumulativeAttemptedCredits, () => {\r",
											"    pm.expect(response.cumulativeAttemptedCredits, `'${expectedCumulativeAttemptedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeAttemptedCredits}'`).to.eql(expectedCumulativeAttemptedCredits);\r",
											"});\r",
											"\r",
											"let cumulativeEarnedCreditsSystemValueS2 = pm.environment.get(\"cumulativeEarnedCreditsSystemValueS2\");\r",
											"\r",
											"if (cumulativeEarnedCreditsSystemValueS2 === null || cumulativeEarnedCreditsSystemValueS2 === \"\") {\r",
											"    expectedCumulativeEarnedCredits = 38;\r",
											"} else { \r",
											"    expectedCumulativeEarnedCredits = cumulativeEarnedCreditsSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 2 POST: cumulativeEarnedCredits value for Student Academic Record is \" + expectedCumulativeEarnedCredits, () => {\r",
											"    pm.expect(response.cumulativeEarnedCredits, `'${expectedCumulativeEarnedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeEarnedCredits}'`).to.eql(expectedCumulativeEarnedCredits);\r",
											"});\r",
											"\r",
											"let cumulativeGradePointAverageSystemValueS2 = pm.environment.get(\"cumulativeGradePointAverageSystemValueS2\");\r",
											"\r",
											"if (cumulativeGradePointAverageSystemValueS2 === null || cumulativeGradePointAverageSystemValueS2 === \"\"){\r",
											"    expectedCumulativeGradePointAverage = 3.0;\r",
											"} else {\r",
											"    expectedCumulativeGradePointAverage = cumulativeGradePointAverageSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - Scenario 2 POST: cumulativeGradePointAverage value for Student Academic Record is \" + expectedCumulativeGradePointAverage, () => {\r",
											"    pm.expect(response.cumulativeGradePointAverage, `'${expectedCumulativeGradePointAverage}' was not found in the cumulativeGradePointAverage property for Student Academic Record. Retrieved value is '${response.cumulativeGradePointAverage}'`).to.eql(expectedCumulativeGradePointAverage);\r",
											"});\r",
											"\r",
											"let sessionAttemptedCreditsSystemValueS2 = pm.environment.get(\"sessionAttemptedCreditsSystemValueS2\");\r",
											"\r",
											"if (sessionAttemptedCreditsSystemValueS2 === null || sessionAttemptedCreditsSystemValueS2 === \"\"){\r",
											"    expectedSessionAttemptedCredits = 3.0;\r",
											"} else {\r",
											"    expectedSessionAttemptedCredits = sessionAttemptedCreditsSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"09 - Scenario 2 POST: sessionAttemptedCredits value for Student Academic Record is \" + expectedSessionAttemptedCredits, () => {\r",
											"    pm.expect(response.sessionAttemptedCredits, `'${expectedSessionAttemptedCredits}' was not found in the sessionAttemptedCredits property for Student Academic Record. Retrieved value is '${response.sessionAttemptedCredits}'`).to.eql(expectedSessionAttemptedCredits);\r",
											"});\r",
											"\r",
											"let sessionEarnedCreditsSystemValueS2 = pm.environment.get(\"sessionEarnedCreditsSystemValueS2\");\r",
											"\r",
											"if (sessionEarnedCreditsSystemValueS2 === null || sessionEarnedCreditsSystemValueS2 === \"\"){\r",
											"    expectedSessionEarnedCredits = 3;\r",
											"} else {\r",
											"    expectedSessionEarnedCredits = sessionEarnedCreditsSystemValueS2;\r",
											"}\r",
											"\r",
											"pm.test(\"10 - Scenario 2 POST: sessionEarnedCredits value for Student Academic Record is \" + expectedSessionEarnedCredits, () => {\r",
											"    pm.expect(response.sessionEarnedCredits, `'${expectedSessionEarnedCredits}' was not found in the sessionEarnedCredits property for Student Academic Record. Retrieved value is '${response.sessionEarnedCredits}'`).to.eql(expectedSessionEarnedCredits);\r",
											"});\r",
											"\r",
											"//There is no graduation plan reference for the Student Academic Records endpoint"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Academic Record and getting the ID of student academic record\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentAcademicRecords`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentAcademicRecord = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentAcademicRecordDate = latestStudentAcademicRecord ? latestStudentAcademicRecord._lastModifiedDate : null;\r",
											"        console.log('latestStudentAcademicRecordDate', latestStudentAcademicRecordDate);\r",
											"\r",
											"        pm.environment.set(\"s2StudentAcademicRecordId\", latestStudentAcademicRecord.id);\r",
											"        console.log('s2StudentAcademicRecordId', pm.environment.get(\"s2StudentAcademicRecordId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentAcademicRecords/{{s2StudentAcademicRecordId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentAcademicRecords",
										"{{s2StudentAcademicRecordId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 3",
					"item": [
						{
							"name": "Scenario 3 POST - Get Course Transcript Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 POST: Test that Course Transcript request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedCourseCode = pm.environment.get(\"courseCodeSystemValue\");\r",
											"let expectedEducationOrganizationIdSARR = 255901001;\r",
											"let expectedSchoolYear = currentYear - 5;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedTermDescriptor = \"Spring Semester\";\r",
											"let expectedCourseAttemptResultDescriptor = \"Pass\";\r",
											"let expectedAttemptedCredits = 3;\r",
											"let expectedEarnedCredits = 3;\r",
											"let expectedFinalLetterGradeEarned = \"A\";\r",
											"let expectedFinalNumericGradeEarned = 92;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 POST: educationOrganizationId value from educationOrganizationId for Student Transcript is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.courseReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"if (!expectedCourseCode) {\r",
											"    pm.test(\"03 - Scenario 3 POST: courseCode value from educationOrganizationId for Student Transcript is empty. Please enter a value to this variable 'courseCodeSystemValue'\", () => {\r",
											"        pm.expect(expectedCourseCode, \"Please enter a value to this variable 'courseCodeSystemValue'\").to.not.be.empty;\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"03 - Scenario 3 POST: courseCode value from educationOrganizationId for Student Transcript is \" + expectedCourseCode, () => {\r",
											"        pm.expect(response.courseReference.courseCode, `'${expectedCourseCode}' was not found in the courseCode property from courseReference for Course Transcript. Retrieved value is '${response.courseReference.courseCode}'`).to.eql(expectedCourseCode);\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.test(\"04 - Scenario 3 POST: educationOrganizationId value from studentAcademicRecordReference for Student Transcript is \" + expectedEducationOrganizationIdSARR, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.educationOrganizationId, `'${expectedEducationOrganizationIdSARR}' was not found in the educationOrganizationId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationIdSARR);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 POST: schoolYear value from studentAcademicRecordReference for Student Transcript is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"06 - Scenario 3 POST: studentUniqueId value from studentAcademicRecordReference for Student Transcript is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"07 - Scenario 3 POST: termDescriptor value from studentAcademicRecordReference for Student Transcript is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.studentAcademicRecordReference.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property from studentAcademicRecordReference for Course Transcript. Retrieved value is '${response.studentAcademicRecordReference.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"08 - Scenario 3 POST: courseAttemptResultDescriptor value for Student Transcript is \" + expectedCourseAttemptResultDescriptor, () => {\r",
											"    pm.expect(response.courseAttemptResultDescriptor, `'${expectedCourseAttemptResultDescriptor}' was not found in the courseAttemptResultDescriptor property for Course Transcript. Retrieved value is '${response.courseAttemptResultDescriptor}'`).to.include(expectedCourseAttemptResultDescriptor);\r",
											"});\r",
											"\r",
											"pm.test(\"09 - Scenario 3 POST: attemptedCredits value for Student Transcript is \" + expectedAttemptedCredits, () => {\r",
											"    pm.expect(response.attemptedCredits, `'${expectedAttemptedCredits}' was not found in the attemptedCredits property for Course Transcript. Retrieved value is '${response.attemptedCredits}'`).to.eql(expectedAttemptedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"10 - Scenario 3 POST: earnedCredits value for Student Transcript is \" + expectedEarnedCredits, () => {\r",
											"    pm.expect(response.earnedCredits, `'${expectedEarnedCredits}' was not found in the earnedCredits property for Course Transcript. Retrieved value is '${response.earnedCredits}'`).to.eql(expectedEarnedCredits);\r",
											"});\r",
											"\r",
											"pm.test(\"11 - Scenario 3 POST: finalLetterGradeEarned value for Student Transcript is \" + expectedFinalLetterGradeEarned, () => {\r",
											"    pm.expect(response.finalLetterGradeEarned, `'${expectedFinalLetterGradeEarned}' was not found in the finalLetterGradeEarned property for Course Transcript. Retrieved value is '${response.finalLetterGradeEarned}'`).to.eql(expectedFinalLetterGradeEarned);\r",
											"});\r",
											"\r",
											"pm.test(\"12 - Scenario 3 POST: finalNumericGradeEarned value for Student Transcript is \" + expectedFinalNumericGradeEarned, () => {\r",
											"    pm.expect(response.finalNumericGradeEarned, `'${expectedFinalNumericGradeEarned}' was not found in the finalNumericGradeEarned property for Course Transcript. Retrieved value is '${response.finalNumericGradeEarned}'`).to.eql(expectedFinalNumericGradeEarned);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Course Transcript and getting the ID of course transcript\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/courseTranscripts`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestCourseTranscript = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestCourseTranscriptDate = latestCourseTranscript ? latestCourseTranscript._lastModifiedDate : null;\r",
											"        console.log('latestCourseTranscriptDate', latestCourseTranscriptDate);\r",
											"\r",
											"        pm.environment.set(\"s3CourseTranscriptId\", latestCourseTranscript.id);\r",
											"        console.log('s3CourseTranscriptId', pm.environment.get(\"s3CourseTranscriptId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/courseTranscripts/{{s3CourseTranscriptId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"courseTranscripts",
										"{{s3CourseTranscriptId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Scenario 3 PUT - Get Student Academic Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"01 - Scenario 3 PUT: Test that Student Academic Record request has 200 code status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let dateObject = new Date();\r",
											"let currentYear = dateObject.getFullYear();\r",
											"\r",
											"let expectedEducationOrganizationId = 255901001;\r",
											"let expectedSchoolYear = currentYear;\r",
											"let expectedStudentUniqueId = \"222222\";\r",
											"let expectedTermDescriptor = \"Fall Semester\";\r",
											"let expectedCumulativeAttemptedCredits;\r",
											"let expectedCumulativeEarnedCredits;\r",
											"let expectedCumulativeGradePointAverage;\r",
											"let expectedSessionAttemptedCredits;\r",
											"let expectedSessionEarnedCredits;\r",
											"\r",
											"pm.test(\"02 - Scenario 3 PUT: educationOrganizationId value from educationOrganizationReference for Student Academic Record is \" + expectedEducationOrganizationId, () => {\r",
											"    pm.expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from educationOrganizationReference for Student Academic Record. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);\r",
											"});\r",
											"\r",
											"pm.test(\"03 - Scenario 3 PUT: schoolYear value from schoolYearTypeReference for Student Academic Record is \" + expectedSchoolYear, () => {\r",
											"    pm.expect(response.schoolYearTypeReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from schoolYearTypeReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eql(expectedSchoolYear);\r",
											"});\r",
											"\r",
											"pm.test(\"04 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Academic Record is \" + expectedStudentUniqueId, () => {\r",
											"    pm.expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Academic Record. Retrieved value is '${response.schoolYearTypeReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);\r",
											"});\r",
											"\r",
											"pm.test(\"05 - Scenario 3 PUT: termDescriptor value for Student Academic Record is \" + expectedTermDescriptor, () => {\r",
											"    pm.expect(response.termDescriptor, `'${expectedTermDescriptor}' was not found in the termDescriptor property for Student Academic Record. Retrieved value is '${response.termDescriptor}'`).to.include(expectedTermDescriptor);\r",
											"});\r",
											"\r",
											"let cumulativeAttemptedCreditsSystemValueS3 = pm.environment.get(\"cumulativeAttemptedCreditsSystemValueS3\");\r",
											"\r",
											"if (cumulativeAttemptedCreditsSystemValueS3 === null || cumulativeAttemptedCreditsSystemValueS3 === \"\") {\r",
											"    expectedCumulativeAttemptedCredits = 43;\r",
											"} else { \r",
											"    expectedCumulativeAttemptedCredits = cumulativeAttemptedCreditsSystemValueS3 + 3;\r",
											"}\r",
											"\r",
											"pm.test(\"06 - Scenario 3 PUT: cumulativeAttemptedCredits value for Student Academic Record is \" + expectedCumulativeAttemptedCredits, () => {\r",
											"    pm.expect(response.cumulativeAttemptedCredits, `'${expectedCumulativeAttemptedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeAttemptedCredits}'`).to.eql(expectedCumulativeAttemptedCredits);\r",
											"});\r",
											"\r",
											"let cumulativeEarnedCreditsSystemValueS3 = pm.environment.get(\"cumulativeEarnedCreditsSystemValueS3\");\r",
											"\r",
											"if (cumulativeEarnedCreditsSystemValueS3 === null || cumulativeEarnedCreditsSystemValueS3 === \"\") {\r",
											"    expectedCumulativeEarnedCredits = 41;\r",
											"} else { \r",
											"    expectedCumulativeEarnedCredits = cumulativeEarnedCreditsSystemValueS3 + 3;\r",
											"}\r",
											"\r",
											"pm.test(\"07 - Scenario 3 PUT: cumulativeEarnedCredits value for Student Academic Record is \" + expectedCumulativeEarnedCredits, () => {\r",
											"    pm.expect(response.cumulativeEarnedCredits, `'${expectedCumulativeEarnedCredits}' was not found in the cumulativeAttemptedCredits property for Student Academic Record. Retrieved value is '${response.cumulativeEarnedCredits}'`).to.eql(expectedCumulativeEarnedCredits);\r",
											"});\r",
											"\r",
											"let cumulativeGradePointAverageSystemValueS3 = pm.environment.get(\"cumulativeGradePointAverageSystemValueS3\");\r",
											"\r",
											"if (cumulativeGradePointAverageSystemValueS3 === null || cumulativeGradePointAverageSystemValueS3 === \"\"){\r",
											"    expectedCumulativeGradePointAverage = 3.0;\r",
											"} else {\r",
											"    expectedCumulativeGradePointAverage = cumulativeGradePointAverageSystemValueS3;\r",
											"}\r",
											"\r",
											"pm.test(\"08 - Scenario 3 PUT: cumulativeGradePointAverage value for Student Academic Record is \" + expectedCumulativeGradePointAverage, () => {\r",
											"    pm.expect(response.cumulativeGradePointAverage, `'${expectedCumulativeGradePointAverage}' was not found in the cumulativeGradePointAverage property for Student Academic Record. Retrieved value is '${response.cumulativeGradePointAverage}'`).to.eql(expectedCumulativeGradePointAverage);\r",
											"});\r",
											"\r",
											"let sessionAttemptedCreditsSystemValueS3 = pm.environment.get(\"sessionAttemptedCreditsSystemValueS3\");\r",
											"\r",
											"if (sessionAttemptedCreditsSystemValueS3 === null || sessionAttemptedCreditsSystemValueS3 === \"\"){\r",
											"    expectedSessionAttemptedCredits = 6;\r",
											"} else {\r",
											"    expectedSessionAttemptedCredits = sessionAttemptedCreditsSystemValueS3 + 3;\r",
											"}\r",
											"\r",
											"pm.test(\"09 - Scenario 3 PUT: sessionAttemptedCredits value for Student Academic Record is \" + expectedSessionAttemptedCredits, () => {\r",
											"    pm.expect(response.sessionAttemptedCredits, `'${expectedSessionAttemptedCredits}' was not found in the sessionAttemptedCredits property for Student Academic Record. Retrieved value is '${response.sessionAttemptedCredits}'`).to.eql(expectedSessionAttemptedCredits);\r",
											"});\r",
											"\r",
											"let sessionEarnedCreditsSystemValueS3 = pm.environment.get(\"sessionEarnedCreditsSystemValueS3\");\r",
											"\r",
											"if (sessionEarnedCreditsSystemValueS3 === null || sessionEarnedCreditsSystemValueS3 === \"\"){\r",
											"    expectedSessionEarnedCredits = 6;\r",
											"} else {\r",
											"    expectedSessionEarnedCredits = sessionEarnedCreditsSystemValueS3 + 3;\r",
											"}\r",
											"\r",
											"pm.test(\"10 - Scenario 3 PUT: sessionEarnedCredits value for Student Academic Record is \" + expectedSessionEarnedCredits, () => {\r",
											"    pm.expect(response.sessionEarnedCredits, `'${expectedSessionEarnedCredits}' was not found in the sessionEarnedCredits property for Student Academic Record. Retrieved value is '${response.sessionEarnedCredits}'`).to.eql(expectedSessionEarnedCredits);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Making the GET request to Student Academic Record and getting the ID of student academic record\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get('resourceBaseUrl')}/ed-fi/studentAcademicRecords`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Authorization': 'Bearer ' + pm.environment.get('certToken'),\r",
											"        'Accept': '*/*'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error in the Authentication Process:', err);\r",
											"    } else {\r",
											"        const _ = require('lodash');\r",
											"\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        let latestStudentAcademicRecord = _.maxBy(jsonData, '_lastModifiedDate');\r",
											"\r",
											"        let latestStudentAcademicRecordDate = latestStudentAcademicRecord ? latestStudentAcademicRecord._lastModifiedDate : null;\r",
											"        console.log('latestStudentAcademicRecordDate', latestStudentAcademicRecordDate);\r",
											"\r",
											"        pm.environment.set(\"s3StudentAcademicRecordId\", latestStudentAcademicRecord.id);\r",
											"        console.log('s3StudentAcademicRecordId', pm.environment.get(\"s3StudentAcademicRecordId\"));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{certToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resourceBaseUrl}}/ed-fi/studentAcademicRecords/{{s3StudentAcademicRecordId}}",
									"host": [
										"{{resourceBaseUrl}}"
									],
									"path": [
										"ed-fi",
										"studentAcademicRecords",
										"{{s3StudentAcademicRecordId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.sendRequest({\r",
					"    url: `${pm.environment.get('baseUrl')}/oauth/token`,\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/x-www-form-urlencoded' \r",
					"    },\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            { key: 'grant_type', value: 'client_credentials' },\r",
					"            { key: 'client_id', value: pm.environment.get('edFiClientId') },\r",
					"            { key: 'client_secret', value: pm.environment.get('edFiClientSecret')}\r",
					"        ]\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log('Error when generating the token:', err); \r",
					"    } else {\r",
					"        accessToken = res.json().access_token;\r",
					"        pm.environment.set('certToken',accessToken);\r",
					"        console.log(\"Access token is: \", accessToken);\r",
					"    }\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "studentUniqueIdValueSSEACollection",
			"value": ""
		}
	]
}