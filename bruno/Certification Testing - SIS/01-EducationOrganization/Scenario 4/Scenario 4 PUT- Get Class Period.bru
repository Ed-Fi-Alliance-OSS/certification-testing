meta {
  name: Scenario 4 PUT- Get Class Period
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/classPeriods/{{s4ClassPeriodId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Class Periods and getting the ID of the class period
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/classPeriods`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          const _ = require('lodash');
  
          var jsonData = res.data;
  
          let latestClassPeriod = _.maxBy(jsonData, '_lastModifiedDate');
  
          let latestClassPeriodDate = latestClassPeriod ? latestClassPeriod._lastModifiedDate : null;
          console.log('latestClassPeriodDate', latestClassPeriodDate);
  
          bru.setEnvVar("s4ClassPeriodId", latestClassPeriod.id);
          console.log('s4ClassPeriodId', bru.getEnvVar("s4ClassPeriodId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 4 POST: Test that Class Period request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let classPeriodSystemValueS4 = bru.getEnvVar("classPeriodSystemValueS4");
  let statementClassPeriodName = "";
  
  if (classPeriodSystemValueS4 === "" || classPeriodSystemValueS4 === null) {
      statementClassPeriodName = "Class Period 1";
  } else {
      statementClassPeriodName = classPeriodSystemValueS4;
  }
  
  test("02 - Scenario 4 POST: classPeriodName value for the class period is " + statementClassPeriodName , () =>{
      expect(response.classPeriodName).to.eql(statementClassPeriodName, `'${statementClassPeriodName}' was not found in the classPeriodName property. Retrieved value is '${response.classPeriodName}'`);
  });
  
  test("03 - Scenario 4 POST: schoolId value for the class period is '255901001'", () =>{
      expect(response, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.have.nested.property('schoolReference.schoolId');
  });
  
  let meetingTimesArray = response.meetingTimes;
  expect(meetingTimesArray).to.be.an("array").that.is.not.empty;
  
  
  test("04 - Scenario 4 POST: startTime value for the class period is '08:35:00'", () =>{
      meetingTimesArray.forEach((meeting) => {
          expect(meeting.startTime).to.eql("08:35:00", `'08:35:00' was not found in the startTime property. Retrieved value is '${meeting.startTime}'`);
      });
  });
  
  test("05 - Scenario 4 POST: endTime value for the class period is '09:25:00'", () =>{
      meetingTimesArray.forEach((meeting) => {
          expect(meeting.endTime).to.eql("09:25:00", `'09:25:00' was not found in the endTime property. Retrieved value is '${meeting.endTime}'`);
      });
  });
  
}

settings {
  encodeUrl: true
}
