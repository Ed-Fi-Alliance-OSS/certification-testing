meta {
  name: Scenario 2 POST - Get Location
  type: http
  seq: 4
}

get {
  url: {{resourceBaseUrl}}/ed-fi/locations/{{s2Location}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Locations and getting the ID of the location
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/locations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          var jsonData = res.data;
          let latestLocation = bru.findLatestByModifiedDate(jsonData);
  
          let latestLocationDate = latestLocation ? latestLocation._lastModifiedDate : null;
          console.log('latestLocationDate', latestLocationDate);
  
          bru.setEnvVar("s2Location", latestLocation.id);
          console.log('s2Location', bru.getEnvVar("s2Location"));
      }
  });
}

script:post-response {
  test("01 - Scenario 2 POST: Test that Location request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  
  let locationSystemValueS2 = bru.getEnvVar("locationSystemValueS2");
  let statementclassroomIdentificationCode = "";
  
  if (locationSystemValueS2 === "" || locationSystemValueS2 === null) {
      statementclassroomIdentificationCode = "901";
  } else {
      statementclassroomIdentificationCode = locationSystemValueS2;
  }
  
  test("02 - Scenario 2 POST: classroomIdentificationCode value for the location is " + statementclassroomIdentificationCode, () =>{
      expect(response.classroomIdentificationCode).to.eql(statementclassroomIdentificationCode, `'${statementclassroomIdentificationCode}' was not found in the classroomIdentificationCode property. Retrieved value is '${response.classroomIdentificationCode}'`);
  });
  
  test("03 - Scenario 2 POST: schoolId value for the location is '255901001'", () =>{
      expect(response.schoolReference.schoolId, `'255901001' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql(255901001);
  });
  
  test("04 - Scenario 2 POST: maximumNumberOfSeats value for the location is '22'", () =>{
      expect(response.maximumNumberOfSeats, `'22' was not found in the maximumNumberOfSeats property. Retrieved value is '${response.maximumNumberOfSeats}'`).to.eql(22);
  });
  
}

settings {
  encodeUrl: true
}
