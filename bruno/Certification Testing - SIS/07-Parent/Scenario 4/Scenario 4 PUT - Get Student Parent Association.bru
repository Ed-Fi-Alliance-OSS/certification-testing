meta {
  name: Scenario 4 PUT - Get Student Parent Association
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentParentAssociations/{{s4StudentParentAssociationId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Student Parent Association and getting the ID of the student parent association
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/studentParentAssociations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          const _ = require('lodash');
  
          var jsonData = res.data;
  
          let latestStudentParentAssociation = _.maxBy(jsonData, '_lastModifiedDate');
  
          let latestStudentParentAssociationsDate = latestStudentParentAssociation ? latestStudentParentAssociation._lastModifiedDate : null;
          console.log('latestStudentParentAssociationsDate', latestStudentParentAssociationsDate);
  
          bru.setEnvVar("s4StudentParentAssociationId", latestStudentParentAssociation.id);
          console.log('s4StudentParentAssociationId', bru.getEnvVar("s4StudentParentAssociationId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 4 PUT: Test that Student Parent Association request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let expectedParentUniqueId;
  let expectedStudentUniqueId = "222222";
  let expectedEmergencyContactStatus = false;
  let expectedPrimaryContactStatus = true;
  let expectedRelationDescriptor = "Mother";
  
  let parentUniqueIdSystemValueS4 = bru.getEnvVar("parentUniqueIdSystemValueS4");
  expectedParentUniqueId = "";
  if (parentUniqueIdSystemValueS4 === "" || parentUniqueIdSystemValueS4 === null) {
      expectedParentUniqueId = "444444";
  } else {
      expectedParentUniqueId = parentUniqueIdSystemValueS4;
  }
  
  test("02 - Scenario 4 PUT: parentUniqueId value for Student Parent Association is " + expectedParentUniqueId, () => {
      expect(response.parentReference.parentUniqueId, `'${expectedParentUniqueId}' was not found in the parentUniqueId property from parentReference for Student Parent Association. Retrieved value is '${response.parentReference.parentUniqueId}.'`).to.eql(expectedParentUniqueId);
  });
  
  test("03 - Scenario 4 PUT: studentUniqueId value for Student Parent Association is " + expectedStudentUniqueId, () => {
      expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Parent Association. Retrieved value is '${response.studentReference.studentUniqueId}.'`).to.eql(expectedStudentUniqueId);
  });
  
  test("04 - Scenario 4 PUT: emergencyContactStatus value for Student Parent Association is " + expectedEmergencyContactStatus, () => {
      expect(response.emergencyContactStatus, `'${expectedEmergencyContactStatus}' was not found in the emergencyContactStatus property for Student Parent Association. Retrieved value is '${response.emergencyContactStatus}.'`).to.be.true;
  });
  
  test("05 - Scenario 4 PUT: primaryContactStatus value for Student Parent Association is " + expectedPrimaryContactStatus, () => {
      expect(response.primaryContactStatus, `'${expectedPrimaryContactStatus}' was not found in the primaryContactStatus property for Student Parent Association. Retrieved value is '${response.primaryContactStatus}.'`).to.be.true;
  });
  
  test("06 - Scenario 4 PUT: relationDescriptor value for Student Parent Association is " + expectedRelationDescriptor, () => {
      expect(response.relationDescriptor, `'${expectedRelationDescriptor}' was not found in the relationDescriptor property for Student Parent Association. Retrieved value is '${response.relationDescriptor}.'`).to.contain(expectedRelationDescriptor);
  });
}

settings {
  encodeUrl: true
}
