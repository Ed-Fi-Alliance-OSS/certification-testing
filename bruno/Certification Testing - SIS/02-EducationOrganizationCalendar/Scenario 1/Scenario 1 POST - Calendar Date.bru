meta {
  name: Scenario 1 POST - Calendar Date
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/calendarDates/{{s1CalendarDateId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request of Calendar Dated and getting the ID of the latest calendar date
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/calendarDates`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          const _ = require('lodash');
  
          var jsonData = res.data;
  
          let latestCalendarDate = _.maxBy(jsonData, '_lastModifiedDate');
  
          let latestCalendarDateDate = latestCalendarDate ? latestCalendarDate._lastModifiedDate : null;
          console.log('latestCalendarDateDate', latestCalendarDateDate);
  
          bru.setEnvVar("s1CalendarDateId", latestCalendarDate.id);
          console.log('s1CalendarDateId', bru.getEnvVar("s1CalendarDateId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 2 POST: Test that Calendar dates request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let dateString = response.date;
  console.log("dateString", dateString);
  
  let date = new Date(dateString);
  console.log("date", date);
  
  let yearFromDate = date.getFullYear();
  let monthFromDate = date.getMonth() + 1;
  let dayFromDate = date.getDate();
  console.log("yearFromDate: ", yearFromDate, " || monthFromDate: ", monthFromDate, " || dayFromDate: ", dayFromDate);
  
  let currentYear = new Date().getFullYear();
  console.log("currentYear", currentYear);
  
  let currentDateTest = `${currentYear}-09-16`;
  
  let formattedDate = date.toISOString().split('T')[0];
  console.log("formattedDate", formattedDate);
  
  test("02 - Scenario 1 POST: year of date value for the calendar dates is 9/16/" + currentYear, () => {
      expect(formattedDate, `'${currentYear}-09-16' was not found in the date property. Retrieved value is: ${formattedDate}`).to.eql(`${currentYear}-09-16`);
  });
  
  test("03 - Scenario 1 POST: calendarCode value for the calendar dates is '107SS111111'", () => {
      expect(response.calendarCode, `'107SS111111' was not found in the calendarCode property. Retrieved value is: ${response.calendarCode}`).to.eql("107SS111111");
  });
  
  test("04 - Scenario 1 POST: schoolId value for the calendar dates is '255901107'", () =>{
      expect(response.schoolReference.schoolId, `'255901107' was not found in the schoolId property. Retrieved value is '${response.schoolReference.schoolId}'`).to.eql('255901107');
  });
  
  test("05 - Scenario 1 POST: schoolYear value for the calendar dates is " + currentYear, () => {
      expect(response.calendarReference.schoolYear, `${currentYear} was not found in the schoolYear property. Retrieved value is '${response.schoolYearTypeReference.schoolYear}'`).to.eq(currentYear);
  });
  
  let certCalendarEvents = [
      { "calendarEventDescriptor": "uri://ed-fi.org/CalendarEventDescriptor#Holiday" }
  ];
  let calendarEventDescriptorArray = response.calendarEvents;
  
  test("06 - Scenario 1 POST: calendarEventDescriptor value for the calendar dates is 'Holiday'", () => {
      let ced = calendarEventDescriptorArray.some(item => item.calendarEventDescriptor.includes("Holiday"));
      expect(ced, `'Holiday' was not found in any of the calendarEventDescriptor values. The obtained values are: ${JSON.stringify(calendarEventDescriptorArray.map(item => item.calendarEventDescriptor))}`).to.be.true;
  });
  
}

settings {
  encodeUrl: true
}
