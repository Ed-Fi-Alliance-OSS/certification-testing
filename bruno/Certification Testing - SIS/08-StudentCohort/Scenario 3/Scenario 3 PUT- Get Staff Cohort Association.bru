meta {
  name: Scenario 3 PUT- Get Staff Cohort Association
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/staffCohortAssociations/{{s3StaffCohortAssociationId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Staff Cohort Association and getting the ID of the staff cohort association
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/staffCohortAssociations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          var jsonData = res.data;

          // Find the latest item by _lastModifiedDate using native JavaScript
          let latestStaffCohortAssociation = jsonData.reduce((latest, current) => {
              return (!latest || current._lastModifiedDate > latest._lastModifiedDate) ? current : latest;
          }, null);
  
          let latestStaffCohortAssociationDate = latestStaffCohortAssociation ? latestStaffCohortAssociation._lastModifiedDate : null;
          console.log('latestStaffCohortAssociationDate', latestStaffCohortAssociationDate);
  
          bru.setEnvVar("s3StaffCohortAssociationId", latestStaffCohortAssociation.id);
          console.log('s3StaffCohortAssociationId', bru.getEnvVar("s3StaffCohortAssociationId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 3 PUT: Test that Staff Cohort Association request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let dateObject = new Date();
  let currentYear = dateObject.getFullYear();
  
  let expectedEducationOrganizationId = 255901107;
  let expectedCohortIdentifier;
  let expectedBeginDate = `${currentYear}-09-14`;
  let expectedEndDate = `${currentYear}-12-20`;
  let expectedStaffUniqueId;
  
  test("02 - Scenario 3 PUT: educationOrganizationId value from educationOrganizationReference for Staff Cohort Association is: " + expectedEducationOrganizationId, () => {
      expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`).to.eql(expectedEducationOrganizationId);
  });
  
  let cohortIdentifierSystemValueS3 = bru.getEnvVar("cohortIdentifierSystemValueS3");
  expectedCohortIdentifier = "";
  if (cohortIdentifierSystemValueS3 === "" || cohortIdentifierSystemValueS3 === null) {
      expectedCohortIdentifier = "1";
  } else {
      expectedCohortIdentifier = cohortIdentifierSystemValueS3;
  }
  
  test("03 - Scenario 3 PUT: cohortIdentifier value from cohortReference for Staff Cohort Association is: " + expectedCohortIdentifier, () => {
      expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Staff Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);
  });
  
  test("04 - Scenario 3 PUT: beginDate value for Staff Cohort Association is: " + expectedBeginDate, () => {
      expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Staff Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);
  });
  
  test("05 - Scenario 3 PUT: endDate value for Staff Cohort Association is: " + expectedEndDate, () => {
      expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Staff Cohort Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);
  });
  
  let staffUniqueIdSystemValueS3 = bru.getEnvVar("staffUniqueIdSystemValueS3");
  expectedStaffUniqueId = "";
  if (staffUniqueIdSystemValueS3 === "" || staffUniqueIdSystemValueS3 === null) {
      expectedStaffUniqueId = "207220";
  } else {
      expectedStaffUniqueId = staffUniqueIdSystemValueS3;
  }
  
  test("06 - Scenario 3 PUT: staffUniqueId value from staffReference for Staff Cohort Association is: " + expectedStaffUniqueId, () => {
      expect(response.staffReference.staffUniqueId, `'${expectedStaffUniqueId}' value was not found in the staffUniqueId property from staffReference for Staff Cohort Association. Retrieved value is '${response.staffReference.staffUniqueId}'.`).to.eql(expectedStaffUniqueId);
  });
}

settings {
  encodeUrl: true
}
