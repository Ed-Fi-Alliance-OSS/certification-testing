meta {
  name: Scenario 3 PUT - Get Student Cohort Association
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentCohortAssociations/{{s3StudentCohortAssociationId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Student Cohort Association and getting the ID of the staff cohort association
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/studentCohortAssociations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          const _ = require('lodash');
  
          var jsonData = res.data;
  
          let latestStudentCohortAssociation = _.maxBy(jsonData, '_lastModifiedDate');
  
          let latestStudentCohortAssociationDate = latestStudentCohortAssociation ? latestStudentCohortAssociation._lastModifiedDate : null;
          console.log('latestStudentCohortAssociationDate', latestStudentCohortAssociationDate);
  
          bru.setEnvVar("s3StudentCohortAssociationId", latestStudentCohortAssociation.id);
          console.log('s3StudentCohortAssociationId', bru.getEnvVar("s3StudentCohortAssociationId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 3 PUT: Test that Student Cohort Association request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let dateObject = new Date();
  let currentYear = dateObject.getFullYear();
  
  let expectedEducationOrganizationId = 255901107;
  let expectedCohortIdentifier;
  let expectedStudentUniqueId = "111111";
  let expectedBeginDate = `${currentYear}-09-14`;
  let expectedEndDate = `${currentYear}-09-21`;
  
  test("02 - Scenario 3 PUT: educationOrganizationId value from cohortReference for Student Cohort Association is " + expectedEducationOrganizationId, () => {
      expect(response.cohortReference.educationOrganizationId, `'${expectedEducationOrganizationId}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.educationOrganizationId}'.`)
  });
  
  let cohortIdentifierSystemValueS3 = bru.getEnvVar("cohortIdentifierSystemValueS3");
  expectedCohortIdentifier = "";
  if (cohortIdentifierSystemValueS3 === "" || cohortIdentifierSystemValueS3 === null) {
      expectedCohortIdentifier = "1";
  } else {
      expectedCohortIdentifier = cohortIdentifierSystemValueS3;
  }
  
  test("03 - Scenario 3 PUT: cohortIdentifier value from cohortReference for Student Cohort Association is: " + expectedCohortIdentifier, () => {
      expect(response.cohortReference.cohortIdentifier, `'${expectedCohortIdentifier}' value was not found in the educationOrganizationId property from cohortReference for Student Cohort Association. Retrieved value is '${response.cohortReference.cohortIdentifier}'.`).to.eql(expectedCohortIdentifier);
  });
  
  test("04 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Cohort Association is: " + expectedStudentUniqueId, () => {
      expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' value was not found in the studentUniqueId property from studentReference for Student Cohort Association. Retrieved value is '${response.studentReference.studentUniqueId}'.`).to.eql(expectedStudentUniqueId);
  });
  
  test("05 - Scenario 3 PUT: beginDate value for Student Cohort Association is: " + expectedBeginDate, () => {
      expect(response.beginDate, `'${expectedBeginDate}' value was not found in the beginDate property for Student Cohort Association. Retrieved value is '${response.beginDate}'.`).to.eql(expectedBeginDate);
  });
  
  test("06 - Scenario 3 PUT: endDate value for Student Cohort Association is: " + expectedEndDate, () => {
      expect(response.endDate, `'${expectedEndDate}' value was not found in the endDate property for Student Cohort Association. Retrieved value is '${response.endDate}'.`).to.eql(expectedEndDate);
  });
  
}

settings {
  encodeUrl: true
}
