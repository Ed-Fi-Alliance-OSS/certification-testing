meta {
  name: Scenario 3 PUT - Get Student Education Organization Association
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentEducationOrganizationAssociations/{{s3StudentEducationOrganizationAssociationId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Student Education Organization Association and getting the ID of the student school association
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/studentEducationOrganizationAssociations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          var jsonData = res.data;
          let latestStudentEducationOrganizationAssociation = bru.findLatestByModifiedDate(jsonData);
  
          let latestStudentEducationOrganizationAssociationDate = latestStudentEducationOrganizationAssociation ? latestStudentEducationOrganizationAssociation._lastModifiedDate : null;
          console.log('latestStudentEducationOrganizationAssociationDate', latestStudentEducationOrganizationAssociationDate);
  
          bru.setEnvVar("s3StudentEducationOrganizationAssociationId", latestStudentEducationOrganizationAssociation.id);
          console.log('s3StudentEducationOrganizationAssociationId', bru.getEnvVar("s3StudentEducationOrganizationAssociationId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 3 PUT: Test that Student Education Organization Association request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let expectedEducationOrganizationId = 255901 ;
  let expectedStudentUniqueId = "111111";
  let expectedLimitedEnglishProficiencyDescriptor = "NotLimited";
  let expectedStudentCharacteristicDescriptor = "Immigrant";
  let expectedAssigningOrganizationIdentificationCode1 = "State";
  let expectedAssigningOrganizationIdentificationCode2 = "District";
  let expectedAssigningOrganizationIdentificationCode3 = "Local";
  let expectedIdentificationCode1 = bru.getEnvVar("s3IdentificationCode1");
  let expectedIdentificationCode2 = bru.getEnvVar("s3IdentificationCode2");
  let expectedIdentificationCode3 = bru.getEnvVar("s3IdentificationCode3");
  let expectedStudentIdentificationSystemDescriptor1 = "State";
  let expectedStudentIdentificationSystemDescriptor2 = "District";
  let expectedStudentIdentificationSystemDescriptor3 = "Local";
  let expectedSexDescriptor = "Male";
  let expectedAddressTypeDescriptor = "Home";
  let expectedCity = "Grand Bend";
  let expectedPostalCode = 78834;
  let expectedStateAbbreviationDescriptor = "TX";
  let expectedStreetNumberName = "654 Mission Hills";
  let expectedTelephoneNumber = "(111) 222 4444";
  let expectedTelephoneNumberTypeDescriptor = "Home";
  let expectedElectronicMailAddress = "austin@edficert.org";
  let expectedElectronicMailTypeDescriptor = "Other";
  let expectedHispanicLatinoEthnicity = false;
  let expectedRaceDescriptor = "Black - African American";
  let expectedLanguageDescriptor = "spa";
  let expectedLanguageUseDescriptor = "Home language";
  
  test("02 - Scenario 3 PUT: educationOrganizationId value for the Student Education Organization Association is " + expectedEducationOrganizationId, () => {
      expect(response.educationOrganizationReference.educationOrganizationId, `'${expectedEducationOrganizationId}' was not found in the educationOrganizationId property from the educationOrganizationReference for the Student Education Organization Association. Retrieved value is '${response.educationOrganizationReference.educationOrganizationId}'`).to.eql(expectedEducationOrganizationId);
  });
  
  test("03 - Scenario 3 PUT: studentUniqueId value for the Student Education Organization Association is " + expectedStudentUniqueId, () => {
      expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from the studentReference for the Student Education Organization Association. Retrieved value is '${response.studentReference.studentUniqueId}'`).to.eql(expectedStudentUniqueId);
  });
  
  test("04 - Scenario 3 PUT: limitedEnglishProficiencyDescriptor value for the Student Education Organization Association is " + expectedLimitedEnglishProficiencyDescriptor, () => {
      expect(response.limitedEnglishProficiencyDescriptor, `'${expectedLimitedEnglishProficiencyDescriptor}' was not found in the limitedEnglishProficiencyDescriptor property for the Student Education Organization Association. Retrieved value is '${response.limitedEnglishProficiencyDescriptor}'`).to.include(expectedLimitedEnglishProficiencyDescriptor);
  });
  
  let studentCharacteristicsArray = response.studentCharacteristics;
  expect(studentCharacteristicsArray).to.be.an("array")
  test("05 - Scenario 3 PUT: studentCharacteristicDescriptor value for the Student Education Organization Association is " + expectedStudentCharacteristicDescriptor, () => {
      let foundStudentCharacteristicDescriptor = false;
      for (let i = 0; i < studentCharacteristicsArray.length; i++) {
          let studentCharacteristicDescriptorItem = studentCharacteristicsArray[i];
          let studentCharacteristicDescriptor = studentCharacteristicDescriptorItem.studentCharacteristicDescriptor;
          if (studentCharacteristicDescriptor.includes(expectedStudentCharacteristicDescriptor)) {
              foundStudentCharacteristicDescriptor = true;
          }
          expect(foundStudentCharacteristicDescriptor, `'${expectedStudentCharacteristicDescriptor}' was not found in the studentCharacteristicDescriptor property. Retrieved value is '${JSON.stringify(studentCharacteristicsArray)}'. Please take a look at the response for more information.`).to.be.true;
      }  
  });
  
  let studentIdentificationCodesArray = response.studentIdentificationCodes;
  expect(studentIdentificationCodesArray).to.be.an("array");
  
  test("06 - Scenario 3 PUT: assigningOrganizationIdentificationCode values for the Student Education Organization Association could be " + expectedAssigningOrganizationIdentificationCode1 + ", " + expectedAssigningOrganizationIdentificationCode2 + " , or " + expectedAssigningOrganizationIdentificationCode3, () => {
      let doesValuesExists = false;
      studentIdentificationCodesArray.forEach(function(item) {
          if (item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode1 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode2 || item.assigningOrganizationIdentificationCode === expectedAssigningOrganizationIdentificationCode3) {
              doesValuesExists = true;
          }
      });
      expect(doesValuesExists, `'${expectedAssigningOrganizationIdentificationCode1}', '${expectedAssigningOrganizationIdentificationCode2}', or '${expectedAssigningOrganizationIdentificationCode3}' were not found in assigningOrganizationIdentificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.assigningOrganizationIdentificationCode))}'. Please take a look at the response for more information.`).to.be.true;
  });
  
  test("07 - Scenario 3 PUT: identificationCode values for the Student Education Organization Association could be " + expectedIdentificationCode1 + ", " + expectedIdentificationCode2 + " , or " + expectedIdentificationCode3, () => {
      let doesValuesExists = false;
      studentIdentificationCodesArray.forEach(function(item) {
          if (item.identificationCode === expectedIdentificationCode1 || item.identificationCode === expectedIdentificationCode2 || item.identificationCode === expectedIdentificationCode3) {
              doesValuesExists = true;
          }
      });
      expect(doesValuesExists, `'${expectedIdentificationCode1}', '${expectedIdentificationCode2}', or '${expectedIdentificationCode3}' were not found in identificationCode from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.identificationCode))}'. Please take a look at the response for more information.`).to.be.true;
  });
  
  test("08 - Scenario 3 PUT: studentIdentificationSystemDescriptor values for the Student Education Organization Association could be " + expectedStudentIdentificationSystemDescriptor1 + ", " + expectedStudentIdentificationSystemDescriptor2 + " , or " + expectedStudentIdentificationSystemDescriptor3, () => {
      let doesValuesExists = false;
      studentIdentificationCodesArray.forEach(function(item) {
          if (item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor1) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor2) || item.studentIdentificationSystemDescriptor.includes(expectedStudentIdentificationSystemDescriptor3)) {
              doesValuesExists = true;
          }
      });
      expect(doesValuesExists, `'${expectedStudentIdentificationSystemDescriptor1}', '${expectedStudentIdentificationSystemDescriptor2}', or '${expectedStudentIdentificationSystemDescriptor3}' were not found in studentIdentificationSystemDescriptor from studentIdentificationCodes for Student Education Organization Association. Retrieved values are '${JSON.stringify(studentIdentificationCodesArray.map(item => item.studentIdentificationSystemDescriptor))}'. Please take a look at the response for more information.`).to.be.true;
  });
  
  test("09 - Scenario 3 PUT: sexDescriptor value for the Student Education Organization Association is " + expectedSexDescriptor, () => {
      expect(response.sexDescriptor, `'${expectedSexDescriptor}' was not found in the sexDescriptor property for the Student Education Organization Association. Retrieved value is '${response.sexDescriptor}'`).to.contain(expectedSexDescriptor);
  });
  
  let addressesArray = response.addresses;
  expect(addressesArray).to.be.an("array");
  
  test("10 - Scenario 3 PUT: addressTypeDescriptor value for the Student Education Organization Association is " + expectedAddressTypeDescriptor, () => {
      let foundAddressTypeDescriptor = false;
      for (let i = 0; i < addressesArray.length; i++) {
          let addressTypeDescriptorItem = addressesArray[i];
          let addressTypeDescriptor = addressTypeDescriptorItem.addressTypeDescriptor;
          if (addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {
              foundAddressTypeDescriptor = true;
          }
      expect(foundAddressTypeDescriptor, `'${expectedAddressTypeDescriptor}' was not found in the addressTypeDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}' `).to.be.true ;   
      }
  });
  
  test("11 - Scenario 3 PUT: city value for the Student Education Organization Association is " + expectedCity, () => {
      let foundCity = false;
      for (let i = 0; i < addressesArray.length; i++) {
          let cityItem = addressesArray[i];
          let city = cityItem.city;
          let addressTypeDescriptor = cityItem.addressTypeDescriptor;
          if (city === expectedCity && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {
              foundCity = true;
          }
      expect(foundCity, `'${expectedCity}' with '${expectedAddressTypeDescriptor}' were not found in the city property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.city))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   
      }
  });
  
  test("12 - Scenario 3 PUT: postalCode value for the Student Education Organization Association is " + expectedPostalCode, () => {
      let foundPostalCode = false;
      for (let i = 0; i < addressesArray.length; i++) {
          let postalCodeItem = addressesArray[i];
          let postalCode = postalCodeItem.postalCode;
          let addressTypeDescriptor = postalCodeItem.addressTypeDescriptor;
          if (postalCode === expectedPostalCode && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {
              foundPostalCode = true;
          }
      expect(foundPostalCode, `'${expectedPostalCode}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.postalCode))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   
      }
  });
  
  test("13 - Scenario 3 PUT: stateAbbreviationDescriptor value for the Student Education Organization Association is " + expectedStateAbbreviationDescriptor, () => {
      let foundstateAbbreviationDescriptor = false;
      for (let i = 0; i < addressesArray.length; i++) {
          let stateAbbreviationDescriptorItem = addressesArray[i];
          let stateAbbreviationDescriptor = stateAbbreviationDescriptorItem.stateAbbreviationDescriptor;
          let addressTypeDescriptor = stateAbbreviationDescriptorItem.addressTypeDescriptor;
          if (stateAbbreviationDescriptor.includes(expectedStateAbbreviationDescriptor) && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {
              foundstateAbbreviationDescriptor = true;
          }
      expect(foundstateAbbreviationDescriptor, `'${expectedStateAbbreviationDescriptor}' with '${expectedAddressTypeDescriptor}' were not found in the stateAbbreviationDescriptor property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.stateAbbreviationDescriptor))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   
      }
  });
  
  test("14 - Scenario 3 PUT: streetNumberName value for the Student Education Organization Association is " + expectedStreetNumberName, () => {
      let foundStreetNumberName = false;
      for (let i = 0; i < addressesArray.length; i++) {
          let streetNumberNameItem = addressesArray[i];
          let streetNumberName = streetNumberNameItem.streetNumberName;
          let addressTypeDescriptor = streetNumberNameItem.addressTypeDescriptor;
          if (streetNumberName === expectedStreetNumberName && addressTypeDescriptor.includes(expectedAddressTypeDescriptor)) {
              foundStreetNumberName = true;
          }
      expect(foundStreetNumberName, `'${expectedStreetNumberName}' with '${expectedAddressTypeDescriptor}' were not found in the postalCode property. Retrieved value is '${JSON.stringify(addressesArray.map(item => item.streetNumberName))}' with '${JSON.stringify(addressesArray.map(item => item.addressTypeDescriptor))}'. Please take a look to the response for more information.`).to.be.true ;   
      }
  });
  
  let telephonesArray = response.telephones;
  expect(telephonesArray).to.be.an("array");
  
  test("15 - Scenario 3 PUT: telephoneNumber value for the Student Education Organization Association is " + expectedTelephoneNumber, () => {
      let foundTelephoneNumber = false;
      for (let i = 0; i < telephonesArray.length; i++) {
          let telephoneNumberItem = telephonesArray[i];
          let telephoneNumber = telephoneNumberItem.telephoneNumber;
          if (telephoneNumber === expectedTelephoneNumber) {
              foundTelephoneNumber = true;
          }
      expect(foundTelephoneNumber, `'${expectedTelephoneNumber}' was not found in the foundTelephoneNumber property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'.`).to.be.true ;   
      }
  });
  
  test("16 - Scenario 3 PUT: telephoneNumberTypeDescriptor value for the Student Education Organization Association is " + expectedTelephoneNumberTypeDescriptor, () => {
      let foundTelephoneNumberTypeDescriptor = false;
      for (let i = 0; i < telephonesArray.length; i++) {
          let telephoneNumberTypeDescriptorItem = telephonesArray[i];
          let telephoneNumberTypeDescriptor = telephoneNumberTypeDescriptorItem.telephoneNumberTypeDescriptor;
          let telephoneNumber = telephoneNumberTypeDescriptorItem.telephoneNumber;
          if (telephoneNumber === expectedTelephoneNumber && telephoneNumberTypeDescriptor.includes(expectedTelephoneNumberTypeDescriptor)) {
              foundTelephoneNumberTypeDescriptor = true;
          }
      expect(foundTelephoneNumberTypeDescriptor, `'${expectedTelephoneNumberTypeDescriptor}' with '${expectedTelephoneNumber}' was not found in the telephoneNumberTypeDescriptor property. Retrieved value is '${JSON.stringify(telephonesArray.map(item => item.telephoneNumberTypeDescriptor))}' with '${JSON.stringify(telephonesArray.map(item => item.telephoneNumber))}'. Please take a look at the response for more information.`).to.be.true ;   
      }
  });
  
  let electronicMailsArray = response.electronicMails;
  expect(electronicMailsArray).to.be.an("array");
  
  test("17 - Scenario 3 PUT: electronicMailAddress value for the Student Education Organization Association is " + expectedElectronicMailAddress, () => {
      let foundElectronicMailAddress = false;
      for (let i = 0; i < telephonesArray.length; i++) {
          let electronicMailAddressItem = electronicMailsArray[i];
          let electronicMailAddress = electronicMailAddressItem.electronicMailAddress;
          if (electronicMailAddress === expectedElectronicMailAddress) {
              foundTelephoneNumber = true;
          }
      expect(foundElectronicMailAddress, `'${expectedElectronicMailAddress}' was not found in the electronicMailAddress property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'.`).to.be.true ;   
      }
  });
  
  test("18 - Scenario 3 PUT: electronicMailTypeDescriptor value for the Student Education Organization Association is " + expectedElectronicMailTypeDescriptor, () => {
      let foundElectronicMailTypeDescriptor = false;
      for (let i = 0; i < telephonesArray.length; i++) {
          let electronicMailTypeDescriptorItem = telephonesArray[i];
          let electronicMailTypeDescriptor = electronicMailTypeDescriptorItem.electronicMailTypeDescriptorItem;
          let electronicMailAddress = electronicMailTypeDescriptorItem.electronicMailAddress;
          if (electronicMailAddress === expectedElectronicMailAddress && electronicMailTypeDescriptor.includes(expectedElectronicMailTypeDescriptor)) {
              foundElectronicMailTypeDescriptor = true;
          }
      expect(foundElectronicMailTypeDescriptor, `'${expectedElectronicMailTypeDescriptor}' with '${expectedElectronicMailAddress}' was not found in the electronicMailTypeDescriptor property. Retrieved value is '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailTypeDescriptor))}' with '${JSON.stringify(electronicMailsArray.map(item => item.electronicMailAddress))}'. Please take a look at the response for more information.`).to.be.true ;   
      }
  });
  
  test("19 - Scenario 3 PUT: hispanicLatinoEthnicity value for the Student Education Organization Association is " + expectedHispanicLatinoEthnicity, () => {
      expect(response.hispanicLatinoEthnicity, `'${expectedHispanicLatinoEthnicity}' was not found in the hispanicLatinoEthnicity property for the Student Education Organization Association. Retrieved value is '${response.hispanicLatinoEthnicity}'`).to.be.false;
  });
  
  let racesArray = response.races;
  expect(racesArray).to.be.an("array");
  
  test("20 - Scenario 3 PUT: raceDescriptor value for the Student Education Organization Association is " + expectedRaceDescriptor, () => {
      let foundRaceDescriptor = false;
      for (let i = 0; i < racesArray.length; i++) {
          let raceDescriptorItem = racesArray[i];
          let raceDescriptor = raceDescriptorItem.raceDescriptor;
          if (raceDescriptor.includes(expectedRaceDescriptor)) {
              foundRaceDescriptor = true;
          }
      expect(foundRaceDescriptor, `'${expectedRaceDescriptor}' was not found in the raceDescriptor property. Retrieved value is '${JSON.stringify(racesArray.map(item => item.raceDescriptor))}'.`).to.be.true ;   
      }
  });
  
  let languagesArray = response.languages;
  expect(languagesArray).to.be.an("array");
  
  test("21 - Scenario 3 PUT: languageDescriptor value for the Student Education Organization Association is " + expectedLanguageDescriptor, () => {
      let foundLanguageDescriptor = false;
      for (let i = 0; i < languagesArray.length; i++) {
          let languageDescriptorItem = languagesArray[i];
          let languageDescriptor = languageDescriptorItem.languageDescriptor;
          if (languageDescriptor.includes(expectedLanguageDescriptor)) {
              foundLanguageDescriptor = true;
          }
      expect(foundLanguageDescriptor, `'${expectedLanguageDescriptor}' was not found in the languageDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;   
      }
  });
  
  test("22 - Scenario 3 PUT: languageUseDescriptor value for the Student Education Organization Association is " + expectedLanguageUseDescriptor, () => {
      let foundLanguageUseDescriptor = false;
      for (let i = 0; i <languagesArray.length; i++) {
          let languageDescriptorItem = languagesArray[i];
          if (languageDescriptorItem.uses && Array.isArray(languageDescriptorItem.uses)) {
              for (let j = 0; j < languageDescriptorItem.uses.length; j++) {
                  let languageUseDescriptorItem = languageDescriptorItem.uses[j];
                  let languageUseDescriptor = languageUseDescriptorItem.languageUseDescriptor;
                  if (languageUseDescriptor === expectedLanguageUseDescriptor) {
                      foundLanguageUseDescriptor = true;
                      break; // Si lo encontramos, no es necesario seguir buscando
                  }
              }
          }
      expect(foundLanguageUseDescriptor, `'${expectedLanguageUseDescriptor}' within '${expectedLanguageDescriptor}' was not found in the languageUseDescriptor property. Retrieved value is '${JSON.stringify(languagesArray.map(item => item.uses.map(use => use.languageUseDescriptor)))}' within '${JSON.stringify(languagesArray.map(item => item.languageDescriptor))}'.`).to.be.true ;  
      }
  });
}

settings {
  encodeUrl: true
}
