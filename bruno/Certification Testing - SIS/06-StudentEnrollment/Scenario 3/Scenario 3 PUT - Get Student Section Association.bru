meta {
  name: Scenario 3 PUT - Get Student Section Association
  type: http
  seq: 4
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentSectionAssociations/{{s3StudentSectionAssociationId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{certToken}}
}

script:pre-request {
  // Making the GET request to Student Section Association and getting the ID of the student section association
  await bru.sendRequest({
      url: `${bru.getEnvVar('resourceBaseUrl')}/ed-fi/studentSectionAssociations`,
      method: 'GET',
      headers: {
          'Authorization': 'Bearer ' + bru.getEnvVar('certToken'),
          'Accept': '*/*'
      }
  }, async function(err, res) {
      if (err) {
          console.log('Error in the Authentication Process:', err);
      } else {
          var jsonData = res.data;
          let latestStudentSectionAssociation = bru.findLatestByModifiedDate(jsonData);
  
          let latestStudentSectionAssociationDate = latestStudentSectionAssociation ? latestStudentSectionAssociation._lastModifiedDate : null;
          console.log('latestStudentSectionAssociationDate', latestStudentSectionAssociationDate);
  
          bru.setEnvVar("s3StudentSectionAssociationId", latestStudentSectionAssociation.id);
          console.log('s3StudentSectionAssociationId', bru.getEnvVar("s3StudentSectionAssociationId"));
      }
  });
}

script:post-response {
  test("01 - Scenario 3 PUT: Test that Student Section Association request has 200 code status", () => {
      expect(res.getStatus()).to.equal(200);
  });
  
  let response = res.getBody();
  
  let dateObject = new Date();
  let currentYear = dateObject.getFullYear();
  
  let expectedLocalCourseCode;
  let expectedSchoolId = 255901107;
  let expectedSchoolYear = currentYear;
  let expectedSectionIdentifier;
  let expectedSessionName = "2016-2017 Fall Semester";
  let expectedStudentUniqueId = "111111";
  let expectedBeginDate = `${currentYear}-09-01`;
  let expectedEndDate = `${currentYear}-12-10`;
  let expectedHomeroomIndicator = false;
  
  let localCourseCodeSystemValue = bru.getEnvVar("localCourseCodeSystemValue");
  let statementLocalCourseCode = "";
  
  if (localCourseCodeSystemValue === "" || localCourseCodeSystemValue === null) {
      statementLocalCourseCode = "ELA-01";
  } else {
      statementLocalCourseCode = localCourseCodeSystemValue;
  }
  
  expectedLocalCourseCode = statementLocalCourseCode;
  
  test("02 - Scenario 3 PUT: localCourseCode value from sectionReference for Student Section Association is " + expectedLocalCourseCode, () => {
      expect(response.sectionReference.localCourseCode, `'${expectedLocalCourseCode}' was not found in the localCourseCode property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.localCourseCode}'`).to.eql(expectedLocalCourseCode);
  });
  
  test("03 - Scenario 3 PUT: schoolId value from sectionReference for Student Section Association is " + expectedSchoolId, () => {
      expect(response.sectionReference.schoolId, `'${expectedSchoolId}' was not found in the schoolId property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolId}'`).to.eql(expectedSchoolId);
  });
  
  test("04 - Scenario 3 PUT: schoolYear value from sectionReference for Student Section Association is " + expectedSchoolYear, () => {
      expect(response.sectionReference.schoolYear, `'${expectedSchoolYear}' was not found in the schoolYear property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.schoolYear}'`).to.eq(expectedSchoolYear);
  });
  
  let sectionIdentifierSystemValue = bru.getEnvVar("sectionIdentifierSystemValue");
  let statementSectionIdentifier = "";
  
  if (sectionIdentifierSystemValue === "" || sectionIdentifierSystemValue === null) {
      statementSectionIdentifier = "ELA012017RM555";
  } else {
      statementSectionIdentifier = sectionIdentifierSystemValue;
  }
  
  expectedSectionIdentifier = statementSectionIdentifier;
  
  test("05 - Scenario 3 PUT: sectionIdentifier value from sectionReference for Student Section Association is " + expectedSectionIdentifier, () => {
      expect(response.sectionReference.sectionIdentifier, `'${expectedSectionIdentifier}' was not found in the sectionIdentifier property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sectionIdentifier}'`).to.eql(expectedSectionIdentifier)
  });
  
  test("06 - Scenario 3 PUT: sessionName value from sectionReference for Student Section Association is " + expectedSessionName, () => {
      expect(response.sectionReference.sessionName, `'${expectedSessionName}' was not found in the sessionName property from sectionReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedSessionName);
  });
  
  test("07 - Scenario 3 PUT: studentUniqueId value from studentReference for Student Section Association is " + expectedStudentUniqueId, () => {
      expect(response.studentReference.studentUniqueId, `'${expectedStudentUniqueId}' was not found in the studentUniqueId property from studentReference for Student Section Association. Retrieved value is '${response.sectionReference.sessionName}'`).to.eql(expectedStudentUniqueId);
  });
  
  test("08 - Scenario 3 PUT: beginDate value for Student Section Association is " + expectedBeginDate, () => {
      expect(response.beginDate, `'${expectedBeginDate}' was not found in the beginDate property for Student Section Association. Retrieved value is '${response.beginDate}'`).to.eql(expectedBeginDate);
  });
  
  test("09 - Scenario 3 PUT: endDate value for Student Section Association is " + expectedEndDate, () => {
      expect(response.endDate, `'${expectedEndDate}' was not found in the endDate property for Student Section Association. Retrieved value is '${response.endDate}'`).to.eql(expectedEndDate);
  });
  
  test("10 - Scenario 3 PUT: homeroomIndicator value for the Student Section Association is " + expectedHomeroomIndicator, () => {
      expect(response.homeroomIndicator, `'${expectedHomeroomIndicator}' was not found in the homeroomIndicator property for Student Section Association. Retrieved value is '${response.homeroomIndicator}'`).to.be.false;
  });
}

settings {
  encodeUrl: true
}
