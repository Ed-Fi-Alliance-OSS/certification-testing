meta {
  name: 02 - Fetch Calendar
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/Calendars?schoolId={{tempSchoolId}}&calendarCode=[ENTER CALENDAR CODE]&schoolYear=[ENTER SCHOOL YEAR]
  body: none
  auth: inherit
}

params:query {
  schoolId: {{tempSchoolId}}
  calendarCode: [ENTER CALENDAR CODE]
  schoolYear: [ENTER SCHOOL YEAR]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].calendarCode: isString
  res.body[0].calendarCode: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].schoolYearTypeReference: isDefined
  res.body[0].schoolYearTypeReference.schoolYear: isNumber
  res.body[0].schoolYearTypeReference.schoolYear: neq 0
  res.body[0].calendarTypeDescriptor: isString
  res.body[0].calendarTypeDescriptor: isNotEmpty
  res.body[0].gradeLevels: isArray
}

script:pre-request {
  const { validateDependency } = require('./utils');
  
  validateDependency(bru, 'tempSchoolUniqueId', 'Fetch School Data', {
    actionHint: 'Ensure you ran the school fetch for the correct schoolId.'
  });
}

script:post-response {
  const { pickSingle, setVars, setVarsMessage, wipeVars, wipeVarsWarning } = require('./utils');
  const response = res.getBody();
  const calendarItem = pickSingle(response);
  const entityName = 'Calendar';
  
  if (res.status === 200 && calendarItem) {
    setVars(bru, {
      tempCalendarUniqueId: calendarItem.id,
      tempCalendarCode: calendarItem.calendarCode,
    });
    setVarsMessage(entityName);
  
  } else {
    wipeVars(bru, ['tempCalendarUniqueId', 'tempCalendarCode']);
    wipeVarsWarning(entityName);
    throw new Error(`No ${entityName} found, or multiple records were returned. Check your parameters and try again.`);
  }
}

settings {
  encodeUrl: true
}

docs {
  # Dependencies
    * `GET` Fetch School Data
}
