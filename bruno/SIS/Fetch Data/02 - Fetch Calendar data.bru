meta {
  name: 02 - Fetch Calendar Data
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/Calendars?schoolId={{tempSchoolId}}&calendarCode=107SS111111&schoolYear=2025
  body: none
  auth: inherit
}

params:query {
  schoolId: {{tempSchoolId}}
  calendarCode: 107SS111111
  schoolYear: 2025
  ~calendarTypeDescriptor: 
  ~id: {{tempCalendarId}}
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].calendarCode: isString
  res.body[0].calendarCode: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].schoolYearTypeReference: isDefined
  res.body[0].schoolYearTypeReference.schoolYear: isNumber
  res.body[0].schoolYearTypeReference.schoolYear: neq 0
  res.body[0].calendarTypeDescriptor: isString
  res.body[0].calendarTypeDescriptor: isNotEmpty
  res.body[0].gradeLevels: isArray
}

script:pre-request {
  const { validateDependency } = require('./utils');

  validateDependency(bru, 'tempSchoolUniqueId', 'Fetch School Data', {
    actionHint: 'Ensure you ran the school fetch for the correct schoolId.'
  });
}

script:post-response {
  const { cacheStoreCalendarResponse, cacheWipeCalendarResponse } = require('./v4/EducationOrganization/Calendars/calendars-utils');
  const { pickSingle } = require('./utils');
  
  if (res.status === 200) {
    const response = res.getBody();
    const calendarItem = pickSingle(response);

    if (calendarItem) {
      cacheStoreCalendarResponse(bru, calendarItem);
    } else {
      cacheWipeCalendarResponse(bru);
    }
  }
}

settings {
  encodeUrl: true
}

docs {
  # Dependencies
    * `GET` Fetch School Data
}
