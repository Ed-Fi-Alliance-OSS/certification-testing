meta {
  name: 01 - Fetch School
  type: http
  seq: 1
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
}

get {
  url: {{resourceBaseUrl}}/ed-fi/schools?schoolId=[ENTER SCHOOL ID]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SCHOOL ID]
}

script:post-response {
  const response = res.getBody();
  const { pickSingle, setVars, setVarsMessage, wipeVars, wipeVarsWarning } = require('./utils');
  const school = pickSingle(response);
  const entityName = 'School';
  
  if (res.status === 200 && school) {
    const { id, schoolId, nameOfInstitution: name } = school;
  
    setVars(bru, {
      tempSchoolId: schoolId,
      tempSchoolName: name,
      tempSchoolUniqueId: id
    });
    setVarsMessage(entityName);
  } else {
    wipeVars(bru, ['tempSchoolId', 'tempSchoolName', 'tempSchoolUniqueId']);
    wipeVarsWarning(entityName);
    throw new Error(`No ${entityName} found, or multiple records were returned. Check your parameters and try again.`);
  }
}

settings {
  encodeUrl: true
}
