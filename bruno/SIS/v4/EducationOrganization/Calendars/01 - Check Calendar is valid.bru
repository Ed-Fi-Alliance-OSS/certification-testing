meta {
  name: 01 - Check Calendar is valid
  type: http
  seq: 1
}

get {
  url: {{resourceBaseUrl}}/ed-fi/Calendars?schoolId={{tempSchoolId}}&calendarCode=[ENTER CALENDAR CODE]&schoolYear=[ENTER SCHOOL YEAR]
  body: none
  auth: inherit
}

params:query {
  schoolId: {{tempSchoolId}}
  calendarCode: [ENTER CALENDAR CODE]
  schoolYear: [ENTER SCHOOL YEAR]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].calendarCode: isString
  res.body[0].calendarCode: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].schoolYearTypeReference: isDefined
  res.body[0].schoolYearTypeReference.schoolYear: isNumber
  res.body[0].schoolYearTypeReference.schoolYear: neq 0
  res.body[0].calendarTypeDescriptor: isString
  res.body[0].calendarTypeDescriptor: isNotEmpty
  res.body[0].gradeLevels: isArray
}

script:pre-request {
  const { validateDependency } = require('./utils');
  
  validateDependency(bru, 'tempSchoolId', 'Fetch School Data', {
    actionHint: 'Ensure you ran the school fetch for the correct schoolId.'
  });
}

script:post-response {
  const { pickSingle, setVars, setVarsMessage, wipeVars, wipeVarsWarning, joinDescriptors, mapDescriptors, extractDescriptor, logScenario, logSpecCalendar } = require('./utils');
  const scenarioName = this.req.name;
  const entityName = 'Calendar';
  
  if (res.status === 200 && res.body) {
    const response = pickSingle(res.getBody());
  
    if(response){
      // Save useful values for later scenarios
      setVars(bru, {
        tempCalendarUniqueId: response.id,
        tempCalendarCode: response.calendarCode,
        tempCalendarSchoolYear: response.schoolYearTypeReference.schoolYear,
        tempCalendarGradeLevels: joinDescriptors(mapDescriptors(response.gradeLevels || [], gl => gl.gradeLevelDescriptor)),
        tempCalendarTypeDescriptor: extractDescriptor(response.calendarTypeDescriptor)
      }, entityName);
      
      logScenario(entityName, scenarioName, response, logSpecCalendar);
      return;
    }
  }
  
  // If we reach here, something went wrong; clean up and throw an error
  wipeVars(bru, ['tempCalendarUniqueId', 'tempCalendarCode', 'tempCalendarSchoolYear', 'tempCalendarGradeLevels', 'tempCalendarTypeDescriptor'], entityName, throwError = true);
}

settings {
  encodeUrl: true
}

docs {
  # Dependencies
    * `GET` Fetch School Data
}
