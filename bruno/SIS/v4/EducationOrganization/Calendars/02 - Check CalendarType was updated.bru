meta {
  name: 02 - Check CalendarType was updated
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/Calendars/{{tempCalendarUniqueId}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body.calendarTypeDescriptor: isString
  res.body.calendarTypeDescriptor: isNotEmpty
}

script:pre-request {
  const { validateDependency } = require('./utils');

  validateDependency(bru, 'tempCalendarUniqueId', '01 - Check Calendar is valid', {
    actionHint: 'Ensure you ran the calendar validation for the correct calendarCode.'
  });
}

script:post-response {
  const { expectChanged, extractDescriptor, logScenario, logSpecCalendar, throwNotFoundOrSpecificError } = require('./utils');
  const scenarioName = this.req.name;
  const entityName = "ClassPeriod";
  
  if (res.status === 200 && res.body) {
    const response = res.getBody();
    const previousType = bru.getEnvVar('tempCalendarTypeDescriptor');
    const currentType = (response && response.calendarTypeDescriptor)
      ? extractDescriptor(response.calendarTypeDescriptor)
      : null;
  
    expectChanged(previousType, currentType, 'Calendar type');
    logScenario(entityName, scenarioName, response, logSpecCalendar, ['calendarCode', 'calendarTypeDescriptor']);
  } else {
    throwNotFoundOrSpecificError(entityName);
  }
}

settings {
  encodeUrl: true
}

docs {
  # Dependencies
    * Scenario 1 - Check Calendar is Valid
}
