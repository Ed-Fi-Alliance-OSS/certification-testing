meta {
  name: 02 - Check CalendarType was updated
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/Calendars/{{tempCalendarUniqueId}}
  body: none
  auth: inherit
}

params:query {
  ~calendarCode: 107SS111111
  ~schoolYear: 2025
  ~calendarTypeDescriptor: 
  ~id: {{tempCalendarId}}
}

assert {
  res.status: eq 200
  res.body.calendarTypeDescriptor: isString
}

script:pre-request {
  const { validateDependency } = require('./utils');

  validateDependency(bru, 'tempCalendarUniqueId', '01 - Check Calendar is valid');
}

script:post-response {
  const { logCalendarResponse } = require('./v4/EducationOrganization/Calendars/calendars-utils');
  const response = res.getBody();
  
  if (!!response) {
    const {
      calendarCode,
      calendarTypeDescriptor,
    } = response;
  
    logCalendarResponse('Scenario 2 - Check CalendarType was updated', response, ['calendarCode', 'calendarTypeDescriptor']);
  
    test('Calendar type was updated correctly', () => {
      var previousType = bru.getEnvVar('tempCalendarTypeDescriptor');
      var currentType = calendarTypeDescriptor.split('#').pop();
  
      // The current type should not be the same as the previous type (updated)
      expect(currentType).not.equals(previousType);
    });
  }
}

settings {
  encodeUrl: true
}

docs {
  # Dependencies
    * Scenario 1 - Check Calendar is Valid
}
