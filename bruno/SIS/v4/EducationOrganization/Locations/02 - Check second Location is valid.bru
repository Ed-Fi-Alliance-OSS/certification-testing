meta {
  name: 02 - Check second Location is valid
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/locations?schoolId=[ENTER SECOND SCHOOL ID]&classroomIdentificationCode=[ENTER SECOND CLASSROOM IDENTIFICATION CODE]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SECOND SCHOOL ID]
  classroomIdentificationCode: [ENTER SECOND CLASSROOM IDENTIFICATION CODE]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].classroomIdentificationCode: isString
  res.body[0].classroomIdentificationCode: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].maximumNumberOfSeats: isNumber
  res.body[0].maximumNumberOfSeats: neq 0
}

script:post-response {
  const { pickSingle, setVars, wipeVars } = require('./utils');
  const { logSpecLocation, logScenario } = require('./logging');
  const entityName = 'Location';
  const scenarioName = this.req.name;
  const entity = pickSingle(res.getBody());

  if (!entity) {
    wipeVars(bru, [
      'secondLocationUniqueId','secondLocationId','secondLocationMaximumNumberOfSeats'
    ], entityName, true);
  }

  setVars(bru, {
    secondLocationUniqueId: entity.id,
    secondLocationId: entity.classroomIdentificationCode,
    secondLocationMaximumNumberOfSeats: entity.maximumNumberOfSeats
  });
  logScenario(entityName, scenarioName, entity, logSpecLocation);
}

settings {
  encodeUrl: true
}
