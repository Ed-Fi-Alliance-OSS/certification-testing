meta {
  name: 01 - Check CalendarDate is valid
  type: http
  seq: 1
}

get {
  url: {{resourceBaseUrl}}/ed-fi/CalendarDates?schoolId=[ENTER SCHOOL ID]&calendarCode=[ENTER CALENDAR CODE]&date=[ENTER DATE - format: yyyy-mm-dd]&schoolYear=[ENTER SCHOOL YEAR]
  body: none
  auth: bearer
}

params:query {
  schoolId: [ENTER SCHOOL ID]
  calendarCode: [ENTER CALENDAR CODE]
  date: [ENTER DATE - format: yyyy-mm-dd]
  schoolYear: [ENTER SCHOOL YEAR]
}

auth:bearer {
  token: {{edFiCertToken}}
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].date: isString
  res.body[0].date: isNotEmpty
  res.body[0].calendarReference: isDefined
  res.body[0].calendarReference.calendarCode: isString
  res.body[0].calendarReference.calendarCode: isNotEmpty
  res.body[0].calendarReference.schoolId: isNumber
  res.body[0].calendarReference.schoolId: neq 0
  res.body[0].calendarReference.schoolYear: isNumber
  res.body[0].calendarReference.schoolYear: neq 0
  res.body[0].calendarEvents: isArray
  res.body[0].calendarEvents: isNotEmpty
}

script:post-response {
  const { pickSingle, setVars, wipeVars, joinDescriptors, mapDescriptors, logScenario, logSpecCalendarDate } = require('./utils');
  const scenarioName = this.req.name;
  const entityName = 'Calendar Date';
  
  if (res.status === 200 && res.body) {
    const response = pickSingle(res.getBody());
  
    if (response) {
      // Save useful values for later scenarios
      setVars(bru, {
        tempCalendarDateUniqueId: response.id,
        tempCalendarDateEventDescriptors: joinDescriptors(mapDescriptors(response.calendarEvents || [], ev => ev.calendarEventDescriptor))
      }, entityName);
  
      logScenario(entityName, scenarioName, response, logSpecCalendarDate);
      return;
    }
  }
  
  // If we reach here, something went wrong; clean up and throw an error
  wipeVars(bru, ['tempCalendarDateUniqueId', 'tempCalendarDateEventDescriptors'], entityName, throwError = true);
}

settings {
  encodeUrl: true
}

