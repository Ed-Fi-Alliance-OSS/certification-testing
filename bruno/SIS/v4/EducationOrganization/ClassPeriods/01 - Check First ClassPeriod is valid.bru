meta {
  name: 01 - Check First ClassPeriod is valid
  type: http
  seq: 1
}

get {
  url: {{resourceBaseUrl}}/ed-fi/classPeriods?schoolId=[ENTER SCHOOL ID]&classPeriodName=[ENTER CLASS PERIOD NAME]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SCHOOL ID]
  classPeriodName: [ENTER CLASS PERIOD NAME]
}

vars:post-response {
  expectedSchoolId: 15496977934
  expectedClassPeriodName: "CLASS PERIOD 2"
  expectedStartTime: "09:00:00"
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].classPeriodName: isString
  res.body[0].classPeriodName: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].meetingTimes: isArray
  res.body[0].meetingTimes: isNotEmpty
  res.body[0].meetingTimes[0].startTime: isString
  res.body[0].meetingTimes[0].startTime: isNotEmpty
  res.body[0].meetingTimes[0].endTime: isString
  res.body[0].meetingTimes[0].endTime: isNotEmpty
}

script:post-response {
  const { pickSingle, setVars, wipeVars, logScenario, logSpecClassPeriod } = require('./utils');
  const scenarioName = this.req.name;
  const entityName = 'Class Period';
  
  if (res.status === 200 && res.body) {
    const response = pickSingle(res.getBody());
    
    if (response) {
      // Save useful values for later scenarios
      setVars(bru, {
        tempClassPeriodId: response.id,
        tempClassPeriodName: response.classPeriodName
      }, entityName);
  
      logScenario(entityName, scenarioName, response, logSpecClassPeriod);
      return;
    } 
  } 
  
  // If we reach here, something went wrong; clean up and throw an error
  wipeVars(bru, ['tempClassPeriodId', 'tempClassPeriodName'], entityName, throwError = true);
}

settings {
  encodeUrl: true
}
