meta {
  name: 01 - Check first Course is valid
  type: http
  seq: 1
}

get {
  url: {{resourceBaseUrl}}/ed-fi/courses?educationOrganizationId=[ENTER EDUCATION ORGANIZATION ID]&courseCode=[ENTER FIRST COURSE CODE]
  body: none
  auth: inherit
}

params:query {
  educationOrganizationId: [ENTER EDUCATION ORGANIZATION ID]
  courseCode: [ENTER FIRST COURSE CODE]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].courseCode: isString
  res.body[0].courseCode: isNotEmpty
  res.body[0].courseTitle: isString
  res.body[0].courseTitle: isNotEmpty
  res.body[0].academicSubjectDescriptor: isString
  res.body[0].academicSubjectDescriptor: isNotEmpty
  res.body[0].identificationCodes: isArray
  res.body[0].identificationCodes: isNotEmpty
  res.body[0].identificationCodes[0].courseIdentificationSystemDescriptor: isString
  res.body[0].identificationCodes[0].courseIdentificationSystemDescriptor: isNotEmpty
  res.body[0].identificationCodes[0].identificationCode: isString
  res.body[0].identificationCodes[0].identificationCode: isNotEmpty
  res.body[0].levelCharacteristics: isArray
  res.body[0].levelCharacteristics: isNotEmpty
  res.body[0].levelCharacteristics[0].courseLevelCharacteristicDescriptor: isString
  res.body[0].levelCharacteristics[0].courseLevelCharacteristicDescriptor: isNotEmpty
  res.body[0].educationOrganizationReference: isDefined
  res.body[0].educationOrganizationReference.educationOrganizationId: isNumber
  res.body[0].educationOrganizationReference.educationOrganizationId: neq 0
  res.body[0].numberOfParts: isNumber
}

script:post-response {
  const { pickSingle, setVars, wipeVars, logScenario, extractDescriptor, logSpecCourses } = require('./utils');
  const entityName = 'Course';
  const scenarioName = this.req.name;
  
  if (res.status === 200 && res.body) {
    const response = pickSingle(res.getBody());
  
    if (response) {
      setVars(bru, {
        courseId_1: response.id,
        courseCode_1: response.courseCode,
        courseTitle_1: response.courseTitle,
        academicSubjectDescriptor_1: extractDescriptor(response.academicSubjectDescriptor),
        levelCharacteristicDescriptor_1: extractDescriptor(response.levelCharacteristics[0].courseLevelCharacteristicDescriptor)
      }, entityName);
  
      if (typeof logScenario === 'function') {
        logScenario(entityName, scenarioName, response, logSpecCourses);
      }
      return;
    }
  }
  
  wipeVars(bru, [
    'courseId_1','courseCode_1','courseTitle_1','academicSubjectDescriptor_1','levelCharacteristicDescriptor_1'
  ], entityName, throwError = true);
}

settings {
  encodeUrl: true
}
