meta {
  name: 04 - Check second Course was Updated
  type: http
  seq: 4
}

get {
  url: {{resourceBaseUrl}}/ed-fi/courses/{{courseId_2}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body: isDefined
  res.body: isNotEmpty
  res.body.id: isString
  res.body.id: isNotEmpty
  res.body.courseCode: isString
  res.body.courseCode: isNotEmpty
  res.body.courseTitle: isString
  res.body.courseTitle: isNotEmpty
  res.body.academicSubjectDescriptor: isString
  res.body.academicSubjectDescriptor: isNotEmpty
  res.body.identificationCodes: isArray
  res.body.identificationCodes: isNotEmpty
  res.body.identificationCodes[0].courseIdentificationSystemDescriptor: isString
  res.body.identificationCodes[0].courseIdentificationSystemDescriptor: isNotEmpty
  res.body.identificationCodes[0].identificationCode: isString
  res.body.identificationCodes[0].identificationCode: isNotEmpty
  res.body.levelCharacteristics: isArray
  res.body.levelCharacteristics: isNotEmpty
  res.body.levelCharacteristics[0].courseLevelCharacteristicDescriptor: isString
  res.body.levelCharacteristics[0].courseLevelCharacteristicDescriptor: isNotEmpty
  res.body.educationOrganizationReference: isDefined
  res.body.educationOrganizationReference.educationOrganizationId: isNumber
  res.body.educationOrganizationReference.educationOrganizationId: neq 0
  res.body.numberOfParts: isNumber
}

script:pre-request {
  const { validateDependency } = require('./utils');
  validateDependency(bru, 'courseId_2', '02 - Check second Course is valid', {
    actionHint: 'Run the second Course validation before continuing.'
  });
  validateDependency(bru, 'levelCharacteristicDescriptor_2', '02 - Check second Course is valid');
}

script:post-response {
  const { getVar, expectChanged, extractDescriptor, logScenario, logSpecCourses, throwNotFoundOrSpecificError } = require('./utils');
  const entityName = 'Course';
  const scenarioName = this.req.name;

  if (res.status === 200 && res.body) {
    const response = res.getBody();

    const previousLevelChar = getVar(bru, 'levelCharacteristicDescriptor_2');
    const currentLevelChar = extractDescriptor(response.levelCharacteristics[0].courseLevelCharacteristicDescriptor);

    expectChanged(previousLevelChar, currentLevelChar, 'Course Level Characteristic');
    logScenario(entityName, scenarioName, response, logSpecCourses);
  } else {
    throwNotFoundOrSpecificError(entityName);
  }
}

settings {
  encodeUrl: true
}
