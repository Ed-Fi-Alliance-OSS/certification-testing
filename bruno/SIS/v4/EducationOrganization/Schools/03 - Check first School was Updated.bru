meta {
  name: 03 - Check first School was Updated
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/schools/{{firstSchoolUniqueId}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body: isDefined
  res.body: isNotEmpty
  res.body.id: isString
  res.body.id: isNotEmpty
  res.body.schoolId: isNumber
  res.body.schoolId: neq 0
  res.body.nameOfInstitution: isString
  res.body.nameOfInstitution: isNotEmpty
  res.body.localEducationAgencyReference: isDefined
  res.body.localEducationAgencyReference.localEducationAgencyId: isNumber
  res.body.localEducationAgencyReference.localEducationAgencyId: neq 0
  res.body.educationOrganizationCategories: isArray
  res.body.educationOrganizationCategories: isNotEmpty
  res.body.educationOrganizationCategories[0].educationOrganizationCategoryDescriptor: isString
  res.body.educationOrganizationCategories[0].educationOrganizationCategoryDescriptor: isNotEmpty
  res.body.gradeLevels: isArray
  res.body.gradeLevels: isNotEmpty
  res.body.gradeLevels[0].gradeLevelDescriptor: isString
  res.body.gradeLevels[0].gradeLevelDescriptor: isNotEmpty
  res.body.addresses: isArray
  res.body.addresses: isNotEmpty
  res.body.addresses[0].addressTypeDescriptor: isString
  res.body.addresses[0].addressTypeDescriptor: isNotEmpty
  res.body.addresses[0].city: isString
  res.body.addresses[0].city: isNotEmpty
  res.body.addresses[0].postalCode: isString
  res.body.addresses[0].postalCode: isNotEmpty
  res.body.addresses[0].stateAbbreviationDescriptor: isString
  res.body.addresses[0].stateAbbreviationDescriptor: isNotEmpty
  res.body.addresses[0].streetNumberName: isString
  res.body.addresses[0].streetNumberName: isNotEmpty
}

script:pre-request {
  const { validateDependency } = require('./utils');
  validateDependency(bru, 'firstSchoolUniqueId', '01 - Check first School is valid', { actionHint: 'Run the first School validation before continuing.' });
  validateDependency(bru, 'firstSchoolStreetNumberName', '01 - Check first School is valid');
}

script:post-response {
  const { getVar, expectChanged, logScenario, logSpecSchool, throwNotFoundOrSpecificError } = require('./utils');
  const entityName = 'School';
  const scenarioName = this.req.name;

  if (res.status === 200 && res.body) {
    const response = res.getBody();
    const previousStreet = getVar(bru, 'firstSchoolStreetNumberName');
    const currentStreet = response?.addresses?.[0]?.streetNumberName;
    expectChanged(previousStreet, currentStreet, 'streetNumberName');
    logScenario(entityName, scenarioName, response, logSpecSchool);
  } else {
    throwNotFoundOrSpecificError(entityName);
  }
}

settings {
  encodeUrl: true
}
