meta {
  name: 03 - Check first Cohort cohortTypeDescriptor was Updated
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/cohorts/{{firstCohortUniqueId}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body: isDefined
  res.body.id: isString
  res.body.id: isNotEmpty
  res.body.cohortTypeDescriptor: isString
  res.body.cohortTypeDescriptor: isNotEmpty
}

script:pre-request {
  const { validateDependency } = require('./utils');

  validateDependency(bru, 'firstCohortUniqueId', '01 - Check first Cohort is valid', { actionHint: 'Ensure you ran the first certification scenario successfully before continuing.' });
  validateDependency(bru, 'firstCohortCohortTypeDescriptor', '01 - Check first Cohort is valid', { actionHint: 'Ensure you ran the first certification scenario successfully before continuing.' });
}

script:post-response {
  const { getVar, expectChanged, extractDescriptor, throwNotFoundOrSpecificError } = require('./utils');
  const { logSpecCohorts, logScenario } = require('./logging');
  const entityName = 'Cohort';
  const scenarioName = this.req.name;

  if (res.status !== 200 || !res.body) {
    throwNotFoundOrSpecificError(entityName);
  }

  const current = res.getBody();

  expectChanged(getVar(bru, 'firstCohortCohortTypeDescriptor'), extractDescriptor(current.cohortTypeDescriptor), 'cohortTypeDescriptor');
  logScenario(entityName, scenarioName, current, logSpecCohorts, ['cohortTypeDescriptor']);
}

settings {
  encodeUrl: true
}
