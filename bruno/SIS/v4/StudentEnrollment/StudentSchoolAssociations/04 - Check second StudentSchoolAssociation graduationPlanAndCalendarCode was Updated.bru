meta {
  name: 04 - Check second StudentSchoolAssociation graduationPlanAndCalendarCode was Updated
  type: http
  seq: 4
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentSchoolAssociations/{{secondStudentSchoolAssociationUniqueId}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body.id: isString
  res.body.id: isNotEmpty
  res.body.schoolReference: isDefined
  res.body.schoolReference.schoolId: isNumber
  res.body.schoolReference.schoolId: neq 0
  res.body.studentReference: isDefined
  res.body.studentReference.studentUniqueId: isString
  res.body.studentReference.studentUniqueId: isNotEmpty
  res.body.graduationPlanReference: isDefined
  res.body.graduationPlanReference.educationOrganizationId: isNumber
  res.body.graduationPlanReference.educationOrganizationId: neq 0
  res.body.graduationPlanReference.graduationSchoolYear: isNumber
  res.body.graduationPlanReference.graduationSchoolYear: neq 0
  res.body.graduationPlanReference.graduationPlanTypeDescriptor: isString
  res.body.graduationPlanReference.graduationPlanTypeDescriptor: isNotEmpty
  res.body.entryDate: isString
  res.body.entryGradeLevelDescriptor: isString
  res.body.entryGradeLevelDescriptor: isNotEmpty
  res.body.entryTypeDescriptor: isString
  res.body.entryTypeDescriptor: isNotEmpty
  res.body.exitWithdrawDate: isString
  res.body.exitWithdrawTypeDescriptor: isString
  res.body.exitWithdrawTypeDescriptor: isNotEmpty
  res.body.repeatGradeIndicator: isBoolean
  res.body.residencyStatusDescriptor: isString
  res.body.residencyStatusDescriptor: isNotEmpty
  res.body.schoolChoiceTransfer: isBoolean
  res.body[0].calendarReference: isDefined
  res.body[0].calendarReference.calendarCode: isString
}

script:pre-request {
  const { validateDependency } = require('./utils');
  const actionHint = 'Ensure you ran the second certification scenario successfully before continuing.';

  validateDependency(bru, 'secondStudentSchoolAssociationUniqueId', '02 - Check second StudentSchoolAssociation is valid', { actionHint });
  validateDependency(bru, 'secondStudentSchoolAssociationGraduationPlanEducationOrganizationId', '02 - Check second StudentSchoolAssociation is valid', { actionHint });
  validateDependency(bru, 'secondStudentSchoolAssociationGraduationPlanSchoolYear', '02 - Check second StudentSchoolAssociation is valid', { actionHint });
  validateDependency(bru, 'secondStudentSchoolAssociationGraduationPlanTypeDescriptor', '02 - Check second StudentSchoolAssociation is valid', { actionHint });
  validateDependency(bru, 'secondStudentSchoolAssociationCalendarCode', '02 - Check second StudentSchoolAssociation is valid', { actionHint });
}

script:post-response {
  const { getVar, expectChanged, extractDescriptor } = require('./utils');
  const { logSpecStudentSchoolAssociation, logScenario } = require('./logging');
  const scenarioName = this.req.name;
  const entityName = 'StudentSchoolAssociation';
  const current = res.getBody();
  expectChanged(getVar(bru, 'secondStudentSchoolAssociationGraduationPlanEducationOrganizationId'), current.graduationPlanReference?.educationOrganizationId, 'graduationPlanEducationOrganizationId');
  expectChanged(getVar(bru, 'secondStudentSchoolAssociationGraduationPlanSchoolYear'), current.graduationPlanReference?.graduationSchoolYear, 'graduationPlanSchoolYear');
  expectChanged(getVar(bru, 'secondStudentSchoolAssociationGraduationPlanTypeDescriptor'), extractDescriptor(current.graduationPlanReference?.graduationPlanTypeDescriptor), 'graduationPlanTypeDescriptor');
  expectChanged(getVar(bru, 'secondStudentSchoolAssociationCalendarCode'), current.calendarReference?.calendarCode, 'calendarCode');
  logScenario(entityName, scenarioName, current, logSpecStudentSchoolAssociation, [
    'graduationPlanEducationOrganizationId',
    'graduationPlanSchoolYear',
    'graduationPlanTypeDescriptor',
    'calendarCode'
  ]);
}

settings {
  encodeUrl: true
  timeout: 0
}
