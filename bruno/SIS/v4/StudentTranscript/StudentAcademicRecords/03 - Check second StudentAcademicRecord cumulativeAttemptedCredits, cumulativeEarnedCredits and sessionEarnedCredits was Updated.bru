meta {
  name: 03 - Check second StudentAcademicRecord cumulativeAttemptedCredits, cumulativeEarnedCredits and sessionEarnedCredits was Updated
  type: http
  seq: 3
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentAcademicRecords/{{secondStudentAcademicRecordUniqueId}}
  body: none
  auth: inherit
}

assert {
  res.status: eq 200
  res.body.id: isString
  res.body.id: eq {{secondStudentAcademicRecordUniqueId}}
  res.body.educationOrganizationId: isNumber
  res.body.educationOrganizationId: neq 0
  res.body.schoolYear: isNumber
  res.body.schoolYear: neq 0
  res.body.studentUniqueId: isString
  res.body.studentUniqueId: isNotEmpty
  res.body.termDescriptor: isString
  res.body.termDescriptor: isNotEmpty
  res.body.cumulativeAttemptedCredits: isNumber
  res.body.cumulativeEarnedCredits: isNumber
  res.body.cumulativeGradePointAverage: isNumber
  res.body.sessionAttemptedCredits: isNumber
  res.body.sessionEarnedCredits: isNumber
}

script:pre-request {
  const { validateDependency } = require('./utils');
  validateDependency(bru, 'secondStudentAcademicRecordUniqueId', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
  validateDependency(bru, 'secondStudentAcademicRecordSchoolYear', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
  validateDependency(bru, 'secondStudentAcademicRecordCumulativeAttemptedCredits', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
  validateDependency(bru, 'secondStudentAcademicRecordCumulativeEarnedCredits', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
  validateDependency(bru, 'secondStudentAcademicRecordSessionAttemptedCredits', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
  validateDependency(bru, 'secondStudentAcademicRecordSessionEarnedCredits', '02 - Check second StudentAcademicRecord is valid', {
    actionHint: 'Ensure you ran the second certification scenario successfully before continuing.'
  });
}

script:post-response {
  const { expectChanged, setVars } = require('./utils');
  const { logScenario, logSpecStudentAcademicRecord } = require('./logging');
  const entityName = 'StudentAcademicRecord';
  const scenarioName = this.req.name;
  const entity = res.getBody();
  expectChanged(entityName, 'schoolYear', entity.schoolYear, bru.getVar('secondStudentAcademicRecordSchoolYear'));
  expectChanged(entityName, 'cumulativeAttemptedCredits', entity.cumulativeAttemptedCredits, bru.getVar('secondStudentAcademicRecordCumulativeAttemptedCredits'));
  expectChanged(entityName, 'cumulativeEarnedCredits', entity.cumulativeEarnedCredits, bru.getVar('secondStudentAcademicRecordCumulativeEarnedCredits'));
  expectChanged(entityName, 'sessionEarnedCredits', entity.sessionEarnedCredits, bru.getVar('secondStudentAcademicRecordSessionEarnedCredits'));
  expectChanged(entityName, 'sessionAttemptedCredits', entity.sessionAttemptedCredits, bru.getVar('secondStudentAcademicRecordSessionAttemptedCredits'));
  setVars(bru, {
    secondStudentAcademicRecordSchoolYear: entity.schoolYear,
    secondStudentAcademicRecordCumulativeAttemptedCredits: entity.cumulativeAttemptedCredits,
    secondStudentAcademicRecordCumulativeEarnedCredits: entity.cumulativeEarnedCredits,
    secondStudentAcademicRecordSessionAttemptedCredits: entity.sessionAttemptedCredits,
    secondStudentAcademicRecordSessionEarnedCredits: entity.sessionEarnedCredits
  });
  logScenario(entityName, scenarioName, entity, logSpecStudentAcademicRecord, [
    'schoolYear',
    'cumulativeAttemptedCredits',
    'cumulativeEarnedCredits',
    'sessionAttemptedCredits',
    'sessionEarnedCredits'
  ]);
}

settings {
  encodeUrl: true
  timeout: 0
}
