meta {
  name: 01 - Check first StudentAcademicRecord is valid
  type: http
  seq: 1
}

get {
  url: {{resourceBaseUrl}}/ed-fi/studentAcademicRecords?educationOrganizationId=[ENTER_EDUCATION_ORGANIZATION_ID]&schoolYear=[ENTER_SCHOOL_YEAR_FIVE_YEARS_AGO]&studentUniqueId=[ENTER_STUDENT_UNIQUE_ID]&termDescriptor={{termDescriptorEncoded}}&termDescriptor_KEEP_IT_AT_THE_END=[ENTER_TERM_DESCRIPTOR]
  body: none
  auth: inherit
}

params:query {
  educationOrganizationId: [ENTER_EDUCATION_ORGANIZATION_ID]
  schoolYear: [ENTER_SCHOOL_YEAR_FIVE_YEARS_AGO]
  studentUniqueId: [ENTER_STUDENT_UNIQUE_ID]
  termDescriptor: {{termDescriptorEncoded}}
  termDescriptor_KEEP_IT_AT_THE_END: [ENTER_TERM_DESCRIPTOR]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].educationOrganizationId: isNumber
  res.body[0].educationOrganizationId: neq 0
  res.body[0].schoolYear: isNumber
  res.body[0].schoolYear: neq 0
  res.body[0].studentUniqueId: isString
  res.body[0].studentUniqueId: isNotEmpty
  res.body[0].termDescriptor: isString
  res.body[0].termDescriptor: isNotEmpty
  res.body[0].cumulativeAttemptedCredits: isNumber
  res.body[0].cumulativeEarnedCredits: isNumber
  res.body[0].cumulativeGradePointAverage: isNumber
  res.body[0].sessionAttemptedCredits: isNumber
  res.body[0].sessionEarnedCredits: isNumber
}

script:pre-request {
  	const { encodeDescriptorParameter, setVar } = require('./utils');
  	const termDescriptorEncoded = encodeDescriptorParameter(req.url, parameterName = 'termDescriptor_KEEP_IT_AT_THE_END');
  	setVar(bru, 'termDescriptorEncoded', termDescriptorEncoded);
}

script:post-response {
  const { pickSingle, setVars, wipeVars } = require('./utils');
  const { logScenario, logSpecStudentAcademicRecord } = require('./logging');
  const entityName = 'StudentAcademicRecord';
  const scenarioName = this.req.name;
  const entity = pickSingle(res.getBody());
  if (!entity) {
    wipeVars(bru, [
      'firstStudentAcademicRecordUniqueId',
      'firstStudentAcademicRecordCumulativeAttemptedCredits',
      'firstStudentAcademicRecordCumulativeEarnedCredits',
      'firstStudentAcademicRecordSessionAttemptedCredits',
      'firstStudentAcademicRecordSessionEarnedCredits'
    ], entityName, true);
  }
  setVars(bru, {
    firstStudentAcademicRecordUniqueId: entity.id,
    firstStudentAcademicRecordCumulativeAttemptedCredits: entity.cumulativeAttemptedCredits,
    firstStudentAcademicRecordCumulativeEarnedCredits: entity.cumulativeEarnedCredits,
    firstStudentAcademicRecordSessionAttemptedCredits: entity.sessionAttemptedCredits,
    firstStudentAcademicRecordSessionEarnedCredits: entity.sessionEarnedCredits
  });
  logScenario(entityName, scenarioName, entity, logSpecStudentAcademicRecord);
}

settings {
  encodeUrl: false
  timeout: 0
  followRedirects: true
  maxRedirects: 5
}
