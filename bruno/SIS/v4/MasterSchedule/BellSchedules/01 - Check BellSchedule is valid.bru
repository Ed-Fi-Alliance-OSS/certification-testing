meta {
  name: 01 - Check BellSchedule is valid
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/bellSchedules?schoolId=[ENTER SCHOOL ID]&bellScheduleName=[ENTER BELL SCHEDULE NAME]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SCHOOL ID]
  bellScheduleName: [ENTER BELL SCHEDULE NAME]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].bellScheduleName: isString
  res.body[0].bellScheduleName: isNotEmpty
  res.body[0].alternateDayName: isString
  res.body[0].alternateDayName: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].classPeriods: isArray
  res.body[0].classPeriods: isNotEmpty
  res.body[0].classPeriods[0].classPeriodReference: isDefined
  res.body[0].classPeriods[0].classPeriodReference.classPeriodName: isString
  res.body[0].classPeriods[0].classPeriodReference.classPeriodName: isNotEmpty
}

script:post-response {
  const { pickSingle, setVars, wipeVars, throwNotFoundOrSpecificError } = require('./utils');
  const { logSpecBellSchedule, logScenario } = require('./logging');
  const scenarioName = this.req.name;
  const entityName = 'Bell Schedule';
  
  if (res.status === 200 && res.body) {
    const response = pickSingle(res.getBody());
    
    if (response) {
      logScenario(entityName, scenarioName, response, logSpecBellSchedule);
      return;
    } 
  } 
  
  // If we reach here, something went wrong; clean up and throw an error
  throwNotFoundOrSpecificError(entityName);
}

settings {
  encodeUrl: true
}
