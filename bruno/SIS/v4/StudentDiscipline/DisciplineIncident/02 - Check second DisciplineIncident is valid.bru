meta {
  name: 02 - Check second DisciplineIncident is valid
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/disciplineIncidents?schoolId=[ENTER SECOND SCHOOL ID]&incidentIdentifier=[ENTER SECOND INCIDENT IDENTIFIER]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SECOND SCHOOL ID]
  incidentIdentifier: [ENTER SECOND INCIDENT IDENTIFIER]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].incidentDate: isString
  res.body[0].incidentDate: isNotEmpty
  res.body[0].incidentIdentifier: isString
  res.body[0].incidentIdentifier: isNotEmpty
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].behaviors: isArray
  res.body[0].behaviors: isNotEmpty
  res.body[0].behaviors[0].behaviorDescriptor: isString
  res.body[0].behaviors[0].behaviorDescriptor: isNotEmpty
  res.body[0].incidentLocationDescriptor: isString
  res.body[0].incidentLocationDescriptor: isNotEmpty
  res.body[0].reporterDescriptionDescriptor: isString
  res.body[0].reporterDescriptionDescriptor: isNotEmpty
  res.body[0].reporterName: isString
  res.body[0].reporterName: isNotEmpty
}

script:post-response {
  const { pickSingle, setVars, wipeVars, extractDescriptor, mapDescriptors, joinDescriptors } = require('./utils');
  const { logSpecDisciplineIncident, logScenario } = require('./logging');
  const entityName = 'DisciplineIncident';
  const scenarioName = this.req.name;
  const single = pickSingle(res.getBody());
  
  if (!single) {
    wipeVars(bru, [ 'secondDisciplineIncidentUniqueId','secondDisciplineIncidentId','secondDisciplineIncidentIncidentLocationDescriptor' ], entityName, true);
  }
  
  const behaviorDescriptors = joinDescriptors(mapDescriptors(single.behaviors || [], b => b.behaviorDescriptor));
  
  setVars(bru, {
    secondDisciplineIncidentUniqueId: single.id,
    secondDisciplineIncidentId: single.incidentIdentifier,
    secondDisciplineIncidentIncidentLocationDescriptor: extractDescriptor(single.incidentLocationDescriptor)
  }, entityName);
  logScenario(entityName, scenarioName, single, logSpecDisciplineIncident);
}

settings {
  encodeUrl: true
  timeout: 0
}
