meta {
  name: 04 - Check fourth GradingPeriod is valid
  type: http
  seq: 4
}

get {
  url: {{resourceBaseUrl}}/ed-fi/gradingPeriods?schoolId=[ENTER SECOND SCHOOL ID]&schoolYear=[ENTER CURRENT SCHOOL YEAR]&periodSequence=2
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER SECOND SCHOOL ID]
  schoolYear: [ENTER CURRENT SCHOOL YEAR]
  periodSequence: 2
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].gradingPeriodDescriptor: isString
  res.body[0].gradingPeriodDescriptor: isNotEmpty
  res.body[0].periodSequence: isNumber
  res.body[0].periodSequence: neq 0
  res.body[0].schoolReference: isDefined
  res.body[0].schoolReference.schoolId: isNumber
  res.body[0].schoolReference.schoolId: neq 0
  res.body[0].schoolYearTypeReference: isDefined
  res.body[0].schoolYearTypeReference.schoolYear: isNumber
  res.body[0].schoolYearTypeReference.schoolYear: neq 0
  res.body[0].beginDate: isString
  res.body[0].beginDate: isNotEmpty
  res.body[0].endDate: isString
  res.body[0].endDate: isNotEmpty
  res.body[0].totalInstructionalDays: isNumber
  res.body[0].totalInstructionalDays: neq 0
}

script:post-response {
  	const { pickSingle, setVars, wipeVars } = require('./utils');
  	const { logSpecGradingPeriod, logScenario } = require('./logging');
  	const entityName='GradingPeriod';
  	const scenarioName=this.req.name;
  	const gp=pickSingle(res.getBody());
  
  	if(!gp){
  		wipeVars(bru,[
  			'fourthGradingPeriodUniqueId',
  			'fourthGradingPeriodEndDate',
  			'fourthGradingPeriodTotalInstructionalDays'
  		],entityName,true);
  	}
  
  	setVars(bru,{
  		fourthGradingPeriodUniqueId: gp.id,
  		fourthGradingPeriodEndDate: gp.endDate,
  		fourthGradingPeriodTotalInstructionalDays: gp.totalInstructionalDays
  	},entityName);
  	logScenario(entityName,scenarioName,gp,logSpecGradingPeriod);
}

settings {
  encodeUrl: true
  timeout: 0
}
