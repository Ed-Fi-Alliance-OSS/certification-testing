meta {
  name: 06 - Check third GradingPeriod was Updated
  type: http
  seq: 6
}

get {
  url: {{resourceBaseUrl}}/ed-fi/gradingPeriods/{{thirdGradingPeriodUniqueId}}
  body: none
  auth: inherit
}

script:pre-request {
  const { validateDependency } = require('./utils');
  validateDependency(bru, 'thirdGradingPeriodUniqueId', '04 - Check third GradingPeriod is valid');
  validateDependency(bru, 'thirdGradingPeriodEndDate', '04 - Check third GradingPeriod is valid');
  validateDependency(bru, 'thirdGradingPeriodTotalInstructionalDays', '04 - Check third GradingPeriod is valid');
}

assert {
  res.status: eq 200
  res.body: isDefined
  res.body: isNotEmpty
  res.body.id: isString
  res.body.id: isNotEmpty
  res.body.gradingPeriodDescriptor: isString
  res.body.gradingPeriodDescriptor: isNotEmpty
  res.body.periodSequence: isNumber
  res.body.periodSequence: neq 0
  res.body.schoolReference: isDefined
  res.body.schoolReference.schoolId: isNumber
  res.body.schoolReference.schoolId: neq 0
  res.body.schoolYearTypeReference: isDefined
  res.body.schoolYearTypeReference.schoolYear: isNumber
  res.body.schoolYearTypeReference.schoolYear: neq 0
  res.body.beginDate: isString
  res.body.beginDate: isNotEmpty
  res.body.endDate: isString
  res.body.endDate: isNotEmpty
  res.body.totalInstructionalDays: isNumber
  res.body.totalInstructionalDays: neq 0
}

script:post-response {
  const { getVar, expectChanged, logScenario, logSpecGradingPeriod, throwNotFoundOrSpecificError } = require('./utils');
  const entityName = 'GradingPeriod';
  const scenarioName = this.req.name;
  if (res.status === 200 && res.body) {
    const current = res.getBody();
    expectChanged(getVar(bru, 'thirdGradingPeriodEndDate'), current.endDate, 'endDate');
    expectChanged(getVar(bru, 'thirdGradingPeriodTotalInstructionalDays'), current.totalInstructionalDays, 'totalInstructionalDays');
    if (typeof logScenario === 'function') logScenario(entityName, scenarioName, current, logSpecGradingPeriod);
  } else {
    throwNotFoundOrSpecificError(entityName);
  }
}

settings {
  encodeUrl: true
}