meta {
  name: 02 - Check second Grade is valid
  type: http
  seq: 2
}

get {
  url: {{resourceBaseUrl}}/ed-fi/grades?schoolId=[ENTER_SCHOOL_ID]&schoolYear=[ENTER_SCHOOL_YEAR]&localCourseCode=[ENTER_LOCAL_COURSE_CODE]&sessionName=[ENTER_SESSION_NAME]&sectionIdentifier=[ENTER_SECTION_IDENTIFIER]&studentUniqueId=[ENTER_STUDENT_UNIQUE_ID]&beginDate=[ENTER_BEGIN_DATE]&gradingPeriodSchoolYear=[ENTER_GRADING_PERIOD_SCHOOL_YEAR]&gradingPeriodSchoolId=[ENTER_GRADING_PERIOD_SCHOOL_ID]&gradingPeriodSequence=[ENTER_GRADING_PERIOD_SEQUENCE]&gradingPeriodDescriptor=[ENTER_GRADING_PERIOD_DESCRIPTOR]&gradeTypeDescriptor=[ENTER_GRADING_PERIOD_TYPE_DESCRIPTOR]
  body: none
  auth: inherit
}

params:query {
  schoolId: [ENTER_SCHOOL_ID]
  schoolYear: [ENTER_SCHOOL_YEAR]
  localCourseCode: [ENTER_LOCAL_COURSE_CODE]
  sessionName: [ENTER_SESSION_NAME]
  sectionIdentifier: [ENTER_SECTION_IDENTIFIER]
  studentUniqueId: [ENTER_STUDENT_UNIQUE_ID]
  beginDate: [ENTER_BEGIN_DATE]
  gradingPeriodSchoolYear: [ENTER_GRADING_PERIOD_SCHOOL_YEAR]
  gradingPeriodSchoolId: [ENTER_GRADING_PERIOD_SCHOOL_ID]
  gradingPeriodSequence: [ENTER_GRADING_PERIOD_SEQUENCE]
  gradingPeriodDescriptor: [ENTER_GRADING_PERIOD_DESCRIPTOR]
  gradeTypeDescriptor: [ENTER_GRADING_PERIOD_TYPE_DESCRIPTOR]
}

assert {
  res.status: eq 200
  res.body: isArray
  res.body: isNotEmpty
  res.body[0].id: isString
  res.body[0].id: isNotEmpty
  res.body[0].gradeTypeDescriptor: isString
  res.body[0].gradeTypeDescriptor: isNotEmpty
  res.body[0].gradingPeriodReference: isDefined
  res.body[0].gradingPeriodReference.gradingPeriodDescriptor: isString
  res.body[0].gradingPeriodReference.gradingPeriodDescriptor: isNotEmpty
  res.body[0].gradingPeriodReference.periodSequence: isNumber
  res.body[0].gradingPeriodReference.periodSequence: neq 0
  res.body[0].gradingPeriodReference.schoolId: isNumber
  res.body[0].gradingPeriodReference.schoolId: neq 0
  res.body[0].gradingPeriodReference.schoolYear: isNumber
  res.body[0].gradingPeriodReference.schoolYear: neq 0
  res.body[0].studentSectionAssociationReference: isDefined
  res.body[0].studentSectionAssociationReference.studentUniqueId: isString
  res.body[0].studentSectionAssociationReference.studentUniqueId: isNotEmpty
  res.body[0].studentSectionAssociationReference.schoolId: isNumber
  res.body[0].studentSectionAssociationReference.schoolId: neq 0
  res.body[0].studentSectionAssociationReference.schoolYear: isNumber
  res.body[0].studentSectionAssociationReference.schoolYear: neq 0
  res.body[0].studentSectionAssociationReference.localCourseCode: isString
  res.body[0].studentSectionAssociationReference.localCourseCode: isNotEmpty
  res.body[0].studentSectionAssociationReference.sectionIdentifier: isString
  res.body[0].studentSectionAssociationReference.sectionIdentifier: isNotEmpty
  res.body[0].studentSectionAssociationReference.sessionName: isString
  res.body[0].studentSectionAssociationReference.sessionName: isNotEmpty
  res.body[0].studentSectionAssociationReference.beginDate: isString
  res.body[0].letterGradeEarned: isNumber
  res.body[0].numericGradeEarned: isNumber
}

script:post-response {
  const { pickSingle, setVars, wipeVars } = require('./utils');
  const { logScenario, logSpecGrade } = require('./logging');
  const entityName = 'Grade';
  const scenarioName = this.req.name;
  const entity = pickSingle(res.getBody());
  
  if (!entity) {
    wipeVars(bru, [
      'secondGradeUniqueId',
      'secondGradeLetterGradeEarned',
      'secondGradeNumericGradeEarned'
    ], entityName, true);
  }
  
  setVars(bru, {
    secondGradeUniqueId: entity.id,
    secondGradeLetterGradeEarned: entity.letterGradeEarned,
    secondGradeNumericGradeEarned: entity.numericGradeEarned
  });
  
  // Baseline logs full spec projection
  logScenario(entityName, scenarioName, entity, logSpecGrade);
}

settings {
  encodeUrl: true
  timeout: 0
}
